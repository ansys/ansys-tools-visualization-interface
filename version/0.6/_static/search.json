[
    {
        "objectID": "api/ansys/tools/visualization_interface/plotter/Plotter",
        "href": "api/ansys/tools/visualization_interface/plotter/Plotter.html#plotter",
        "title": "Plotter",
        "section": "Plotter",
        "text": "Base plotting class containing common methods and attributes.\nThis class is responsible for plotting objects using the specified backend.\nPlotting backend to use, by default PyVistaBackend.\nPlotter\nPlotter\nBaseBackend\noptional"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/plotter/Plotter",
        "href": "api/ansys/tools/visualization_interface/plotter/Plotter.html#ansys.tools.visualization_interface.plotter.Plotter",
        "title": "Plotter > Plotter > Plotter",
        "section": "Plotter > Plotter",
        "text": "class ansys.tools.visualization_interface.plotter.Plotter(backend: ansys.tools.visualization_interface.backends._base.BaseBackend = None)\n\nBase plotting class containing common methods and attributes.\n\nThis class is responsible for plotting objects using the specified backend.\n\nParameters\n\nbackend\n\nBaseBackend, optional\n\nPlotting backend to use, by default PyVistaBackend.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/plotter/Plotter",
        "href": "api/ansys/tools/visualization_interface/plotter/Plotter.html#overview",
        "title": "Plotter > Overview",
        "section": "Overview",
        "text": "plot\nPlots an object using the specified backend.\nshow\nShow the plotted objects.\nOverview\nplot\nshow"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/plotter/Plotter",
        "href": "api/ansys/tools/visualization_interface/plotter/Plotter.html#import-detail",
        "title": "Plotter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/plotter/Plotter",
        "href": "api/ansys/tools/visualization_interface/plotter/Plotter.html#method-detail",
        "title": "Plotter > Method detail",
        "section": "Method detail",
        "text": "Plots an object using the specified backend.\nObject to plot.\nAdditional plotting options.\nShow the plotted objects.\nObject to show, by default None.\nPath to save a screenshot, by default None.\nFlag to filter the object, by default None.\nAdditional plotting options the selected backend accepts.\nMethod detail\nAny\npython:dict\nAny\noptional\npython:str\noptional\noptional\npython:dict"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/plotter/Plotter",
        "href": "api/ansys/tools/visualization_interface/plotter/Plotter.html#Plotter.plot",
        "title": "Plotter > Method detail > plot",
        "section": "Method detail > plot",
        "text": "Plotter.plot(plottable_object: Any, **plotting_options)\n\nPlots an object using the specified backend.\n\nParameters\n\nplottable_object\n\nAny\n\nObject to plot.\n\nplotting_options\n\npython:dict\n\nAdditional plotting options.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/plotter/Plotter",
        "href": "api/ansys/tools/visualization_interface/plotter/Plotter.html#Plotter.show",
        "title": "Plotter > Method detail > show",
        "section": "Method detail > show",
        "text": "Plotter.show(plottable_object: Any = None, screenshot: str = None, name_filter: bool = None, **plotting_options) -> None\n\nShow the plotted objects.\n\nParameters\n\nplottable_object\n\nAny, optional\n\nObject to show, by default None.\n\nscreenshot\n\npython:str, optional\n\nPath to save a screenshot, by default None.\n\nname_filter\n\nbool, optional\n\nFlag to filter the object, by default None.\n\nplotting_options\n\npython:dict\n\nAdditional plotting options the selected backend accepts.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/index",
        "href": "api/ansys/tools/visualization_interface/backends/index.html#the-backends-package",
        "title": "The backends package",
        "section": "The backends package",
        "text": "The backends package\nbackends"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/index",
        "href": "api/ansys/tools/visualization_interface/backends/index.html#summary",
        "title": "The backends package > Summary",
        "section": "Summary",
        "text": "pyvista\nProvides interfaces.\nSummary\npyvista"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/index",
        "href": "api/ansys/tools/visualization_interface/backends/index.html#description",
        "title": "The backends package > Description",
        "section": "Description",
        "text": "Provides interfaces.\nDescription"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#pyvistabackendinterface",
        "title": "PyVistaBackendInterface",
        "section": "PyVistaBackendInterface",
        "text": "Bases: ansys.tools.visualization_interface.backends._base.BaseBackend\nProvides the interface for the Visualization Interface Tool plotter.\nThis class is intended to be used as a base class for the custom plotters\nin the different PyAnsys libraries. It provides the basic plotter functionalities,\nsuch as adding objects and enabling widgets and picking capabilities. It also\nprovides the ability to show the plotter using the trame\nservice.\nYou can override the plot_iter(), plot(), and picked_operation() methods.\nThe plot_iter() method is intended to plot a list of objects to the plotter, while the\nplot() method is intended to plot a single object to the plotter. The show() method is\nintended to show the plotter. The picked_operation() method is\nintended to perform an operation on the picked objects.\nWhether to activate the usage of the trame UI instead of the Python window.\nWhether to allow picking capabilities in the window. Incompatible with hovering.\nPicking will take precedence over hovering.\nWhether to allow hovering capabilities in the window. Incompatible with picking.\nPicking will take precedence over hovering.\nWhether to plot the names of the picked objects.\nWhether to show the plane in the plotter.\nWhether to use the Qt backend for the plotter.\nPyVistaBackendInterface\nPyVistaBackendInterface\nansys.tools.visualization_interface.backends._base.BaseBackend\nplot_iter()\nplot()\npicked_operation()\nplot_iter()\nplot()\nshow()\npicked_operation()\nOptional\npython:None\nOptional\npython:False\nOptional\npython:False\nOptional\npython:False\nOptional\npython:False\nOptional\npython:False"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#ansys.tools.visualization_interface.backends.pyvista.pyvista.PyVistaBackendInterface",
        "title": "PyVistaBackendInterface > PyVistaBackendInterface > PyVistaBackendInterface",
        "section": "PyVistaBackendInterface > PyVistaBackendInterface",
        "text": "class ansys.tools.visualization_interface.backends.pyvista.pyvista.PyVistaBackendInterface(use_trame: bool | None = None, allow_picking: bool | None = False, allow_hovering: bool | None = False, plot_picked_names: bool | None = False, show_plane: bool | None = False, use_qt: bool | None = False, **plotter_kwargs)\n\nBases: ansys.tools.visualization_interface.backends._base.BaseBackend\n\nProvides the interface for the Visualization Interface Tool plotter.\n\nThis class is intended to be used as a base class for the custom plotters\nin the different PyAnsys libraries. It provides the basic plotter functionalities,\nsuch as adding objects and enabling widgets and picking capabilities. It also\nprovides the ability to show the plotter using the trame\nservice.\n\nYou can override the plot_iter(), plot(), and picked_operation() methods.\nThe plot_iter() method is intended to plot a list of objects to the plotter, while the\nplot() method is intended to plot a single object to the plotter. The show() method is\nintended to show the plotter. The picked_operation() method is\nintended to perform an operation on the picked objects.\n\nParameters\n\nuse_trame\n\nOptional[bool], default: python:None\n\nWhether to activate the usage of the trame UI instead of the Python window.\n\nallow_picking\n\nOptional[bool], default: python:False\n\nWhether to allow picking capabilities in the window. Incompatible with hovering.\nPicking will take precedence over hovering.\n\nallow_hovering\n\nOptional[bool], default: python:False\n\nWhether to allow hovering capabilities in the window. Incompatible with picking.\nPicking will take precedence over hovering.\n\nplot_picked_names\n\nOptional[bool], default: python:False\n\nWhether to plot the names of the picked objects.\n\nshow_plane\n\nOptional[bool], default: python:False\n\nWhether to show the plane in the plotter.\n\nuse_qt\n\nOptional[bool], default: python:False\n\nWhether to use the Qt backend for the plotter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#overview",
        "title": "PyVistaBackendInterface > Overview",
        "section": "Overview",
        "text": "plot_iter\nPlot one or more compatible objects to the plotter.\nplot\nPlot a single object to the plotter.\nenable_widgets\nEnable the widgets for the plotter.\nadd_widget\nAdd one or more custom widgets to the plotter.\nselect_object\nSelect a custom object in the plotter.\nunselect_object\nUnselect a custom object in the plotter.\npicker_callback\nDefine the callback for the element picker.\nhover_callback\nDefine the callback for the element hover.\ncompute_edge_object_map\nCompute the mapping between plotter actors and EdgePlot objects.\nenable_picking\nEnable picking capabilities in the plotter.\nenable_hover\nEnable hover capabilities in the plotter.\ndisable_picking\nDisable picking capabilities in the plotter.\ndisable_hover\nDisable hover capabilities in the plotter.\nshow\nPlot and show any PyAnsys object.\nshow_plotter\nShow the plotter or start the trame service.\npicked_operation\nPerform an operation on the picked objects.\npv_interface\nPyVista interface.\nOverview\nplot_iter\nplot\nenable_widgets\nadd_widget\nselect_object\nunselect_object\npicker_callback\nhover_callback\ncompute_edge_object_map\nEdgePlot\nenable_picking\nenable_hover\ndisable_picking\ndisable_hover\nshow\nshow_plotter\npicked_operation\npv_interface"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#import-detail",
        "title": "PyVistaBackendInterface > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#property-detail",
        "title": "PyVistaBackendInterface > Property detail",
        "section": "Property detail",
        "text": "PyVista interface.\nProperty detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#PyVistaBackendInterface.pv_interface",
        "title": "PyVistaBackendInterface > Property detail > pv_interface",
        "section": "Property detail > pv_interface",
        "text": "property PyVistaBackendInterface.pv_interface: ansys.tools.visualization_interface.backends.pyvista.pyvista_interface.PyVistaInterface\n\nPyVista interface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#method-detail",
        "title": "PyVistaBackendInterface > Method detail",
        "section": "Method detail",
        "text": "Enable the widgets for the plotter.\nAdd one or more custom widgets to the plotter.\nOne or more custom widgets.\nSelect a custom object in the plotter.\nThis method highlights the edges of a body and adds a label. It also adds\nthe object to the _picked_dict and the actor to the _picker_added_actors_map.\nCustom object to select.\nSet of points to determine the label position.\nUnselect a custom object in the plotter.\nThis method removes edge highlighting and the label from a plotter actor and removes\nthe object from the Visualization Interface Tool object selection.\nCustom object to unselect.\nDefine the callback for the element picker.\nActor to select for the picker.\nDefine the callback for the element hover.\nActor to hover for the picker.\nCompute the mapping between plotter actors and EdgePlot objects.\nDictionary defining the mapping between plotter actors and EdgePlot objects.\nEnable picking capabilities in the plotter.\nEnable hover capabilities in the plotter.\nDisable picking capabilities in the plotter.\nDisable hover capabilities in the plotter.\nPlot and show any PyAnsys object.\nThe types of objects supported are MeshObjectPlot,\npv.MultiBlock, and pv.PolyData.\nObject or list of objects to plot.\nPath for saving a screenshot of the image that is being represented.\nDictionary with the plane and the viewup vectors of the 2D plane.\nRegular expression with the desired name or names to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nList with the picked bodies in the picked order.\nShow the plotter or start the trame service.\nVisualization Interface Tool plotter with the meshes added.\nPath for saving a screenshot of the image that is being represented.\nPlot one or more compatible objects to the plotter.\nOne or more objects to add.\nRegular expression with the desired name or names  to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nPlot a single object to the plotter.\nObject to add.\nRegular expression with the desired name or names to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nPerform an operation on the picked objects.\nMethod detail\nUnion\nPlotterWidget\nList\nPlotterWidget\n_picked_dict\n_picker_added_actors_map\nUnion\nMeshObjectPlot\nEdgePlot\nndarray\nUnion\nMeshObjectPlot\nEdgePlot\nActor\nActor\nEdgePlot\nDict\nActor\nEdgePlot\nEdgePlot\nMeshObjectPlot\npv.MultiBlock\npv.PolyData\nAny\npython:None\npython:str\npython:None\nDict\npython:None\npython:str\npython:None\npython:dict\npython:None\nPlotter.add_mesh\nList\nAny\nPlotter\npython:str\npython:None\nAny\npython:str\npython:dict\npython:None\nPlotter.add_mesh\nAny\npython:str\npython:dict\npython:None\nPlotter.add_mesh"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#PyVistaBackendInterface.enable_widgets",
        "title": "PyVistaBackendInterface > Method detail > enable_widgets",
        "section": "Method detail > enable_widgets",
        "text": "PyVistaBackendInterface.enable_widgets()\n\nEnable the widgets for the plotter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#PyVistaBackendInterface.add_widget",
        "title": "PyVistaBackendInterface > Method detail > add_widget",
        "section": "Method detail > add_widget",
        "text": "PyVistaBackendInterface.add_widget(widget: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget | List[ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget])\n\nAdd one or more custom widgets to the plotter.\n\nParameters\n\nwidget\n\nUnion[PlotterWidget, List[PlotterWidget]]\n\nOne or more custom widgets.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#PyVistaBackendInterface.select_object",
        "title": "PyVistaBackendInterface > Method detail > select_object",
        "section": "Method detail > select_object",
        "text": "PyVistaBackendInterface.select_object(custom_object: ansys.tools.visualization_interface.types.mesh_object_plot.MeshObjectPlot | ansys.tools.visualization_interface.types.edge_plot.EdgePlot, pt: numpy.ndarray) -> None\n\nSelect a custom object in the plotter.\n\nThis method highlights the edges of a body and adds a label. It also adds\nthe object to the _picked_dict and the actor to the _picker_added_actors_map.\n\nParameters\n\ncustom_object\n\nUnion[MeshObjectPlot, EdgePlot]\n\nCustom object to select.\n\npt\n\nndarray\n\nSet of points to determine the label position.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#PyVistaBackendInterface.unselect_object",
        "title": "PyVistaBackendInterface > Method detail > unselect_object",
        "section": "Method detail > unselect_object",
        "text": "PyVistaBackendInterface.unselect_object(custom_object: ansys.tools.visualization_interface.types.mesh_object_plot.MeshObjectPlot | ansys.tools.visualization_interface.types.edge_plot.EdgePlot) -> None\n\nUnselect a custom object in the plotter.\n\nThis method removes edge highlighting and the label from a plotter actor and removes\nthe object from the Visualization Interface Tool object selection.\n\nParameters\n\ncustom_object\n\nUnion[MeshObjectPlot, EdgePlot]\n\nCustom object to unselect.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#PyVistaBackendInterface.picker_callback",
        "title": "PyVistaBackendInterface > Method detail > picker_callback",
        "section": "Method detail > picker_callback",
        "text": "PyVistaBackendInterface.picker_callback(actor: pyvista.Actor) -> None\n\nDefine the callback for the element picker.\n\nParameters\n\nactor\n\nActor\n\nActor to select for the picker.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#PyVistaBackendInterface.hover_callback",
        "title": "PyVistaBackendInterface > Method detail > hover_callback",
        "section": "Method detail > hover_callback",
        "text": "PyVistaBackendInterface.hover_callback(_widget, event_name) -> None\n\nDefine the callback for the element hover.\n\nParameters\n\nactor\n\nActor\n\nActor to hover for the picker.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#PyVistaBackendInterface.compute_edge_object_map",
        "title": "PyVistaBackendInterface > Method detail > compute_edge_object_map",
        "section": "Method detail > compute_edge_object_map",
        "text": "PyVistaBackendInterface.compute_edge_object_map() -> Dict[pyvista.Actor, ansys.tools.visualization_interface.types.edge_plot.EdgePlot]\n\nCompute the mapping between plotter actors and EdgePlot objects.\n\nReturns\n\nDict[Actor, EdgePlot]\n\nDictionary defining the mapping between plotter actors and EdgePlot objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#PyVistaBackendInterface.enable_picking",
        "title": "PyVistaBackendInterface > Method detail > enable_picking",
        "section": "Method detail > enable_picking",
        "text": "PyVistaBackendInterface.enable_picking()\n\nEnable picking capabilities in the plotter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#PyVistaBackendInterface.enable_hover",
        "title": "PyVistaBackendInterface > Method detail > enable_hover",
        "section": "Method detail > enable_hover",
        "text": "PyVistaBackendInterface.enable_hover()\n\nEnable hover capabilities in the plotter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#PyVistaBackendInterface.disable_picking",
        "title": "PyVistaBackendInterface > Method detail > disable_picking",
        "section": "Method detail > disable_picking",
        "text": "PyVistaBackendInterface.disable_picking()\n\nDisable picking capabilities in the plotter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#PyVistaBackendInterface.disable_hover",
        "title": "PyVistaBackendInterface > Method detail > disable_hover",
        "section": "Method detail > disable_hover",
        "text": "PyVistaBackendInterface.disable_hover()\n\nDisable hover capabilities in the plotter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#PyVistaBackendInterface.show",
        "title": "PyVistaBackendInterface > Method detail > show",
        "section": "Method detail > show",
        "text": "PyVistaBackendInterface.show(plottable_object: Any = None, screenshot: str | None = None, view_2d: Dict = None, name_filter: str = None, **plotting_options) -> List[Any]\n\nPlot and show any PyAnsys object.\n\nThe types of objects supported are MeshObjectPlot,\npv.MultiBlock, and pv.PolyData.\n\nParameters\n\nplottable_object\n\nAny, default: python:None\n\nObject or list of objects to plot.\n\nscreenshot\n\npython:str, default: python:None\n\nPath for saving a screenshot of the image that is being represented.\n\nview_2d\n\nDict, default: python:None\n\nDictionary with the plane and the viewup vectors of the 2D plane.\n\nname_filter\n\npython:str, default: python:None\n\nRegular expression with the desired name or names to include in the plotter.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\nReturns\n\nList[Any]\n\nList with the picked bodies in the picked order.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#PyVistaBackendInterface.show_plotter",
        "title": "PyVistaBackendInterface > Method detail > show_plotter",
        "section": "Method detail > show_plotter",
        "text": "PyVistaBackendInterface.show_plotter(screenshot: str | None = None) -> None\n\nShow the plotter or start the trame service.\n\nParameters\n\nplotter\n\nPlotter\n\nVisualization Interface Tool plotter with the meshes added.\n\nscreenshot\n\npython:str, default: python:None\n\nPath for saving a screenshot of the image that is being represented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#PyVistaBackendInterface.plot_iter",
        "title": "PyVistaBackendInterface > Method detail > plot_iter",
        "section": "Method detail > plot_iter",
        "text": "abstract PyVistaBackendInterface.plot_iter(plottable_object: Any, name_filter: str = None, **plotting_options)\n\nPlot one or more compatible objects to the plotter.\n\nParameters\n\nplottable_object\n\nAny\n\nOne or more objects to add.\n\nname_filter\n\npython:str, default: None.\n\nRegular expression with the desired name or names  to include in the plotter.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#PyVistaBackendInterface.plot",
        "title": "PyVistaBackendInterface > Method detail > plot",
        "section": "Method detail > plot",
        "text": "abstract PyVistaBackendInterface.plot(plottable_object: Any, name_filter: str = None, **plotting_options)\n\nPlot a single object to the plotter.\n\nParameters\n\nplottable_object\n\nAny\n\nObject to add.\n\nname_filter\n\npython:str\n\nRegular expression with the desired name or names to include in the plotter.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#PyVistaBackendInterface.picked_operation",
        "title": "PyVistaBackendInterface > Method detail > picked_operation",
        "section": "Method detail > picked_operation",
        "text": "PyVistaBackendInterface.picked_operation() -> None\n\nPerform an operation on the picked objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "sg_execution_times",
        "href": "sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:10.889 total execution time for 7 files from all galleries:\nExample\nTime\nMem (MB)\nsphx_glr_examples_01-advanced-pyansys-examples_using_meshobject_with_field_data.py (../../examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.py)\n00:06.819\n0.0\nsphx_glr_examples_00-basic-pyvista-examples_qt_backend.py (../../examples/00-basic-pyvista-examples/qt_backend.py)\n00:01.482\n0.0\nsphx_glr_examples_00-basic-pyvista-examples_plain_usage.py (../../examples/00-basic-pyvista-examples/plain_usage.py)\n00:01.017\n0.0\nsphx_glr_examples_00-basic-pyvista-examples_picker.py (../../examples/00-basic-pyvista-examples/picker.py)\n00:00.836\n0.0\nsphx_glr_examples_00-basic-pyvista-examples_clipping_plane.py (../../examples/00-basic-pyvista-examples/clipping_plane.py)\n00:00.398\n0.0\nsphx_glr_examples_00-basic-pyvista-examples_using_meshobject.py (../../examples/00-basic-pyvista-examples/using_meshobject.py)\n00:00.336\n0.0\nsphx_glr_examples_00-basic-pyvista-examples_remote_trame_view.py (../../examples/00-basic-pyvista-examples/remote_trame_view.py)\n00:00.000\n0.0\nComputation times\n../../examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.py\n../../examples/00-basic-pyvista-examples/qt_backend.py\n../../examples/00-basic-pyvista-examples/plain_usage.py\n../../examples/00-basic-pyvista-examples/picker.py\n../../examples/00-basic-pyvista-examples/clipping_plane.py\n../../examples/00-basic-pyvista-examples/using_meshobject.py\n../../examples/00-basic-pyvista-examples/remote_trame_view.py"
    },
    {
        "objectID": "index",
        "href": "index.html#visualization-interface-tool-documentation-062",
        "title": "Visualization Interface Tool documentation 0.6.2",
        "section": "Visualization Interface Tool documentation 0.6.2",
        "text": "The Visualization Interface Tool is a Python API that provides an interface between PyAnsys libraries and\ndifferent plotting backends.\nThe Visualization Interface Tool offers these main features:\nServes as an interface between PyAnsys and other plotting libraries (although only\nPyVista is supported currently).\nProvides out-of-the box picking, viewing, and measuring functionalities.\nSupplies an extensible class for adding custom functionalities.\nLearn how to install the Visualization Interface Tool in user mode and quickly\nbegin using it.\nUnderstand key concepts for implementing the Visualization Interface Tool in\nyour workflow.\nUnderstand how to use Python to interact programmatically with\nthe Visualization Interface Tool.\nExplore examples that show how to use the Visualization Interface Tool to\nperform many different types of operations.\nLearn how to contribute to the Visualization Interface Tool codebase or documentation.\nVisualization Interface Tool documentation 0.6.2"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/index.html#the-mesh_sliderpy-module",
        "title": "The mesh_slider.py module",
        "section": "The mesh_slider.py module",
        "text": "The mesh_slider.py module\nmesh_slider.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/index.html#summary",
        "title": "The mesh_slider.py module > Summary",
        "section": "Summary",
        "text": "MeshSliderWidget\nProvides the mesh slider widget for the Visualization Interface Tool Plotter class.\nSummary\nMeshSliderWidget\nPlotter"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/index.html#description",
        "title": "The mesh_slider.py module > Description",
        "section": "Description",
        "text": "Provides the measure widget for the PyAnsys plotter.\nDescription"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget.html#meshsliderwidget",
        "title": "MeshSliderWidget",
        "section": "MeshSliderWidget",
        "text": "Bases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\nProvides the mesh slider widget for the Visualization Interface Tool Plotter class.\nPlotter to add the mesh slider widget to.\nMeshSliderWidget\nMeshSliderWidget\nansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\nPlotter\nPlotterHelper"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget.html#ansys.tools.visualization_interface.backends.pyvista.widgets.mesh_slider.MeshSliderWidget",
        "title": "MeshSliderWidget > MeshSliderWidget > MeshSliderWidget",
        "section": "MeshSliderWidget > MeshSliderWidget",
        "text": "class ansys.tools.visualization_interface.backends.pyvista.widgets.mesh_slider.MeshSliderWidget(plotter_helper: ansys.tools.visualization_interface.backends.pyvista.pyvista.Plotter)\n\nBases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\n\nProvides the mesh slider widget for the Visualization Interface Tool Plotter class.\n\nParameters\n\nplotter_helper\n\nPlotterHelper\n\nPlotter to add the mesh slider widget to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget.html#overview",
        "title": "MeshSliderWidget > Overview",
        "section": "Overview",
        "text": "callback\nRemove or add the mesh slider widget actor upon click.\nupdate\nDefine the mesh slider widget button parameters.\nplotter_helper\nOverview\ncallback\nupdate\nplotter_helper"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget.html#import-detail",
        "title": "MeshSliderWidget > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget.html#attribute-detail",
        "title": "MeshSliderWidget > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget.html#MeshSliderWidget.plotter_helper",
        "title": "MeshSliderWidget > Attribute detail > plotter_helper",
        "section": "Attribute detail > plotter_helper",
        "text": "MeshSliderWidget.plotter_helper\n\n"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget.html#method-detail",
        "title": "MeshSliderWidget > Method detail",
        "section": "Method detail",
        "text": "Remove or add the mesh slider widget actor upon click.\nWhether the state of the button, which is inherited from PyVista, is active.\nDefine the mesh slider widget button parameters.\nMethod detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget.html#MeshSliderWidget.callback",
        "title": "MeshSliderWidget > Method detail > callback",
        "section": "Method detail > callback",
        "text": "MeshSliderWidget.callback(state: bool) -> None\n\nRemove or add the mesh slider widget actor upon click.\n\nParameters\n\nstate\n\nbool\n\nWhether the state of the button, which is inherited from PyVista, is active.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget.html#MeshSliderWidget.update",
        "title": "MeshSliderWidget > Method detail > update",
        "section": "Method detail > update",
        "text": "MeshSliderWidget.update() -> None\n\nDefine the mesh slider widget button parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/index.html#the-widgetpy-module",
        "title": "The widget.py module",
        "section": "The widget.py module",
        "text": "The widget.py module\nwidget.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/index.html#summary",
        "title": "The widget.py module > Summary",
        "section": "Summary",
        "text": "PlotterWidget\nProvides an abstract class for plotter widgets.\nSummary\nPlotterWidget"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/index.html#description",
        "title": "The widget.py module > Description",
        "section": "Description",
        "text": "Provides the abstract implementation of plotter widgets.\nDescription"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/index.html#the-pyvista-package",
        "title": "The pyvista package",
        "section": "The pyvista package",
        "text": "The pyvista package\npyvista"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/index.html#summary",
        "title": "The pyvista package > Summary",
        "section": "Summary",
        "text": "widgets\nProvides widgets for the Visualization Interface Tool plotter.\npyvista\nProvides a wrapper to aid in plotting.\npyvista_interface\nProvides plotting for various PyAnsys objects.\ntrame_local\nProvides trame visualizer interface for visualization.\ntrame_remote\nModule for trame websocket client functions.\ntrame_service\nTrame service module.\nSummary\nwidgets\npyvista\npyvista_interface\ntrame_local\ntrame_remote\ntrame_service"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/index.html#description",
        "title": "The pyvista package > Description",
        "section": "Description",
        "text": "Provides interfaces.\nDescription"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/index.html#the-displace_arrowspy-module",
        "title": "The displace_arrows.py module",
        "section": "The displace_arrows.py module",
        "text": "The displace_arrows.py module\ndisplace_arrows.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/index.html#summary",
        "title": "The displace_arrows.py module > Summary",
        "section": "Summary",
        "text": "DisplacementArrow\nDefines the arrow to draw and what it is to do.\nCameraPanDirection\nProvides an enum with the available movement directions of the camera.\nSummary\nDisplacementArrow\nCameraPanDirection"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/index.html#description",
        "title": "The displace_arrows.py module > Description",
        "section": "Description",
        "text": "Provides the displacement arrows widget for the PyVista plotter.\nDescription"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton.html#hidebutton",
        "title": "HideButton",
        "section": "HideButton",
        "text": "Bases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\nProvides the hide widget for the Visualization Interface Tool Plotter class.\nPlotter to add the hide widget to.\nHideButton\nHideButton\nansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\nPlotter\nPlotterHelper"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton.html#ansys.tools.visualization_interface.backends.pyvista.widgets.hide_buttons.HideButton",
        "title": "HideButton > HideButton > HideButton",
        "section": "HideButton > HideButton",
        "text": "class ansys.tools.visualization_interface.backends.pyvista.widgets.hide_buttons.HideButton(plotter: ansys.tools.visualization_interface.backends.pyvista.pyvista.Plotter)\n\nBases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\n\nProvides the hide widget for the Visualization Interface Tool Plotter class.\n\nParameters\n\nplotter_helper\n\nPlotterHelper\n\nPlotter to add the hide widget to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton.html#overview",
        "title": "HideButton > Overview",
        "section": "Overview",
        "text": "callback\nRemove or add the hide widget actor upon click.\nupdate\nDefine the hide widget button parameters.\nOverview\ncallback\nupdate"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton.html#import-detail",
        "title": "HideButton > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton.html#method-detail",
        "title": "HideButton > Method detail",
        "section": "Method detail",
        "text": "Remove or add the hide widget actor upon click.\nWhether the state of the button, which is inherited from PyVista, is active.\nDefine the hide widget button parameters.\nMethod detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton.html#HideButton.callback",
        "title": "HideButton > Method detail > callback",
        "section": "Method detail > callback",
        "text": "HideButton.callback(state: bool) -> None\n\nRemove or add the hide widget actor upon click.\n\nParameters\n\nstate\n\nbool\n\nWhether the state of the button, which is inherited from PyVista, is active.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton.html#HideButton.update",
        "title": "HideButton > Method detail > update",
        "section": "Method detail > update",
        "text": "HideButton.update() -> None\n\nDefine the hide widget button parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/index",
        "href": "api/ansys/tools/visualization_interface/utils/logger/index.html#the-loggerpy-module",
        "title": "The logger.py module",
        "section": "The logger.py module",
        "text": "The logger.py module\nlogger.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/index",
        "href": "api/ansys/tools/visualization_interface/utils/logger/index.html#summary",
        "title": "The logger.py module > Summary",
        "section": "Summary",
        "text": "SingletonType\nProvides the singleton helper class for the logger.\nVizLogger\nProvides the singleton logger for the visualizer.\nlogger\nSummary\nSingletonType\nVizLogger\nlogger"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/index",
        "href": "api/ansys/tools/visualization_interface/utils/logger/index.html#description",
        "title": "The logger.py module > Description",
        "section": "Description",
        "text": "Provides the singleton helper class for the logger.\nDescription"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/index",
        "href": "api/ansys/tools/visualization_interface/utils/logger/index.html#module-detail",
        "title": "The logger.py module > Module detail",
        "section": "Module detail",
        "text": "Module detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/index",
        "href": "api/ansys/tools/visualization_interface/utils/logger/index.html#logger.logger",
        "title": "The logger.py module > Module detail > logger",
        "section": "Module detail > logger",
        "text": "logger.logger\n\n"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/qt_backend",
        "href": "examples/00-basic-pyvista-examples/qt_backend.html#use-a-pyvista-qt-backend",
        "title": "Use a PyVista Qt backend",
        "section": "Use a PyVista Qt backend",
        "text": "PyVista Qt is a package that extends the PyVista functionality through the\nusage of Qt. Qt applications operate in a separate thread than VTK, you can\nsimultaneously have an active VTK plot and a non-blocking Python session.\nThis example shows how to use the PyVista Qt backend to create a plotter\nUse a PyVista Qt backend"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/qt_backend",
        "href": "examples/00-basic-pyvista-examples/qt_backend.html#open-a-pyvistaqt-window",
        "title": "Use a PyVista Qt backend > Open a pyvistaqt window",
        "section": "Open a pyvistaqt window",
        "text": "Open a pyvistaqt window"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/qt_backend",
        "href": "examples/00-basic-pyvista-examples/qt_backend.html#parallel-vtk-window",
        "title": "Use a PyVista Qt backend > Parallel VTK window",
        "section": "Parallel VTK window",
        "text": "Parallel VTK window"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/qt_backend",
        "href": "examples/00-basic-pyvista-examples/qt_backend.html#close-the-pyvistaqt-window",
        "title": "Use a PyVista Qt backend > Close the pyvistaqt window",
        "section": "Close the pyvistaqt window",
        "text": "Total running time of the script: (0 minutes 1.482 seconds)\nDownload Jupyter notebook: qt_backend.ipynb\nDownload Python source code: qt_backend.py\nDownload zipped: qt_backend.zip\nClose the pyvistaqt window\nDownload Jupyter notebook: qt_backend.ipynb\nDownload Python source code: qt_backend.py\nDownload zipped: qt_backend.zip"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/color/index",
        "href": "api/ansys/tools/visualization_interface/utils/color/index.html#the-colorpy-module",
        "title": "The color.py module",
        "section": "The color.py module",
        "text": "The color.py module\ncolor.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/color/index",
        "href": "api/ansys/tools/visualization_interface/utils/color/index.html#summary",
        "title": "The color.py module > Summary",
        "section": "Summary",
        "text": "Color\nProvides an enum with the color to use for the plotter actors.\nSummary\nColor"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/color/index",
        "href": "api/ansys/tools/visualization_interface/utils/color/index.html#description",
        "title": "The color.py module > Description",
        "section": "Description",
        "text": "Provides an enum with the color to use for the plotter actors.\nDescription"
    },
    {
        "objectID": "examples/01-advanced-pyansys-examples/index",
        "href": "examples/01-advanced-pyansys-examples/index.html#advanced-usage-examples",
        "title": "Advanced usage examples",
        "section": "Advanced usage examples",
        "text": "These examples show how to use the Visualization Interface Tool to postprocess simulation data.\nsphx_glr_examples_01-advanced-pyansys-examples_using_meshobject_with_field_data.py\nAdvanced usage examples"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/clip_plane/index",
        "href": "api/ansys/tools/visualization_interface/utils/clip_plane/index.html#the-clip_planepy-module",
        "title": "The clip_plane.py module",
        "section": "The clip_plane.py module",
        "text": "The clip_plane.py module\nclip_plane.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/clip_plane/index",
        "href": "api/ansys/tools/visualization_interface/utils/clip_plane/index.html#summary",
        "title": "The clip_plane.py module > Summary",
        "section": "Summary",
        "text": "ClipPlane\nProvides the clipping plane for clipping meshes in the plotter.\nSummary\nClipPlane"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/clip_plane/index",
        "href": "api/ansys/tools/visualization_interface/utils/clip_plane/index.html#description",
        "title": "The clip_plane.py module > Description",
        "section": "Description",
        "text": "Provides the ClipPlane class.\nDescription\nClipPlane"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton.html#viewbutton",
        "title": "ViewButton",
        "section": "ViewButton",
        "text": "Bases: ansys.tools.visualization_interface.backends.pyvista.widgets.button.Button\nProvides for changing the view.\nPlotter to draw the buttons on.\nDirection of the view.\nViewButton\nViewButton\nansys.tools.visualization_interface.backends.pyvista.widgets.button.Button\nPlotter\nViewDirection"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton.html#ansys.tools.visualization_interface.backends.pyvista.widgets.view_button.ViewButton",
        "title": "ViewButton > ViewButton > ViewButton",
        "section": "ViewButton > ViewButton",
        "text": "class ansys.tools.visualization_interface.backends.pyvista.widgets.view_button.ViewButton(plotter: pyvista.Plotter, direction: tuple)\n\nBases: ansys.tools.visualization_interface.backends.pyvista.widgets.button.Button\n\nProvides for changing the view.\n\nParameters\n\nplotter\n\nPlotter\n\nPlotter to draw the buttons on.\n\ndirection\n\nViewDirection\n\nDirection of the view.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton.html#overview",
        "title": "ViewButton > Overview",
        "section": "Overview",
        "text": "callback\nChange the view depending on button interaction.\ndirection\nOverview\ncallback\ndirection"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton.html#import-detail",
        "title": "ViewButton > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton.html#attribute-detail",
        "title": "ViewButton > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton.html#ViewButton.direction",
        "title": "ViewButton > Attribute detail > direction",
        "section": "Attribute detail > direction",
        "text": "ViewButton.direction\n\n"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton.html#method-detail",
        "title": "ViewButton > Method detail",
        "section": "Method detail",
        "text": "Change the view depending on button interaction.\nWhether the state of the button, which is inherited from PyVista, is True.\nRaised if the specified direction is not implemented.\nMethod detail\nTrue\nNotImplementedError"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton.html#ViewButton.callback",
        "title": "ViewButton > Method detail > callback",
        "section": "Method detail > callback",
        "text": "ViewButton.callback(state: bool) -> None\n\nChange the view depending on button interaction.\n\nParameters\n\nstate\n\nbool\n\nWhether the state of the button, which is inherited from PyVista, is True.\n\nRaises\n\nNotImplementedError\n\nRaised if the specified direction is not implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/SingletonType",
        "href": "api/ansys/tools/visualization_interface/utils/logger/SingletonType.html#singletontype",
        "title": "SingletonType",
        "section": "SingletonType",
        "text": "Bases: type\nProvides the singleton helper class for the logger.\nSingletonType\nSingletonType\ntype"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/SingletonType",
        "href": "api/ansys/tools/visualization_interface/utils/logger/SingletonType.html#ansys.tools.visualization_interface.utils.logger.SingletonType",
        "title": "SingletonType > SingletonType > SingletonType",
        "section": "SingletonType > SingletonType",
        "text": "class ansys.tools.visualization_interface.utils.logger.SingletonType\n\nBases: type\n\nProvides the singleton helper class for the logger.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/SingletonType",
        "href": "api/ansys/tools/visualization_interface/utils/logger/SingletonType.html#overview",
        "title": "SingletonType > Overview",
        "section": "Overview",
        "text": "__call__\nCall to redirect new instances to the singleton instance.\nOverview\n__call__"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/SingletonType",
        "href": "api/ansys/tools/visualization_interface/utils/logger/SingletonType.html#import-detail",
        "title": "SingletonType > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/SingletonType",
        "href": "api/ansys/tools/visualization_interface/utils/logger/SingletonType.html#method-detail",
        "title": "SingletonType > Method detail",
        "section": "Method detail",
        "text": "Call to redirect new instances to the singleton instance.\nMethod detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/SingletonType",
        "href": "api/ansys/tools/visualization_interface/utils/logger/SingletonType.html#SingletonType.__call__",
        "title": "SingletonType > Method detail > __call__",
        "section": "Method detail > __call__",
        "text": "SingletonType.__call__(*args, **kwargs)\n\nCall to redirect new instances to the singleton instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/plain_usage",
        "href": "examples/00-basic-pyvista-examples/plain_usage.html#use-the-plotter",
        "title": "Use the plotter",
        "section": "Use the plotter",
        "text": "This example shows how to add one or more meshes to the plotter.\nUse the plotter"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/plain_usage",
        "href": "examples/00-basic-pyvista-examples/plain_usage.html#add-a-mesh-to-the-plotter",
        "title": "Use the plotter > Add a mesh to the plotter",
        "section": "Add a mesh to the plotter",
        "text": "This code shows how to add a single mesh to the plotter.\nAdd a mesh to the plotter"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/plain_usage",
        "href": "examples/00-basic-pyvista-examples/plain_usage.html#getting-a-screenshot",
        "title": "Use the plotter > Getting a screenshot",
        "section": "Getting a screenshot",
        "text": "Now we will check how to get a screenshot from our plotter.\nGetting a screenshot"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/plain_usage",
        "href": "examples/00-basic-pyvista-examples/plain_usage.html#add-a-list-of-meshes",
        "title": "Use the plotter > Add a list of meshes",
        "section": "Add a list of meshes",
        "text": "This code shows how to add a list of meshes to the plotter.\nTotal running time of the script: (0 minutes 1.017 seconds)\nDownload Jupyter notebook: plain_usage.ipynb\nDownload Python source code: plain_usage.py\nDownload zipped: plain_usage.zip\nAdd a list of meshes\nDownload Jupyter notebook: plain_usage.ipynb\nDownload Python source code: plain_usage.py\nDownload zipped: plain_usage.zip"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/index.html#the-pyvista_interfacepy-module",
        "title": "The pyvista_interface.py module",
        "section": "The pyvista_interface.py module",
        "text": "The pyvista_interface.py module\npyvista_interface.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/index.html#summary",
        "title": "The pyvista_interface.py module > Summary",
        "section": "Summary",
        "text": "PyVistaInterface\nProvides the middle class between PyVista plotting operations and PyAnsys objects.\nSummary\nPyVistaInterface"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/index.html#description",
        "title": "The pyvista_interface.py module > Description",
        "section": "Description",
        "text": "Provides plotting for various PyAnsys objects.\nDescription"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService.html#trameservice",
        "title": "TrameService",
        "section": "TrameService",
        "text": "Trame service class.\nInitializes a trame service where you can send meshes to plot in a trame webview plotter.\nHost where the webserver will listen for new plotters and meshes, by default “localhost”.\nPort where the webserver will listen for new plotters and meshes, by default 8765.\nTrameService\nTrameService\npython:str\noptional\npython:int\noptional"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService.html#ansys.tools.visualization_interface.backends.pyvista.trame_service.TrameService",
        "title": "TrameService > TrameService > TrameService",
        "section": "TrameService > TrameService",
        "text": "class ansys.tools.visualization_interface.backends.pyvista.trame_service.TrameService(websocket_host: str = 'localhost', websocket_port: int = 8765)\n\nTrame service class.\n\nInitializes a trame service where you can send meshes to plot in a trame webview plotter.\n\nParameters\n\nwebsocket_host\n\npython:str, optional\n\nHost where the webserver will listen for new plotters and meshes, by default “localhost”.\n\nwebsocket_port\n\npython:int, optional\n\nPort where the webserver will listen for new plotters and meshes, by default 8765.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService.html#overview",
        "title": "TrameService > Overview",
        "section": "Overview",
        "text": "clear_plotter\nClears the web view in the service.\nset_scene\nSets the web view scene for the trame service.\nrun\nStart the trame web view and the websocket services.\nOverview\nclear_plotter\nset_scene\nrun"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService.html#import-detail",
        "title": "TrameService > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService.html#method-detail",
        "title": "TrameService > Method detail",
        "section": "Method detail",
        "text": "Clears the web view in the service.\nSets the web view scene for the trame service.\nStart the trame web view and the websocket services.\nMethod detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService.html#TrameService.clear_plotter",
        "title": "TrameService > Method detail > clear_plotter",
        "section": "Method detail > clear_plotter",
        "text": "TrameService.clear_plotter()\n\nClears the web view in the service.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService.html#TrameService.set_scene",
        "title": "TrameService > Method detail > set_scene",
        "section": "Method detail > set_scene",
        "text": "TrameService.set_scene()\n\nSets the web view scene for the trame service.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService.html#TrameService.run",
        "title": "TrameService > Method detail > run",
        "section": "Method detail > run",
        "text": "TrameService.run()\n\nStart the trame web view and the websocket services.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/index.html#the-widgets-package",
        "title": "The widgets package",
        "section": "The widgets package",
        "text": "The widgets package\nwidgets"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/index.html#summary",
        "title": "The widgets package > Summary",
        "section": "Summary",
        "text": "button\nProvides for implementing buttons in PyAnsys.\ndisplace_arrows\nProvides the displacement arrows widget for the PyVista plotter.\nhide_buttons\nProvides the hide buttons widget for the PyAnsys plotter.\nmeasure\nProvides the measure widget for the PyAnsys plotter.\nmesh_slider\nProvides the measure widget for the PyAnsys plotter.\nruler\nProvides the ruler widget for the Visualization Interface Tool plotter.\nscreenshot\nProvides the screenshot widget for the Visualization Interface Tool plotter.\nview_button\nProvides the view button widget for changing the camera view.\nwidget\nProvides the abstract implementation of plotter widgets.\nSummary\nbutton\ndisplace_arrows\nhide_buttons\nmeasure\nmesh_slider\nruler\nscreenshot\nview_button\nwidget"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/index.html#description",
        "title": "The widgets package > Description",
        "section": "Description",
        "text": "Provides widgets for the Visualization Interface Tool plotter.\nDescription"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/index",
        "href": "api/ansys/tools/visualization_interface/types/index.html#the-types-package",
        "title": "The types package",
        "section": "The types package",
        "text": "The types package\ntypes"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/index",
        "href": "api/ansys/tools/visualization_interface/types/index.html#summary",
        "title": "The types package > Summary",
        "section": "Summary",
        "text": "edge_plot\nProvides the edge type for plotting.\nmesh_object_plot\nProvides the MeshObjectPlot class.\nSummary\nedge_plot\nmesh_object_plot\nMeshObjectPlot"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/index",
        "href": "api/ansys/tools/visualization_interface/types/index.html#description",
        "title": "The types package > Description",
        "section": "Description",
        "text": "Provides custom types.\nDescription"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/index.html#the-view_buttonpy-module",
        "title": "The view_button.py module",
        "section": "The view_button.py module",
        "text": "The view_button.py module\nview_button.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/index.html#summary",
        "title": "The view_button.py module > Summary",
        "section": "Summary",
        "text": "ViewButton\nProvides for changing the view.\nViewDirection\nProvides an enum with the available views.\nSummary\nViewButton\nViewDirection"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/index.html#description",
        "title": "The view_button.py module > Description",
        "section": "Description",
        "text": "Provides the view button widget for changing the camera view.\nDescription"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane",
        "href": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane.html#clipplane",
        "title": "ClipPlane",
        "section": "ClipPlane",
        "text": "Provides the clipping plane for clipping meshes in the plotter.\nThe clipping plane is defined by both normal and origin vectors.\nNormal of the plane.\nOrigin point of the plane.\nClipPlane\nClipPlane\nTuple\npython:float\npython:float\npython:float\nTuple\npython:float\npython:float\npython:float"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane",
        "href": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane.html#ansys.tools.visualization_interface.utils.clip_plane.ClipPlane",
        "title": "ClipPlane > ClipPlane > ClipPlane",
        "section": "ClipPlane > ClipPlane",
        "text": "class ansys.tools.visualization_interface.utils.clip_plane.ClipPlane(normal: Tuple[float, float, float] = (1, 0, 0), origin: Tuple[float, float, float] = (0, 0, 0))\n\nProvides the clipping plane for clipping meshes in the plotter.\n\nThe clipping plane is defined by both normal and origin vectors.\n\nParameters\n\nnormal\n\nTuple[python:float, python:float, python:float], default: (1, 0, 0)\n\nNormal of the plane.\n\norigin\n\nTuple[python:float, python:float, python:float], default: (0, 0, 0)\n\nOrigin point of the plane.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane",
        "href": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane.html#overview",
        "title": "ClipPlane > Overview",
        "section": "Overview",
        "text": "normal\nNormal of the plane.\norigin\nOrigin of the plane.\nOverview\nnormal\norigin"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane",
        "href": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane.html#import-detail",
        "title": "ClipPlane > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane",
        "href": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane.html#property-detail",
        "title": "ClipPlane > Property detail",
        "section": "Property detail",
        "text": "Normal of the plane.\nNormal of the plane.\nOrigin of the plane.\nOrigin of the plane.\nProperty detail\nTuple\npython:float\npython:float\npython:float\nTuple\npython:float\npython:float\npython:float"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane",
        "href": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane.html#ClipPlane.normal",
        "title": "ClipPlane > Property detail > normal",
        "section": "Property detail > normal",
        "text": "property ClipPlane.normal: Tuple[float, float, float]\n\nNormal of the plane.\n\nReturns\n\nTuple[python:float, python:float, python:float]\n\nNormal of the plane.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane",
        "href": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane.html#ClipPlane.origin",
        "title": "ClipPlane > Property detail > origin",
        "section": "Property detail > origin",
        "text": "property ClipPlane.origin: Tuple[float, float, float]\n\nOrigin of the plane.\n\nReturns\n\nTuple[python:float, python:float, python:float]\n\nOrigin of the plane.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/using_meshobject",
        "href": "examples/00-basic-pyvista-examples/using_meshobject.html#use-the-meshobjectplot-class",
        "title": "Use the MeshObjectPlot class",
        "section": "Use the MeshObjectPlot class",
        "text": "The Visualization Interface Tool provides the MeshObject helper class to relate a custom object\nwith its mesh. With a custom object, you can take advantage of the full potential of the\nVisualization Interface Tool.\nThis example shows how to use the MeshObjectPlot class to plot your custom objects.\nUse the MeshObjectPlot class\nMeshObjectPlot\nMeshObject\nMeshObjectPlot"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/using_meshobject",
        "href": "examples/00-basic-pyvista-examples/using_meshobject.html#relate-customobject-class-with-a-pyvista-mesh",
        "title": "Use the MeshObjectPlot class > Relate CustomObject class with a PyVista mesh",
        "section": "Relate CustomObject class with a PyVista mesh",
        "text": "Relate CustomObject class with a PyVista mesh\nCustomObject"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/using_meshobject",
        "href": "examples/00-basic-pyvista-examples/using_meshobject.html#create-a-meshobjectplot-instance",
        "title": "Use the MeshObjectPlot class > Create a MeshObjectPlot instance",
        "section": "Create a MeshObjectPlot instance",
        "text": "Create a MeshObjectPlot instance\nMeshObjectPlot"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/using_meshobject",
        "href": "examples/00-basic-pyvista-examples/using_meshobject.html#plot-the-meshobjectplot-instance",
        "title": "Use the MeshObjectPlot class > Plot the MeshObjectPlot instance",
        "section": "Plot the MeshObjectPlot instance",
        "text": "Total running time of the script: (0 minutes 0.336 seconds)\nDownload Jupyter notebook: using_meshobject.ipynb\nDownload Python source code: using_meshobject.py\nDownload zipped: using_meshobject.zip\nPlot the MeshObjectPlot instance\nMeshObjectPlot\nDownload Jupyter notebook: using_meshobject.ipynb\nDownload Python source code: using_meshobject.py\nDownload zipped: using_meshobject.zip"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/index",
        "href": "api/ansys/tools/visualization_interface/utils/index.html#the-utils-package",
        "title": "The utils package",
        "section": "The utils package",
        "text": "The utils package\nutils"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/index",
        "href": "api/ansys/tools/visualization_interface/utils/index.html#summary",
        "title": "The utils package > Summary",
        "section": "Summary",
        "text": "clip_plane\nProvides the ClipPlane class.\ncolor\nProvides an enum with the color to use for the plotter actors.\nlogger\nProvides the singleton helper class for the logger.\nSummary\nclip_plane\nClipPlane\ncolor\nlogger"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/index",
        "href": "api/ansys/tools/visualization_interface/utils/index.html#description",
        "title": "The utils package > Description",
        "section": "Description",
        "text": "Provides the Utils package.\nDescription"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget.html#measurewidget",
        "title": "MeasureWidget",
        "section": "MeasureWidget",
        "text": "Bases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\nProvides the measure widget for the Visualization Interface Tool Plotter class.\nPlotter to add the measure widget to.\nMeasureWidget\nMeasureWidget\nansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\nPlotter\nPlotterHelper"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget.html#ansys.tools.visualization_interface.backends.pyvista.widgets.measure.MeasureWidget",
        "title": "MeasureWidget > MeasureWidget > MeasureWidget",
        "section": "MeasureWidget > MeasureWidget",
        "text": "class ansys.tools.visualization_interface.backends.pyvista.widgets.measure.MeasureWidget(plotter_helper: ansys.tools.visualization_interface.backends.pyvista.pyvista.Plotter)\n\nBases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\n\nProvides the measure widget for the Visualization Interface Tool Plotter class.\n\nParameters\n\nplotter_helper\n\nPlotterHelper\n\nPlotter to add the measure widget to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget.html#overview",
        "title": "MeasureWidget > Overview",
        "section": "Overview",
        "text": "callback\nRemove or add the measurement widget actor upon click.\nupdate\nDefine the measurement widget button parameters.\nplotter_helper\nOverview\ncallback\nupdate\nplotter_helper"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget.html#import-detail",
        "title": "MeasureWidget > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget.html#attribute-detail",
        "title": "MeasureWidget > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget.html#MeasureWidget.plotter_helper",
        "title": "MeasureWidget > Attribute detail > plotter_helper",
        "section": "Attribute detail > plotter_helper",
        "text": "MeasureWidget.plotter_helper\n\n"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget.html#method-detail",
        "title": "MeasureWidget > Method detail",
        "section": "Method detail",
        "text": "Remove or add the measurement widget actor upon click.\nWhether the state of the button, which is inherited from PyVista, is active.\nDefine the measurement widget button parameters.\nMethod detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget.html#MeasureWidget.callback",
        "title": "MeasureWidget > Method detail > callback",
        "section": "Method detail > callback",
        "text": "MeasureWidget.callback(state: bool) -> None\n\nRemove or add the measurement widget actor upon click.\n\nParameters\n\nstate\n\nbool\n\nWhether the state of the button, which is inherited from PyVista, is active.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget.html#MeasureWidget.update",
        "title": "MeasureWidget > Method detail > update",
        "section": "Method detail > update",
        "text": "MeasureWidget.update() -> None\n\nDefine the measurement widget button parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/VizLogger",
        "href": "api/ansys/tools/visualization_interface/utils/logger/VizLogger.html#vizlogger",
        "title": "VizLogger",
        "section": "VizLogger",
        "text": "Bases: object\nProvides the singleton logger for the visualizer.\nWhether to include the logs in a file.\nVizLogger\nVizLogger\nobject\npython:False"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/VizLogger",
        "href": "api/ansys/tools/visualization_interface/utils/logger/VizLogger.html#ansys.tools.visualization_interface.utils.logger.VizLogger",
        "title": "VizLogger > VizLogger > VizLogger",
        "section": "VizLogger > VizLogger",
        "text": "class ansys.tools.visualization_interface.utils.logger.VizLogger(level: int = logging.ERROR, logger_name: str = 'VizLogger')\n\nBases: object\n\nProvides the singleton logger for the visualizer.\n\nParameters\n\nto_file\n\nbool, default: python:False\n\nWhether to include the logs in a file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/VizLogger",
        "href": "api/ansys/tools/visualization_interface/utils/logger/VizLogger.html#overview",
        "title": "VizLogger > Overview",
        "section": "Overview",
        "text": "get_logger\nGet the logger.\nset_level\nSet the logger output level.\nenable_output\nEnable logger output to a given stream.\nadd_file_handler\nSave logs to a file in addition to printing them to the standard output.\nOverview\nget_logger\nset_level\nenable_output\nadd_file_handler"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/VizLogger",
        "href": "api/ansys/tools/visualization_interface/utils/logger/VizLogger.html#import-detail",
        "title": "VizLogger > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/VizLogger",
        "href": "api/ansys/tools/visualization_interface/utils/logger/VizLogger.html#method-detail",
        "title": "VizLogger > Method detail",
        "section": "Method detail",
        "text": "Get the logger.\nLogger.\nSet the logger output level.\nOutput Level of the logger.\nEnable logger output to a given stream.\nIf a stream is not specified, sys.stderr is used.\nStream to output the log output to.\nSave logs to a file in addition to printing them to the standard output.\nDirectory of the logs.\nMethod detail\nLogger\npython:int\nsys.stderr\npython:str\n\"./.log\""
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/VizLogger",
        "href": "api/ansys/tools/visualization_interface/utils/logger/VizLogger.html#VizLogger.get_logger",
        "title": "VizLogger > Method detail > get_logger",
        "section": "Method detail > get_logger",
        "text": "VizLogger.get_logger()\n\nGet the logger.\n\nReturns\n\nLogger\n\nLogger.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/VizLogger",
        "href": "api/ansys/tools/visualization_interface/utils/logger/VizLogger.html#VizLogger.set_level",
        "title": "VizLogger > Method detail > set_level",
        "section": "Method detail > set_level",
        "text": "VizLogger.set_level(level: int)\n\nSet the logger output level.\n\nParameters\n\nlevel\n\npython:int\n\nOutput Level of the logger.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/VizLogger",
        "href": "api/ansys/tools/visualization_interface/utils/logger/VizLogger.html#VizLogger.enable_output",
        "title": "VizLogger > Method detail > enable_output",
        "section": "Method detail > enable_output",
        "text": "VizLogger.enable_output(stream=None)\n\nEnable logger output to a given stream.\n\nIf a stream is not specified, sys.stderr is used.\n\nParameters\n\nstream: TextIO, default: ``sys.stderr``\n\nStream to output the log output to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/VizLogger",
        "href": "api/ansys/tools/visualization_interface/utils/logger/VizLogger.html#VizLogger.add_file_handler",
        "title": "VizLogger > Method detail > add_file_handler",
        "section": "Method detail > add_file_handler",
        "text": "VizLogger.add_file_handler(logs_dir: str = './.log')\n\nSave logs to a file in addition to printing them to the standard output.\n\nParameters\n\nlogs_dir\n\npython:str, default: \"./.log\"\n\nDirectory of the logs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/plotter/index",
        "href": "api/ansys/tools/visualization_interface/plotter/index.html#the-plotterpy-module",
        "title": "The plotter.py module",
        "section": "The plotter.py module",
        "text": "The plotter.py module\nplotter.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/plotter/index",
        "href": "api/ansys/tools/visualization_interface/plotter/index.html#summary",
        "title": "The plotter.py module > Summary",
        "section": "Summary",
        "text": "Plotter\nBase plotting class containing common methods and attributes.\nSummary\nPlotter"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/plotter/index",
        "href": "api/ansys/tools/visualization_interface/plotter/index.html#description",
        "title": "The plotter.py module > Description",
        "section": "Description",
        "text": "Module for the Plotter class.\nDescription"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/index.html#the-pyvistapy-module",
        "title": "The pyvista.py module",
        "section": "The pyvista.py module",
        "text": "The pyvista.py module\npyvista.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/index.html#summary",
        "title": "The pyvista.py module > Summary",
        "section": "Summary",
        "text": "PyVistaBackendInterface\nProvides the interface for the Visualization Interface Tool plotter.\nPyVistaBackend\nProvides the generic plotter implementation for PyAnsys libraries.\nSummary\nPyVistaBackendInterface\nPyVistaBackend"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/index.html#description",
        "title": "The pyvista.py module > Description",
        "section": "Description",
        "text": "Provides a wrapper to aid in plotting.\nDescription"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/sg_execution_times",
        "href": "examples/00-basic-pyvista-examples/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:04.070 total execution time for 6 files from examples/00-basic-pyvista-examples:\nExample\nTime\nMem (MB)\nsphx_glr_examples_00-basic-pyvista-examples_qt_backend.py (qt_backend.py)\n00:01.482\n0.0\nsphx_glr_examples_00-basic-pyvista-examples_plain_usage.py (plain_usage.py)\n00:01.017\n0.0\nsphx_glr_examples_00-basic-pyvista-examples_picker.py (picker.py)\n00:00.836\n0.0\nsphx_glr_examples_00-basic-pyvista-examples_clipping_plane.py (clipping_plane.py)\n00:00.398\n0.0\nsphx_glr_examples_00-basic-pyvista-examples_using_meshobject.py (using_meshobject.py)\n00:00.336\n0.0\nsphx_glr_examples_00-basic-pyvista-examples_remote_trame_view.py (remote_trame_view.py)\n00:00.000\n0.0\nComputation times\nqt_backend.py\nplain_usage.py\npicker.py\nclipping_plane.py\nusing_meshobject.py\nremote_trame_view.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton.html#screenshotbutton",
        "title": "ScreenshotButton",
        "section": "ScreenshotButton",
        "text": "Bases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\nProvides the screenshot widget for the Visualization Interface Tool Plotter class.\nProvides the plotter to add the screenshot widget to.\nScreenshotButton\nScreenshotButton\nansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\nPlotter\nPlotter"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton.html#ansys.tools.visualization_interface.backends.pyvista.widgets.screenshot.ScreenshotButton",
        "title": "ScreenshotButton > ScreenshotButton > ScreenshotButton",
        "section": "ScreenshotButton > ScreenshotButton",
        "text": "class ansys.tools.visualization_interface.backends.pyvista.widgets.screenshot.ScreenshotButton(plotter: pyvista.Plotter)\n\nBases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\n\nProvides the screenshot widget for the Visualization Interface Tool Plotter class.\n\nParameters\n\nplotter\n\nPlotter\n\nProvides the plotter to add the screenshot widget to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton.html#overview",
        "title": "ScreenshotButton > Overview",
        "section": "Overview",
        "text": "callback\nRemove or add the screenshot widget actor upon click.\nupdate\nDefine the configuration and representation of the screenshot widget button.\nOverview\ncallback\nupdate"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton.html#import-detail",
        "title": "ScreenshotButton > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton.html#method-detail",
        "title": "ScreenshotButton > Method detail",
        "section": "Method detail",
        "text": "Remove or add the screenshot widget actor upon click.\nWhether the state of the button, which is inherited from PyVista, is True.\nThis method provides a callback function for the screenshot widget.\nIt is called every time the screenshot widget is clicked.\nDefine the configuration and representation of the screenshot widget button.\nMethod detail\nTrue"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton.html#ScreenshotButton.callback",
        "title": "ScreenshotButton > Method detail > callback",
        "section": "Method detail > callback",
        "text": "ScreenshotButton.callback(state: bool) -> None\n\nRemove or add the screenshot widget actor upon click.\n\nParameters\n\nstate\n\nbool\n\nWhether the state of the button, which is inherited from PyVista, is True.\n\nNotes\n\nThis method provides a callback function for the screenshot widget.\nIt is called every time the screenshot widget is clicked.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton.html#ScreenshotButton.update",
        "title": "ScreenshotButton > Method detail > update",
        "section": "Method detail > update",
        "text": "ScreenshotButton.update() -> None\n\nDefine the configuration and representation of the screenshot widget button.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler.html#ruler",
        "title": "Ruler",
        "section": "Ruler",
        "text": "Bases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\nProvides the ruler widget for the Visualization Interface Tool Plotter class.\nProvides the plotter to add the ruler widget to.\nRuler\nRuler\nansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\nPlotter\nPlotter"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler.html#ansys.tools.visualization_interface.backends.pyvista.widgets.ruler.Ruler",
        "title": "Ruler > Ruler > Ruler",
        "section": "Ruler > Ruler",
        "text": "class ansys.tools.visualization_interface.backends.pyvista.widgets.ruler.Ruler(plotter: pyvista.Plotter)\n\nBases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\n\nProvides the ruler widget for the Visualization Interface Tool Plotter class.\n\nParameters\n\nplotter\n\nPlotter\n\nProvides the plotter to add the ruler widget to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler.html#overview",
        "title": "Ruler > Overview",
        "section": "Overview",
        "text": "callback\nRemove or add the ruler widget actor upon click.\nupdate\nDefine the configuration and representation of the ruler widget button.\nOverview\ncallback\nupdate"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler.html#import-detail",
        "title": "Ruler > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler.html#method-detail",
        "title": "Ruler > Method detail",
        "section": "Method detail",
        "text": "Remove or add the ruler widget actor upon click.\nWhether the state of the button, which is inherited from PyVista, is True.\nThis method provides a callback function for the ruler widet.\nIt is called every time the ruler widget is clicked.\nDefine the configuration and representation of the ruler widget button.\nMethod detail\nTrue"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler.html#Ruler.callback",
        "title": "Ruler > Method detail > callback",
        "section": "Method detail > callback",
        "text": "Ruler.callback(state: bool) -> None\n\nRemove or add the ruler widget actor upon click.\n\nParameters\n\nstate\n\nbool\n\nWhether the state of the button, which is inherited from PyVista, is True.\n\nNotes\n\nThis method provides a callback function for the ruler widet.\nIt is called every time the ruler widget is clicked.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler.html#Ruler.update",
        "title": "Ruler > Method detail > update",
        "section": "Method detail > update",
        "text": "Ruler.update() -> None\n\nDefine the configuration and representation of the ruler widget button.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/index.html#the-hide_buttonspy-module",
        "title": "The hide_buttons.py module",
        "section": "The hide_buttons.py module",
        "text": "The hide_buttons.py module\nhide_buttons.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/index.html#summary",
        "title": "The hide_buttons.py module > Summary",
        "section": "Summary",
        "text": "HideButton\nProvides the hide widget for the Visualization Interface Tool Plotter class.\nSummary\nHideButton\nPlotter"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/index.html#description",
        "title": "The hide_buttons.py module > Description",
        "section": "Description",
        "text": "Provides the hide buttons widget for the PyAnsys plotter.\nDescription"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#contribute",
        "title": "Contribute",
        "section": "Contribute",
        "text": "Overall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys developer’s guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to the Visualization Interface Tool.\nThe following contribution information is specific to the Visualization Interface Tool.\nContribute"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#install-in-developer-mode",
        "title": "Contribute > Install in developer mode",
        "section": "Install in developer mode",
        "text": "Installing the Visualization Interface Tool in developer mode allows you to modify and enhance\nthe source.\nTo clone and install the latest Visualization Interface Tool release in development mode, run\nthese commands:\nInstall in developer mode"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#run-tests",
        "title": "Contribute > Run tests",
        "section": "Run tests",
        "text": "The Visualization Interface Tool uses pytest for testing.\nPrior to running tests, you must run this command to install\ntest dependencies:\nTo then run the tests, navigate to the root directory of the repository and run this\ncommand:\nRun tests"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#adhere-to-code-style",
        "title": "Contribute > Adhere to code style",
        "section": "Adhere to code style",
        "text": "The Visualization Interface Tool follows the PEP8 standard as outlined in\nPEP 8 in\nthe PyAnsys developer’s guide and implements style checking using\npre-commit.\nTo ensure your code meets minimum code styling standards, run these commands:\nYou can also install this as a pre-commit hook by running this command:\nThis way, it’s not possible for you to push code that fails the style checks:\nAdhere to code style"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#build-the-documentation",
        "title": "Contribute > Build the documentation",
        "section": "Build the documentation",
        "text": "You can build the Visualization Interface Tool documentation locally.\nPrior to building the documentation, you must run this command to install\ndocumentation dependencies:\nTo then build the documentation, navigate to the docs directory and run\nthis command:\nThe documentation is built in the docs/_build/html directory.\nYou can clean the documentation build by running this command:\nBuild the documentation\ndocs\ndocs/_build/html"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#post-issues",
        "title": "Contribute > Post issues",
        "section": "Post issues",
        "text": "Use the Visualization Interface Tool Issues\npage to report bugs and request new features. When possible, use the issue templates provided.\nIf your issue does not fit into one of these templates, click the link for opening a blank issue.\nIf you have general questions about the PyAnsys ecosystem, email\npyansys.core@ansys.com. If your\nquestion is specific to the Visualization Interface Tool, ask your\nquestion in an issue as described in the previous paragraph.\nPost issues"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/index.html#the-screenshotpy-module",
        "title": "The screenshot.py module",
        "section": "The screenshot.py module",
        "text": "The screenshot.py module\nscreenshot.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/index.html#summary",
        "title": "The screenshot.py module > Summary",
        "section": "Summary",
        "text": "ScreenshotButton\nProvides the screenshot widget for the Visualization Interface Tool Plotter class.\nSummary\nScreenshotButton\nPlotter"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/index.html#description",
        "title": "The screenshot.py module > Description",
        "section": "Description",
        "text": "Provides the screenshot widget for the Visualization Interface Tool plotter.\nDescription"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "This section show how to use the Visualization Interface Tool to perform many different\ntypes of operations.\nExamples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#basic-usage-examples",
        "title": "Examples > Basic usage examples",
        "section": "Basic usage examples",
        "text": "These examples show how to use the general plotter included in the Visualization Interface Tool.\nsphx_glr_examples_00-basic-pyvista-examples_remote_trame_view.py\nsphx_glr_examples_00-basic-pyvista-examples_qt_backend.py\nsphx_glr_examples_00-basic-pyvista-examples_clipping_plane.py\nsphx_glr_examples_00-basic-pyvista-examples_using_meshobject.py\nsphx_glr_examples_00-basic-pyvista-examples_plain_usage.py\nsphx_glr_examples_00-basic-pyvista-examples_picker.py\nBasic usage examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#advanced-usage-examples",
        "title": "Examples > Advanced usage examples",
        "section": "Advanced usage examples",
        "text": "These examples show how to use the Visualization Interface Tool to postprocess simulation data.\nsphx_glr_examples_01-advanced-pyansys-examples_using_meshobject_with_field_data.py\nAdvanced usage examples"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/mesh_object_plot/index",
        "href": "api/ansys/tools/visualization_interface/types/mesh_object_plot/index.html#the-mesh_object_plotpy-module",
        "title": "The mesh_object_plot.py module",
        "section": "The mesh_object_plot.py module",
        "text": "The mesh_object_plot.py module\nmesh_object_plot.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/mesh_object_plot/index",
        "href": "api/ansys/tools/visualization_interface/types/mesh_object_plot/index.html#summary",
        "title": "The mesh_object_plot.py module > Summary",
        "section": "Summary",
        "text": "MeshObjectPlot\nRelates a custom object with a mesh, provided by the consumer library.\nSummary\nMeshObjectPlot"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/mesh_object_plot/index",
        "href": "api/ansys/tools/visualization_interface/types/mesh_object_plot/index.html#description",
        "title": "The mesh_object_plot.py module > Description",
        "section": "Description",
        "text": "Provides the MeshObjectPlot class.\nDescription\nMeshObjectPlot"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/index",
        "href": "api/ansys/tools/visualization_interface/index.html#the-ansystoolsvisualization_interface-library",
        "title": "The ansys.tools.visualization_interface library",
        "section": "The ansys.tools.visualization_interface library",
        "text": "The ansys.tools.visualization_interface library\nansys.tools.visualization_interface"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/index",
        "href": "api/ansys/tools/visualization_interface/index.html#summary",
        "title": "The ansys.tools.visualization_interface library > Summary",
        "section": "Summary",
        "text": "backends\nProvides interfaces.\ntypes\nProvides custom types.\nutils\nProvides the Utils package.\nplotter\nModule for the Plotter class.\n__version__\nUSE_TRAME\nDOCUMENTATION_BUILD\nWhether the documentation is being built or not.\nTESTING_MODE\nWhether the library is being built or not, used to avoid showing plots while testing.\nUSE_HTML_BACKEND\nWhether the library is being built or not, used to avoid showing plots while testing.\nSummary\nbackends\ntypes\nutils\nplotter\n__version__\nUSE_TRAME\nDOCUMENTATION_BUILD\nTESTING_MODE\nUSE_HTML_BACKEND"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/index",
        "href": "api/ansys/tools/visualization_interface/index.html#description",
        "title": "The ansys.tools.visualization_interface library > Description",
        "section": "Description",
        "text": "Visualization Interface Tool is a Python client library for visualizing the results of Ansys simulations.\nDescription"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/index",
        "href": "api/ansys/tools/visualization_interface/index.html#module-detail",
        "title": "The ansys.tools.visualization_interface library > Module detail",
        "section": "Module detail",
        "text": "Whether the documentation is being built or not.\nWhether the library is being built or not, used to avoid showing plots while testing.\nWhether the library is being built or not, used to avoid showing plots while testing.\nModule detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/index",
        "href": "api/ansys/tools/visualization_interface/index.html#visualization_interface.USE_TRAME",
        "title": "The ansys.tools.visualization_interface library > Module detail > USE_TRAME",
        "section": "Module detail > USE_TRAME",
        "text": "visualization_interface.USE_TRAME: bool = False\n\n"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/index",
        "href": "api/ansys/tools/visualization_interface/index.html#visualization_interface.DOCUMENTATION_BUILD",
        "title": "The ansys.tools.visualization_interface library > Module detail > DOCUMENTATION_BUILD",
        "section": "Module detail > DOCUMENTATION_BUILD",
        "text": "visualization_interface.DOCUMENTATION_BUILD: bool\n\nWhether the documentation is being built or not.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/index",
        "href": "api/ansys/tools/visualization_interface/index.html#visualization_interface.TESTING_MODE",
        "title": "The ansys.tools.visualization_interface library > Module detail > TESTING_MODE",
        "section": "Module detail > TESTING_MODE",
        "text": "visualization_interface.TESTING_MODE: bool\n\nWhether the library is being built or not, used to avoid showing plots while testing.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/index",
        "href": "api/ansys/tools/visualization_interface/index.html#visualization_interface.USE_HTML_BACKEND",
        "title": "The ansys.tools.visualization_interface library > Module detail > USE_HTML_BACKEND",
        "section": "Module detail > USE_HTML_BACKEND",
        "text": "visualization_interface.USE_HTML_BACKEND: bool\n\nWhether the library is being built or not, used to avoid showing plots while testing.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/index",
        "href": "api/ansys/tools/visualization_interface/index.html#visualization_interface.__version__",
        "title": "The ansys.tools.visualization_interface library > Module detail > __version__",
        "section": "Module detail > __version__",
        "text": "visualization_interface.__version__\n\n"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection.html#camerapandirection",
        "title": "CameraPanDirection",
        "section": "CameraPanDirection",
        "text": "Bases: enum.Enum\nProvides an enum with the available movement directions of the camera.\nCameraPanDirection\nCameraPanDirection\nenum.Enum"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection.html#ansys.tools.visualization_interface.backends.pyvista.widgets.displace_arrows.CameraPanDirection",
        "title": "CameraPanDirection > CameraPanDirection > CameraPanDirection",
        "section": "CameraPanDirection > CameraPanDirection",
        "text": "class ansys.tools.visualization_interface.backends.pyvista.widgets.displace_arrows.CameraPanDirection\n\nBases: enum.Enum\n\nProvides an enum with the available movement directions of the camera.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection.html#overview",
        "title": "CameraPanDirection > Overview",
        "section": "Overview",
        "text": "XUP\nXDOWN\nYUP\nYDOWN\nZUP\nZDOWN\nOverview\nXUP\nXDOWN\nYUP\nYDOWN\nZUP\nZDOWN"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection.html#import-detail",
        "title": "CameraPanDirection > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection.html#attribute-detail",
        "title": "CameraPanDirection > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection.html#CameraPanDirection.XUP",
        "title": "CameraPanDirection > Attribute detail > XUP",
        "section": "Attribute detail > XUP",
        "text": "CameraPanDirection.XUP = (0, 'upxarrow.png', (5, 170))\n\n"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection.html#CameraPanDirection.XDOWN",
        "title": "CameraPanDirection > Attribute detail > XDOWN",
        "section": "Attribute detail > XDOWN",
        "text": "CameraPanDirection.XDOWN = (1, 'downarrow.png', (5, 130))\n\n"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection.html#CameraPanDirection.YUP",
        "title": "CameraPanDirection > Attribute detail > YUP",
        "section": "Attribute detail > YUP",
        "text": "CameraPanDirection.YUP = (2, 'upyarrow.png', (35, 170))\n\n"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection.html#CameraPanDirection.YDOWN",
        "title": "CameraPanDirection > Attribute detail > YDOWN",
        "section": "Attribute detail > YDOWN",
        "text": "CameraPanDirection.YDOWN = (3, 'downarrow.png', (35, 130))\n\n"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection.html#CameraPanDirection.ZUP",
        "title": "CameraPanDirection > Attribute detail > ZUP",
        "section": "Attribute detail > ZUP",
        "text": "CameraPanDirection.ZUP = (4, 'upzarrow.png', (65, 170))\n\n"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection.html#CameraPanDirection.ZDOWN",
        "title": "CameraPanDirection > Attribute detail > ZDOWN",
        "section": "Attribute detail > ZDOWN",
        "text": "CameraPanDirection.ZDOWN = (5, 'downarrow.png', (65, 130))\n\n"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#user-guide",
        "title": "User guide",
        "section": "User guide",
        "text": "This section explains key concepts for implementing the Visualization Interface Tool in your workflow.\nYou can use the Visualization Interface Tool in your examples as well as integrate this library into\nyour own code.\nUser guide"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#default-plotter-usage",
        "title": "User guide > Default plotter usage",
        "section": "Default plotter usage",
        "text": "The Visualization Interface Tool provides a default plotter that can be used out of the box, using the PyVista backend. This default\nplotter provides common functionalities so that you do not need to create a custom plotter.\nDefault plotter usage"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#use-with-pyvista-meshes",
        "title": "User guide > Use with PyVista meshes",
        "section": "Use with PyVista meshes",
        "text": "You can use the default plotter to plot simple PyVista meshes. This code shows how to\nuse it to visualize a simple PyVista mesh:\nUse with PyVista meshes"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#use-with-pyansys-custom-objects",
        "title": "User guide > Use with PyAnsys custom objects",
        "section": "Use with PyAnsys custom objects",
        "text": "You can also use the default plotter to visualize PyAnsys custom objects. The only requirement is that the\ncustom object must have a method that returns a PyVista mesh a method that exposes a name or\nid attribute of your object. To expose a custom object, you use a MeshObjectPlot instance. This class\nrelates PyVista meshes with any object.\nThe following code shows how to use the default plotter to visualize a PyAnsys custom object:\nUse with PyAnsys custom objects\nname\nid\nMeshObjectPlot"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#customize-your-own-plotter",
        "title": "User guide > Customize your own plotter",
        "section": "Customize your own plotter",
        "text": "The Visualization Interface Tool provides a base class, PlotterInterface, for customizing certain functions\nof the plotter. This class provides a set of methods that can be overridden so that you can adapt the\nplotter to the specific need of your PyAnsys library.\nThe first thing you must do is to create a class that inherits from the PlotterInterface\nclass. After that, see these main use cases for customizing the plotter:\nThe most common use case is to customize the way that the objects you represent are shown in the plotter.\nTo this end, you can override the plot and plot_iter methods. These methods are called every time\na new object is added to the plotter. The default implementation of this method is to add a PyVista mesh\nor a  MeshObjectPlot instance to the plotter. You can override this method to add your own meshes or\nobjects to the plotter in a manner that fits the way that you want to represent the meshes.\nAnother use case is the need to have custom button functionalities for your library. For example, you may\nwant buttons for hiding or showing certain objects. To add custom buttons to the plotter, you use the\nimplementable interface provided by the PlotterWidget class.\nSome practical examples of how to use the PlotterInterface class are included in some PyAnsys libraries,\nsuch as PyAnsys Geometry.\nCustomize your own plotter\nPlotterInterface\nPlotterInterface\nplot\nplot_iter\nMeshObjectPlot\nPlotterWidget\nPlotterInterface"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index.html#the-trame_localpy-module",
        "title": "The trame_local.py module",
        "section": "The trame_local.py module",
        "text": "The trame_local.py module\ntrame_local.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index.html#summary",
        "title": "The trame_local.py module > Summary",
        "section": "Summary",
        "text": "TrameVisualizer\nDefines the trame layout view.\nCLIENT_TYPE\nSummary\nTrameVisualizer\nCLIENT_TYPE"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index.html#description",
        "title": "The trame_local.py module > Description",
        "section": "Description",
        "text": "Provides trame visualizer interface for visualization.\nDescription"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index.html#module-detail",
        "title": "The trame_local.py module > Module detail",
        "section": "Module detail",
        "text": "Module detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index.html#trame_local.CLIENT_TYPE",
        "title": "The trame_local.py module > Module detail > CLIENT_TYPE",
        "section": "Module detail > CLIENT_TYPE",
        "text": "trame_local.CLIENT_TYPE = 'vue2'\n\n"
    },
    {
        "objectID": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data",
        "href": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#postprocessing-simulation-results-using-the-meshobjectplot-class",
        "title": "Postprocessing simulation results using the MeshObjectPlot class",
        "section": "Postprocessing simulation results using the MeshObjectPlot class",
        "text": "The Visualization Interface Tool provides the MeshObject helper class to relate a custom object.\nWith a custom object, you can take advantage of the full potential of the Visualization Interface Tool.\nThis example shows how to use the MeshObjectPlot class to plot your custom objects with scalar data on mesh.\nPostprocessing simulation results using the MeshObjectPlot class\nMeshObjectPlot\nMeshObject\nMeshObjectPlot"
    },
    {
        "objectID": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data",
        "href": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#necessary-imports",
        "title": "Postprocessing simulation results using the MeshObjectPlot class > Necessary imports",
        "section": "Necessary imports",
        "text": "Necessary imports"
    },
    {
        "objectID": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data",
        "href": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#download-the-vtk-file",
        "title": "Postprocessing simulation results using the MeshObjectPlot class > Download the VTK file",
        "section": "Download the VTK file",
        "text": "A VTK dataset can be produced utilizing PyDPF\nfor Ansys Flagship products simulations results file format.\nDownload the VTK file"
    },
    {
        "objectID": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data",
        "href": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#define-a-custom-object-class",
        "title": "Postprocessing simulation results using the MeshObjectPlot class > Define a custom object class",
        "section": "Define a custom object class",
        "text": "Note that the CustomObject class must have a way to get the mesh\nand a name or ID.\nDefine a custom object class\nCustomObject"
    },
    {
        "objectID": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data",
        "href": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#create-a-meshobjectplot-instance",
        "title": "Postprocessing simulation results using the MeshObjectPlot class > Create a MeshObjectPlot instance",
        "section": "Create a MeshObjectPlot instance",
        "text": "Create a MeshObjectPlot instance\nMeshObjectPlot"
    },
    {
        "objectID": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data",
        "href": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#get-the-available-field-data-arrays",
        "title": "Postprocessing simulation results using the MeshObjectPlot class > Get the available field data arrays",
        "section": "Get the available field data arrays",
        "text": "Get the available field data arrays"
    },
    {
        "objectID": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data",
        "href": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#plot-the-meshobjectplot-instance-with-mesh-object--field-data-0",
        "title": "Postprocessing simulation results using the MeshObjectPlot class > Plot the MeshObjectPlot instance with mesh object & field data (0)",
        "section": "Plot the MeshObjectPlot instance with mesh object & field data (0)",
        "text": "Plot the MeshObjectPlot instance with mesh object & field data (0)\nMeshObjectPlot"
    },
    {
        "objectID": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data",
        "href": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#plot-the-meshobjectplot-instance-with-mesh-object--other-field-data-1",
        "title": "Postprocessing simulation results using the MeshObjectPlot class > Plot the MeshObjectPlot instance with mesh object & other field data (1)",
        "section": "Plot the MeshObjectPlot instance with mesh object & other field data (1)",
        "text": "Total running time of the script: (0 minutes 6.819 seconds)\nDownload Jupyter notebook: using_meshobject_with_field_data.ipynb\nDownload Python source code: using_meshobject_with_field_data.py\nDownload zipped: using_meshobject_with_field_data.zip\nPlot the MeshObjectPlot instance with mesh object & other field data (1)\nMeshObjectPlot\nDownload Jupyter notebook: using_meshobject_with_field_data.ipynb\nDownload Python source code: using_meshobject_with_field_data.py\nDownload zipped: using_meshobject_with_field_data.zip"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/index",
        "href": "examples/00-basic-pyvista-examples/index.html#basic-usage-examples",
        "title": "Basic usage examples",
        "section": "Basic usage examples",
        "text": "These examples show how to use the general plotter included in the Visualization Interface Tool.\nsphx_glr_examples_00-basic-pyvista-examples_remote_trame_view.py\nsphx_glr_examples_00-basic-pyvista-examples_qt_backend.py\nsphx_glr_examples_00-basic-pyvista-examples_clipping_plane.py\nsphx_glr_examples_00-basic-pyvista-examples_using_meshobject.py\nsphx_glr_examples_00-basic-pyvista-examples_plain_usage.py\nsphx_glr_examples_00-basic-pyvista-examples_picker.py\nBasic usage examples"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/picker",
        "href": "examples/00-basic-pyvista-examples/picker.html#activate-the-picker",
        "title": "Activate the picker",
        "section": "Activate the picker",
        "text": "This example shows how to activate the picker, which is the tool that you\nuse to select an object in the plotter and get its name.\nActivate the picker"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/picker",
        "href": "examples/00-basic-pyvista-examples/picker.html#relate-customobject-class-with-a-pyvista-mesh",
        "title": "Activate the picker > Relate CustomObject class with a PyVista mesh",
        "section": "Relate CustomObject class with a PyVista mesh",
        "text": "Relate CustomObject class with a PyVista mesh\nCustomObject"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/picker",
        "href": "examples/00-basic-pyvista-examples/picker.html#create-two-meshobjectplot-instances",
        "title": "Activate the picker > Create two MeshObjectPlot instances",
        "section": "Create two MeshObjectPlot instances",
        "text": "Create two MeshObjectPlot instances\nMeshObjectPlot"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/picker",
        "href": "examples/00-basic-pyvista-examples/picker.html#activate-the-picking-capabilities",
        "title": "Activate the picker > Activate the picking capabilities",
        "section": "Activate the picking capabilities",
        "text": "Activate the picking capabilities"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/picker",
        "href": "examples/00-basic-pyvista-examples/picker.html#activate-the-hover-capabilities",
        "title": "Activate the picker > Activate the hover capabilities",
        "section": "Activate the hover capabilities",
        "text": "Activate the hover capabilities"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/picker",
        "href": "examples/00-basic-pyvista-examples/picker.html#using-structuredgrid-mesh",
        "title": "Activate the picker > Using StructuredGrid mesh",
        "section": "Using StructuredGrid mesh",
        "text": "Total running time of the script: (0 minutes 0.836 seconds)\nDownload Jupyter notebook: picker.ipynb\nDownload Python source code: picker.py\nDownload zipped: picker.zip\nUsing StructuredGrid mesh\nDownload Jupyter notebook: picker.ipynb\nDownload Python source code: picker.py\nDownload zipped: picker.zip"
    },
    {
        "objectID": "api/index",
        "href": "api/index.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "This section describes ansys-tools-visualization-interface endpoints, their capabilities, and how\nto interact with them programmatically.\nAPI reference"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget.html#plotterwidget",
        "title": "PlotterWidget",
        "section": "PlotterWidget",
        "text": "Bases: abc.ABC\nProvides an abstract class for plotter widgets.\nPlotter instance to add the widget to.\nThese widgets are intended to be used with PyVista plotter objects.\nMore specifically, the way in which this abstraction has been built\nensures that these widgets can be easily integrated with the Visualization Interface\nTool’s widgets.\nPlotterWidget\nPlotterWidget\nabc.ABC\nPlotter"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget.html#ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget",
        "title": "PlotterWidget > PlotterWidget > PlotterWidget",
        "section": "PlotterWidget > PlotterWidget",
        "text": "class ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget(plotter: pyvista.Plotter)\n\nBases: abc.ABC\n\nProvides an abstract class for plotter widgets.\n\nParameters\n\nplotter\n\nPlotter\n\nPlotter instance to add the widget to.\n\nNotes\n\nThese widgets are intended to be used with PyVista plotter objects.\nMore specifically, the way in which this abstraction has been built\nensures that these widgets can be easily integrated with the Visualization Interface\nTool’s widgets.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget.html#overview",
        "title": "PlotterWidget > Overview",
        "section": "Overview",
        "text": "callback\nGeneral callback function for PlotterWidget objects.\nupdate\nGeneral update function for PlotterWidget objects.\nplotter\nPlotter object that the widget is assigned to.\nOverview\ncallback\nPlotterWidget\nupdate\nPlotterWidget\nplotter"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget.html#import-detail",
        "title": "PlotterWidget > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget.html#property-detail",
        "title": "PlotterWidget > Property detail",
        "section": "Property detail",
        "text": "Plotter object that the widget is assigned to.\nProperty detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget.html#PlotterWidget.plotter",
        "title": "PlotterWidget > Property detail > plotter",
        "section": "Property detail > plotter",
        "text": "property PlotterWidget.plotter: pyvista.Plotter\n\nPlotter object that the widget is assigned to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget.html#method-detail",
        "title": "PlotterWidget > Method detail",
        "section": "Method detail",
        "text": "General callback function for PlotterWidget objects.\nGeneral update function for PlotterWidget objects.\nMethod detail\nPlotterWidget\nPlotterWidget"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget.html#PlotterWidget.callback",
        "title": "PlotterWidget > Method detail > callback",
        "section": "Method detail > callback",
        "text": "abstract PlotterWidget.callback(state) -> None\n\nGeneral callback function for PlotterWidget objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget.html#PlotterWidget.update",
        "title": "PlotterWidget > Method detail > update",
        "section": "Method detail > update",
        "text": "abstract PlotterWidget.update() -> None\n\nGeneral update function for PlotterWidget objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button.html#button",
        "title": "Button",
        "section": "Button",
        "text": "Bases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\nProvides the abstract class for implementing buttons in PyAnsys.\nPlotter to draw the buttons on.\nTuple containing the position and the path to the icon of the button.\nThis class wraps the PyVista add_checkbox_button_widget() method.\nButton\nButton\nansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\nPlotter\npython:tuple\nadd_checkbox_button_widget()"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button.html#ansys.tools.visualization_interface.backends.pyvista.widgets.button.Button",
        "title": "Button > Button > Button",
        "section": "Button > Button",
        "text": "class ansys.tools.visualization_interface.backends.pyvista.widgets.button.Button(plotter: pyvista.Plotter, button_config: tuple)\n\nBases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\n\nProvides the abstract class for implementing buttons in PyAnsys.\n\nParameters\n\nplotter\n\nPlotter\n\nPlotter to draw the buttons on.\n\nbutton_config\n\npython:tuple\n\nTuple containing the position and the path to the icon of the button.\n\nNotes\n\nThis class wraps the PyVista add_checkbox_button_widget() method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button.html#overview",
        "title": "Button > Overview",
        "section": "Overview",
        "text": "callback\nGet the functionality of the button, which is implemented by subclasses.\nupdate\nAssign the image that represents the button.\nbutton_config\nOverview\ncallback\nupdate\nbutton_config"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button.html#import-detail",
        "title": "Button > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button.html#attribute-detail",
        "title": "Button > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button.html#Button.button_config",
        "title": "Button > Attribute detail > button_config",
        "section": "Attribute detail > button_config",
        "text": "Button.button_config\n\n"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button.html#method-detail",
        "title": "Button > Method detail",
        "section": "Method detail",
        "text": "Get the functionality of the button, which is implemented by subclasses.\nWhether the button is active.\nAssign the image that represents the button.\nMethod detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button.html#Button.callback",
        "title": "Button > Method detail > callback",
        "section": "Method detail > callback",
        "text": "abstract Button.callback(state: bool) -> None\n\nGet the functionality of the button, which is implemented by subclasses.\n\nParameters\n\nstate\n\nbool\n\nWhether the button is active.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button.html#Button.update",
        "title": "Button > Method detail > update",
        "section": "Method detail > update",
        "text": "Button.update() -> None\n\nAssign the image that represents the button.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot",
        "href": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot.html#meshobjectplot",
        "title": "MeshObjectPlot",
        "section": "MeshObjectPlot",
        "text": "Relates a custom object with a mesh, provided by the consumer library.\nMeshObjectPlot\nMeshObjectPlot"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot",
        "href": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot.html#ansys.tools.visualization_interface.types.mesh_object_plot.MeshObjectPlot",
        "title": "MeshObjectPlot > MeshObjectPlot > MeshObjectPlot",
        "section": "MeshObjectPlot > MeshObjectPlot",
        "text": "class ansys.tools.visualization_interface.types.mesh_object_plot.MeshObjectPlot(custom_object: Any, mesh: pyvista.PolyData | pyvista.MultiBlock, actor: pyvista.Actor = None, edges: List[ansys.tools.visualization_interface.types.edge_plot.EdgePlot] = None)\n\nRelates a custom object with a mesh, provided by the consumer library.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot",
        "href": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot.html#overview",
        "title": "MeshObjectPlot > Overview",
        "section": "Overview",
        "text": "mesh\nMesh of the object in PyVista format.\ncustom_object\nCustom object.\nactor\nPyVista actor of the object in the plotter.\nedges\nEdges of the object.\nname\nName of the object.\nOverview\nmesh\ncustom_object\nactor\nedges\nname"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot",
        "href": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot.html#import-detail",
        "title": "MeshObjectPlot > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot",
        "href": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot.html#property-detail",
        "title": "MeshObjectPlot > Property detail",
        "section": "Property detail",
        "text": "Mesh of the object in PyVista format.\nMesh of the object.\nCustom object.\nCustom object.\nPyVista actor of the object in the plotter.\nPyVista actor of the object.\nEdges of the object.\nEdges of the object.\nName of the object.\nName of the object.\nProperty detail\nUnion\npv.PolyData\npv.MultiBlock\nAny\npv.Actor\nList\nEdgePlot\npython:str"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot",
        "href": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot.html#MeshObjectPlot.mesh",
        "title": "MeshObjectPlot > Property detail > mesh",
        "section": "Property detail > mesh",
        "text": "property MeshObjectPlot.mesh: pyvista.PolyData | pyvista.MultiBlock\n\nMesh of the object in PyVista format.\n\nReturns\n\nUnion[pv.PolyData, pv.MultiBlock]\n\nMesh of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot",
        "href": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot.html#MeshObjectPlot.custom_object",
        "title": "MeshObjectPlot > Property detail > custom_object",
        "section": "Property detail > custom_object",
        "text": "property MeshObjectPlot.custom_object: Any\n\nCustom object.\n\nReturns\n\nAny\n\nCustom object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot",
        "href": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot.html#MeshObjectPlot.actor",
        "title": "MeshObjectPlot > Property detail > actor",
        "section": "Property detail > actor",
        "text": "property MeshObjectPlot.actor: pyvista.Actor\n\nPyVista actor of the object in the plotter.\n\nReturns\n\npv.Actor\n\nPyVista actor of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot",
        "href": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot.html#MeshObjectPlot.edges",
        "title": "MeshObjectPlot > Property detail > edges",
        "section": "Property detail > edges",
        "text": "property MeshObjectPlot.edges: List[ansys.tools.visualization_interface.types.edge_plot.EdgePlot]\n\nEdges of the object.\n\nReturns\n\nList[EdgePlot]\n\nEdges of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot",
        "href": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot.html#MeshObjectPlot.name",
        "title": "MeshObjectPlot > Property detail > name",
        "section": "Property detail > name",
        "text": "property MeshObjectPlot.name: str\n\nName of the object.\n\nReturns\n\npython:str\n\nName of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/clipping_plane",
        "href": "examples/00-basic-pyvista-examples/clipping_plane.html#use-a-clipping-plane",
        "title": "Use a clipping plane",
        "section": "Use a clipping plane",
        "text": "This example shows how to use a clipping plane in the Visualization Interface Tool to cut a mesh.\nUse a clipping plane"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/clipping_plane",
        "href": "examples/00-basic-pyvista-examples/clipping_plane.html#create-a-plotter-and-clip-the-mesh",
        "title": "Use a clipping plane > Create a plotter and clip the mesh",
        "section": "Create a plotter and clip the mesh",
        "text": "Total running time of the script: (0 minutes 0.398 seconds)\nDownload Jupyter notebook: clipping_plane.ipynb\nDownload Python source code: clipping_plane.py\nDownload zipped: clipping_plane.zip\nCreate a plotter and clip the mesh\nDownload Jupyter notebook: clipping_plane.ipynb\nDownload Python source code: clipping_plane.py\nDownload zipped: clipping_plane.zip"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index.html#the-trame_remotepy-module",
        "title": "The trame_remote.py module",
        "section": "The trame_remote.py module",
        "text": "The trame_remote.py module\ntrame_remote.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index.html#summary",
        "title": "The trame_remote.py module > Summary",
        "section": "Summary",
        "text": "send_pl\nSend the plotter meshes to a remote trame service.\nsend_mesh\nSend a mesh to a remote trame service.\nSummary\nsend_pl\nsend_mesh"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index.html#description",
        "title": "The trame_remote.py module > Description",
        "section": "Description",
        "text": "Module for trame websocket client functions.\nDescription"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index.html#module-detail",
        "title": "The trame_remote.py module > Module detail",
        "section": "Module detail",
        "text": "Send the plotter meshes to a remote trame service.\nSince plotter can’t be pickled, we send the meshes list instead.\nPlotter to send.\nWebsocket host to connect to, by default “localhost”.\nWebsocket port to connect to, by default 8765.\nSend a mesh to a remote trame service.\nMesh to send.\nWebsocket host to connect to, by default “localhost”.\nWebsocket port to connect to, by default 8765.\nModule detail\npv.Plotter\npython:str\noptional\npython:int\noptional\nUnion\npv.PolyData\npv.MultiBlock\npython:str\noptional\npython:int\noptional"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index.html#trame_remote.send_pl",
        "title": "The trame_remote.py module > Module detail > send_pl",
        "section": "Module detail > send_pl",
        "text": "trame_remote.send_pl(plotter: pyvista.Plotter, host: str = 'localhost', port: int = 8765)\n\nSend the plotter meshes to a remote trame service.\n\nSince plotter can’t be pickled, we send the meshes list instead.\n\nParameters\n\nplotter\n\npv.Plotter\n\nPlotter to send.\n\nhost\n\npython:str, optional\n\nWebsocket host to connect to, by default “localhost”.\n\nport\n\npython:int, optional\n\nWebsocket port to connect to, by default 8765.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index.html#trame_remote.send_mesh",
        "title": "The trame_remote.py module > Module detail > send_mesh",
        "section": "Module detail > send_mesh",
        "text": "trame_remote.send_mesh(mesh: pyvista.PolyData | pyvista.MultiBlock, host: str = 'localhost', port: int = 8765)\n\nSend a mesh to a remote trame service.\n\nParameters\n\nmesh\n\nUnion[pv.PolyData, pv.MultiBlock]\n\nMesh to send.\n\nhost\n\npython:str, optional\n\nWebsocket host to connect to, by default “localhost”.\n\nport\n\npython:int, optional\n\nWebsocket port to connect to, by default 8765.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/01-advanced-pyansys-examples/sg_execution_times",
        "href": "examples/01-advanced-pyansys-examples/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:06.819 total execution time for 1 file from examples/01-advanced-pyansys-examples:\nExample\nTime\nMem (MB)\nsphx_glr_examples_01-advanced-pyansys-examples_using_meshobject_with_field_data.py (using_meshobject_with_field_data.py)\n00:06.819\n0.0\nComputation times\nusing_meshobject_with_field_data.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer.html#tramevisualizer",
        "title": "TrameVisualizer",
        "section": "TrameVisualizer",
        "text": "Defines the trame layout view.\nTrameVisualizer\nTrameVisualizer"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer.html#ansys.tools.visualization_interface.backends.pyvista.trame_local.TrameVisualizer",
        "title": "TrameVisualizer > TrameVisualizer > TrameVisualizer",
        "section": "TrameVisualizer > TrameVisualizer",
        "text": "class ansys.tools.visualization_interface.backends.pyvista.trame_local.TrameVisualizer\n\nDefines the trame layout view.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer.html#overview",
        "title": "TrameVisualizer > Overview",
        "section": "Overview",
        "text": "set_scene\nSet the trame layout view and the mesh to show through the PyVista plotter.\nshow\nStart the trame server and show the mesh.\nserver\nOverview\nset_scene\nshow\nserver"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer.html#import-detail",
        "title": "TrameVisualizer > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer.html#attribute-detail",
        "title": "TrameVisualizer > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer.html#TrameVisualizer.server",
        "title": "TrameVisualizer > Attribute detail > server",
        "section": "Attribute detail > server",
        "text": "TrameVisualizer.server\n\n"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer.html#method-detail",
        "title": "TrameVisualizer > Method detail",
        "section": "Method detail",
        "text": "Set the trame layout view and the mesh to show through the PyVista plotter.\nPyVista plotter with the rendered mesh.\nStart the trame server and show the mesh.\nMethod detail\nPlotter"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer.html#TrameVisualizer.set_scene",
        "title": "TrameVisualizer > Method detail > set_scene",
        "section": "Method detail > set_scene",
        "text": "TrameVisualizer.set_scene(plotter)\n\nSet the trame layout view and the mesh to show through the PyVista plotter.\n\nParameters\n\nplotter\n\nPlotter\n\nPyVista plotter with the rendered mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer.html#TrameVisualizer.show",
        "title": "TrameVisualizer > Method detail > show",
        "section": "Method detail > show",
        "text": "TrameVisualizer.show()\n\nStart the trame server and show the mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend.html#pyvistabackend",
        "title": "PyVistaBackend",
        "section": "PyVistaBackend",
        "text": "Bases: PyVistaBackendInterface\nProvides the generic plotter implementation for PyAnsys libraries.\nThis class accepts MeshObjectPlot, pv.MultiBlock and pv.PolyData objects.\nWhether to enable the use of trame.\nThe default is None, in which case the USE_TRAME global setting\nis used.\nWhether to allow picking capabilities in the window. Incompatible with hovering.\nPicking will take precedence over hovering.\nWhether to allow hovering capabilities in the window. Incompatible with picking.\nPicking will take precedence over hovering.\nWhether to plot the names of the picked objects.\nPyVistaBackend\nPyVistaBackend\nPyVistaBackendInterface\nMeshObjectPlot\npv.MultiBlock\npv.PolyData\npython:None\nNone\nUSE_TRAME\nOptional\npython:False\nOptional\npython:False\npython:True"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend.html#ansys.tools.visualization_interface.backends.pyvista.pyvista.PyVistaBackend",
        "title": "PyVistaBackend > PyVistaBackend > PyVistaBackend",
        "section": "PyVistaBackend > PyVistaBackend",
        "text": "class ansys.tools.visualization_interface.backends.pyvista.pyvista.PyVistaBackend(use_trame: bool | None = None, allow_picking: bool | None = False, allow_hovering: bool | None = False, plot_picked_names: bool | None = True, use_qt: bool | None = False)\n\nBases: PyVistaBackendInterface\n\nProvides the generic plotter implementation for PyAnsys libraries.\n\nThis class accepts MeshObjectPlot, pv.MultiBlock and pv.PolyData objects.\n\nParameters\n\nuse_trame\n\nbool, default: python:None\n\nWhether to enable the use of trame.\nThe default is None, in which case the USE_TRAME global setting\nis used.\n\nallow_picking\n\nOptional[bool], default: python:False\n\nWhether to allow picking capabilities in the window. Incompatible with hovering.\nPicking will take precedence over hovering.\n\nallow_hovering\n\nOptional[bool], default: python:False\n\nWhether to allow hovering capabilities in the window. Incompatible with picking.\nPicking will take precedence over hovering.\n\nplot_picked_names\n\nbool, default: python:True\n\nWhether to plot the names of the picked objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend.html#overview",
        "title": "PyVistaBackend > Overview",
        "section": "Overview",
        "text": "plot_iter\nPlot the elements of an iterable of any type of object to the scene.\nplot\nPlot a pyansys or PyVista object to the plotter.\nclose\nClose the plotter for PyVistaQT.\nOverview\nplot_iter\nplot\npyansys\nPyVista\nclose"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend.html#import-detail",
        "title": "PyVistaBackend > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend.html#method-detail",
        "title": "PyVistaBackend > Method detail",
        "section": "Method detail",
        "text": "Plot the elements of an iterable of any type of object to the scene.\nThe types of objects supported are Body, Component, List[pv.PolyData],\npv.MultiBlock, and Sketch.\nList of objects to plot.\nRegular expression with the desired name or names to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nPlot a pyansys or PyVista object to the plotter.\nObject to add.\nRegular expression with the desired name or names to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nClose the plotter for PyVistaQT.\nMethod detail\nBody\nComponent\nList[pv.PolyData]\npv.MultiBlock\nSketch\nList\nAny\npython:str\npython:None\npython:dict\npython:None\nPlotter.add_mesh\npyansys\nPyVista\nAny\npython:str\npython:dict\npython:None\nPlotter.add_mesh"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend.html#PyVistaBackend.plot_iter",
        "title": "PyVistaBackend > Method detail > plot_iter",
        "section": "Method detail > plot_iter",
        "text": "PyVistaBackend.plot_iter(plotting_list: List[Any], name_filter: str = None, **plotting_options) -> None\n\nPlot the elements of an iterable of any type of object to the scene.\n\nThe types of objects supported are Body, Component, List[pv.PolyData],\npv.MultiBlock, and Sketch.\n\nParameters\n\nplotting_list\n\nList[Any]\n\nList of objects to plot.\n\nname_filter\n\npython:str, default: python:None\n\nRegular expression with the desired name or names to include in the plotter.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend.html#PyVistaBackend.plot",
        "title": "PyVistaBackend > Method detail > plot",
        "section": "Method detail > plot",
        "text": "PyVistaBackend.plot(plottable_object: Any, name_filter: str = None, **plotting_options)\n\nPlot a pyansys or PyVista object to the plotter.\n\nParameters\n\nplottable_object\n\nAny\n\nObject to add.\n\nname_filter\n\npython:str\n\nRegular expression with the desired name or names to include in the plotter.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend.html#PyVistaBackend.close",
        "title": "PyVistaBackend > Method detail > close",
        "section": "Method detail > close",
        "text": "PyVistaBackend.close()\n\nClose the plotter for PyVistaQT.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow.html#displacementarrow",
        "title": "DisplacementArrow",
        "section": "DisplacementArrow",
        "text": "Bases: ansys.tools.visualization_interface.backends.pyvista.widgets.button.Button\nDefines the arrow to draw and what it is to do.\nPlotter to draw the buttons on.\nDirection that the camera is to move.\nDisplacementArrow\nDisplacementArrow\nansys.tools.visualization_interface.backends.pyvista.widgets.button.Button\nPlotter\nCameraPanDirection"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow.html#ansys.tools.visualization_interface.backends.pyvista.widgets.displace_arrows.DisplacementArrow",
        "title": "DisplacementArrow > DisplacementArrow > DisplacementArrow",
        "section": "DisplacementArrow > DisplacementArrow",
        "text": "class ansys.tools.visualization_interface.backends.pyvista.widgets.displace_arrows.DisplacementArrow(plotter: pyvista.Plotter, direction: CameraPanDirection)\n\nBases: ansys.tools.visualization_interface.backends.pyvista.widgets.button.Button\n\nDefines the arrow to draw and what it is to do.\n\nParameters\n\nplotter\n\nPlotter\n\nPlotter to draw the buttons on.\n\ndirection\n\nCameraPanDirection\n\nDirection that the camera is to move.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow.html#overview",
        "title": "DisplacementArrow > Overview",
        "section": "Overview",
        "text": "callback\nMove the camera in the direction defined by the button.\ndirection\nOverview\ncallback\ndirection"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow.html#import-detail",
        "title": "DisplacementArrow > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow.html#attribute-detail",
        "title": "DisplacementArrow > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow.html#DisplacementArrow.direction",
        "title": "DisplacementArrow > Attribute detail > direction",
        "section": "Attribute detail > direction",
        "text": "DisplacementArrow.direction\n\n"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow.html#method-detail",
        "title": "DisplacementArrow > Method detail",
        "section": "Method detail",
        "text": "Move the camera in the direction defined by the button.\nWhether the state of the button, which is inherited from PyVista, is active.\nHowever, this parameter is unused by this callback method.\nMethod detail\ncallback"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow.html#DisplacementArrow.callback",
        "title": "DisplacementArrow > Method detail > callback",
        "section": "Method detail > callback",
        "text": "DisplacementArrow.callback(state: bool) -> None\n\nMove the camera in the direction defined by the button.\n\nParameters\n\nstate\n\nbool\n\nWhether the state of the button, which is inherited from PyVista, is active.\nHowever, this parameter is unused by this callback method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/color/Color",
        "href": "api/ansys/tools/visualization_interface/utils/color/Color.html#color",
        "title": "Color",
        "section": "Color",
        "text": "Bases: enum.Enum\nProvides an enum with the color to use for the plotter actors.\nColor\nColor\nenum.Enum"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/color/Color",
        "href": "api/ansys/tools/visualization_interface/utils/color/Color.html#ansys.tools.visualization_interface.utils.color.Color",
        "title": "Color > Color > Color",
        "section": "Color > Color",
        "text": "class ansys.tools.visualization_interface.utils.color.Color\n\nBases: enum.Enum\n\nProvides an enum with the color to use for the plotter actors.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/color/Color",
        "href": "api/ansys/tools/visualization_interface/utils/color/Color.html#overview",
        "title": "Color > Overview",
        "section": "Overview",
        "text": "DEFAULT\nDefault color for the plotter actors.\nPICKED\nColor for the actors that are currently picked.\nEDGE\nDefault color for the edges.\nPICKED_EDGE\nColor for the edges that are currently picked.\nOverview\nDEFAULT\nPICKED\nEDGE\nPICKED_EDGE"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/color/Color",
        "href": "api/ansys/tools/visualization_interface/utils/color/Color.html#import-detail",
        "title": "Color > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/color/Color",
        "href": "api/ansys/tools/visualization_interface/utils/color/Color.html#attribute-detail",
        "title": "Color > Attribute detail",
        "section": "Attribute detail",
        "text": "Default color for the plotter actors.\nColor for the actors that are currently picked.\nDefault color for the edges.\nColor for the edges that are currently picked.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/color/Color",
        "href": "api/ansys/tools/visualization_interface/utils/color/Color.html#Color.DEFAULT",
        "title": "Color > Attribute detail > DEFAULT",
        "section": "Attribute detail > DEFAULT",
        "text": "Color.DEFAULT = '#D6F7D1'\n\nDefault color for the plotter actors.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/color/Color",
        "href": "api/ansys/tools/visualization_interface/utils/color/Color.html#Color.PICKED",
        "title": "Color > Attribute detail > PICKED",
        "section": "Attribute detail > PICKED",
        "text": "Color.PICKED = '#BB6EEE'\n\nColor for the actors that are currently picked.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/color/Color",
        "href": "api/ansys/tools/visualization_interface/utils/color/Color.html#Color.EDGE",
        "title": "Color > Attribute detail > EDGE",
        "section": "Attribute detail > EDGE",
        "text": "Color.EDGE = '#000000'\n\nDefault color for the edges.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/color/Color",
        "href": "api/ansys/tools/visualization_interface/utils/color/Color.html#Color.PICKED_EDGE",
        "title": "Color > Attribute detail > PICKED_EDGE",
        "section": "Attribute detail > PICKED_EDGE",
        "text": "Color.PICKED_EDGE = '#9C9C9C'\n\nColor for the edges that are currently picked.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot",
        "href": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot.html#edgeplot",
        "title": "EdgePlot",
        "section": "EdgePlot",
        "text": "Provides the mapper class for relating PyAnsys object edges with its PyVista actor.\nPyVista actor that represents the edge.\nPyAnsys object edge that is represented by the PyVista actor.\nParent PyAnsys object of the edge.\nEdgePlot\nEdgePlot\nActor\nEdge\nMeshObjectPlot\npython:None"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot",
        "href": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot.html#ansys.tools.visualization_interface.types.edge_plot.EdgePlot",
        "title": "EdgePlot > EdgePlot > EdgePlot",
        "section": "EdgePlot > EdgePlot",
        "text": "class ansys.tools.visualization_interface.types.edge_plot.EdgePlot(actor: pyvista.Actor, edge_object: Any, parent: Any = None)\n\nProvides the mapper class for relating PyAnsys object edges with its PyVista actor.\n\nParameters\n\nactor\n\nActor\n\nPyVista actor that represents the edge.\n\nedge_object\n\nEdge\n\nPyAnsys object edge that is represented by the PyVista actor.\n\nparent\n\nMeshObjectPlot, default: python:None\n\nParent PyAnsys object of the edge.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot",
        "href": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot.html#overview",
        "title": "EdgePlot > Overview",
        "section": "Overview",
        "text": "actor\nPyVista actor of the object.\nedge_object\nPyAnsys edge.\nparent\nParent PyAnsys object of the edge.\nname\nName of the edge.\nOverview\nactor\nedge_object\nparent\nname"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot",
        "href": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot.html#import-detail",
        "title": "EdgePlot > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot",
        "href": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot.html#property-detail",
        "title": "EdgePlot > Property detail",
        "section": "Property detail",
        "text": "PyVista actor of the object.\nPyVista actor.\nPyAnsys edge.\nPyAnsys edge.\nParent PyAnsys object of the edge.\nParent PyAnsys object.\nName of the edge.\nName of the edge.\nProperty detail\nActor\nAny\nAny\npython:str"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot",
        "href": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot.html#EdgePlot.actor",
        "title": "EdgePlot > Property detail > actor",
        "section": "Property detail > actor",
        "text": "property EdgePlot.actor: pyvista.Actor\n\nPyVista actor of the object.\n\nReturns\n\nActor\n\nPyVista actor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot",
        "href": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot.html#EdgePlot.edge_object",
        "title": "EdgePlot > Property detail > edge_object",
        "section": "Property detail > edge_object",
        "text": "property EdgePlot.edge_object: Any\n\nPyAnsys edge.\n\nReturns\n\nAny\n\nPyAnsys edge.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot",
        "href": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot.html#EdgePlot.parent",
        "title": "EdgePlot > Property detail > parent",
        "section": "Property detail > parent",
        "text": "property EdgePlot.parent: Any\n\nParent PyAnsys object of the edge.\n\nReturns\n\nAny\n\nParent PyAnsys object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot",
        "href": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot.html#EdgePlot.name",
        "title": "EdgePlot > Property detail > name",
        "section": "Property detail > name",
        "text": "property EdgePlot.name: str\n\nName of the edge.\n\nReturns\n\npython:str\n\nName of the edge.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/remote_trame_view",
        "href": "examples/00-basic-pyvista-examples/remote_trame_view.html#use-trame-as-a-remote-service",
        "title": "Use trame as a remote service",
        "section": "Use trame as a remote service",
        "text": "This example shows how to launch a trame service and use it as a remote service.\nFirst, we need to launch the trame service. We can do this by running the following code:\nNow, we can send meshes and plotter to the trame service. We can do this by running the following code in a separate terminal:\nTotal running time of the script: (0 minutes 0.000 seconds)\nDownload Jupyter notebook: remote_trame_view.ipynb\nDownload Python source code: remote_trame_view.py\nDownload zipped: remote_trame_view.zip\nUse trame as a remote service\nDownload Jupyter notebook: remote_trame_view.ipynb\nDownload Python source code: remote_trame_view.py\nDownload zipped: remote_trame_view.zip"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection.html#viewdirection",
        "title": "ViewDirection",
        "section": "ViewDirection",
        "text": "Bases: enum.Enum\nProvides an enum with the available views.\nViewDirection\nViewDirection\nenum.Enum"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection.html#ansys.tools.visualization_interface.backends.pyvista.widgets.view_button.ViewDirection",
        "title": "ViewDirection > ViewDirection > ViewDirection",
        "section": "ViewDirection > ViewDirection",
        "text": "class ansys.tools.visualization_interface.backends.pyvista.widgets.view_button.ViewDirection\n\nBases: enum.Enum\n\nProvides an enum with the available views.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection.html#overview",
        "title": "ViewDirection > Overview",
        "section": "Overview",
        "text": "XYPLUS\nXYMINUS\nXZPLUS\nXZMINUS\nYZPLUS\nYZMINUS\nISOMETRIC\nOverview\nXYPLUS\nXYMINUS\nXZPLUS\nXZMINUS\nYZPLUS\nYZMINUS\nISOMETRIC"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection.html#import-detail",
        "title": "ViewDirection > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection.html#attribute-detail",
        "title": "ViewDirection > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection.html#ViewDirection.XYPLUS",
        "title": "ViewDirection > Attribute detail > XYPLUS",
        "section": "Attribute detail > XYPLUS",
        "text": "ViewDirection.XYPLUS = (0, '+xy.png', (5, 220))\n\n"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection.html#ViewDirection.XYMINUS",
        "title": "ViewDirection > Attribute detail > XYMINUS",
        "section": "Attribute detail > XYMINUS",
        "text": "ViewDirection.XYMINUS = (1, '-xy.png', (5, 251))\n\n"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection.html#ViewDirection.XZPLUS",
        "title": "ViewDirection > Attribute detail > XZPLUS",
        "section": "Attribute detail > XZPLUS",
        "text": "ViewDirection.XZPLUS = (2, '+xz.png', (5, 282))\n\n"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection.html#ViewDirection.XZMINUS",
        "title": "ViewDirection > Attribute detail > XZMINUS",
        "section": "Attribute detail > XZMINUS",
        "text": "ViewDirection.XZMINUS = (3, '-xz.png', (5, 313))\n\n"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection.html#ViewDirection.YZPLUS",
        "title": "ViewDirection > Attribute detail > YZPLUS",
        "section": "Attribute detail > YZPLUS",
        "text": "ViewDirection.YZPLUS = (4, '+yz.png', (5, 344))\n\n"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection.html#ViewDirection.YZMINUS",
        "title": "ViewDirection > Attribute detail > YZMINUS",
        "section": "Attribute detail > YZMINUS",
        "text": "ViewDirection.YZMINUS = (5, '-yz.png', (5, 375))\n\n"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection.html#ViewDirection.ISOMETRIC",
        "title": "ViewDirection > Attribute detail > ISOMETRIC",
        "section": "Attribute detail > ISOMETRIC",
        "text": "ViewDirection.ISOMETRIC = (6, 'isometric.png', (5, 406))\n\n"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/edge_plot/index",
        "href": "api/ansys/tools/visualization_interface/types/edge_plot/index.html#the-edge_plotpy-module",
        "title": "The edge_plot.py module",
        "section": "The edge_plot.py module",
        "text": "The edge_plot.py module\nedge_plot.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/edge_plot/index",
        "href": "api/ansys/tools/visualization_interface/types/edge_plot/index.html#summary",
        "title": "The edge_plot.py module > Summary",
        "section": "Summary",
        "text": "EdgePlot\nProvides the mapper class for relating PyAnsys object edges with its PyVista actor.\nSummary\nEdgePlot"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/edge_plot/index",
        "href": "api/ansys/tools/visualization_interface/types/edge_plot/index.html#description",
        "title": "The edge_plot.py module > Description",
        "section": "Description",
        "text": "Provides the edge type for plotting.\nDescription"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/index.html#the-trame_servicepy-module",
        "title": "The trame_service.py module",
        "section": "The trame_service.py module",
        "text": "The trame_service.py module\ntrame_service.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/index.html#summary",
        "title": "The trame_service.py module > Summary",
        "section": "Summary",
        "text": "TrameService\nTrame service class.\nSummary\nTrameService"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/index.html#description",
        "title": "The trame_service.py module > Description",
        "section": "Description",
        "text": "Trame service module.\nDescription"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/index.html#the-measurepy-module",
        "title": "The measure.py module",
        "section": "The measure.py module",
        "text": "The measure.py module\nmeasure.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/index.html#summary",
        "title": "The measure.py module > Summary",
        "section": "Summary",
        "text": "MeasureWidget\nProvides the measure widget for the Visualization Interface Tool Plotter class.\nSummary\nMeasureWidget\nPlotter"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/index.html#description",
        "title": "The measure.py module > Description",
        "section": "Description",
        "text": "Provides the measure widget for the PyAnsys plotter.\nDescription"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#pyvistainterface",
        "title": "PyVistaInterface",
        "section": "PyVistaInterface",
        "text": "Provides the middle class between PyVista plotting operations and PyAnsys objects.\nThe main purpose of this class is to simplify interaction between PyVista and the PyVista backend\nprovided. This class is responsible for creating the PyVista scene and adding\nthe PyAnsys objects to it.\nScene for rendering the objects. If passed, off_screen needs to\nbe set manually beforehand for documentation and testing.\nDictionary containing the background and top colors.\nNumber of points to use to render the shapes.\nWhether to enable widget buttons in the plotter window.\nWidget buttons must be disabled when using\ntrame\nfor visualization.\nWhether to show the XY plane in the plotter window.\nWhether to use the Qt backend for the plotter window.\nPyVistaInterface\nPyVistaInterface\nPlotter\npython:None\noff_screen\npython:dict\npython:None\npython:int\npython:True\npython:False\npython:False"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#ansys.tools.visualization_interface.backends.pyvista.pyvista_interface.PyVistaInterface",
        "title": "PyVistaInterface > PyVistaInterface > PyVistaInterface",
        "section": "PyVistaInterface > PyVistaInterface",
        "text": "class ansys.tools.visualization_interface.backends.pyvista.pyvista_interface.PyVistaInterface(scene: pyvista.Plotter | None = None, color_opts: Dict | None = None, num_points: int = 100, enable_widgets: bool = True, show_plane: bool = False, use_qt: bool = False, **plotter_kwargs)\n\nProvides the middle class between PyVista plotting operations and PyAnsys objects.\n\nThe main purpose of this class is to simplify interaction between PyVista and the PyVista backend\nprovided. This class is responsible for creating the PyVista scene and adding\nthe PyAnsys objects to it.\n\nParameters\n\nscene\n\nPlotter, default: python:None\n\nScene for rendering the objects. If passed, off_screen needs to\nbe set manually beforehand for documentation and testing.\n\ncolor_opts\n\npython:dict, default: python:None\n\nDictionary containing the background and top colors.\n\nnum_points\n\npython:int, default: 100\n\nNumber of points to use to render the shapes.\n\nenable_widgets\n\nbool, default: python:True\n\nWhether to enable widget buttons in the plotter window.\nWidget buttons must be disabled when using\ntrame\nfor visualization.\n\nshow_plane\n\nbool, default: python:False\n\nWhether to show the XY plane in the plotter window.\n\nuse_qt\n\nbool, default: python:False\n\nWhether to use the Qt backend for the plotter window.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#overview",
        "title": "PyVistaInterface > Overview",
        "section": "Overview",
        "text": "view_xy\nView the scene from the XY plane.\nview_xz\nView the scene from the XZ plane.\nview_yx\nView the scene from the YX plane.\nview_yz\nView the scene from the YZ plane.\nview_zx\nView the scene from the ZX plane.\nview_zy\nView the scene from the ZY plane.\nclip\nClip a given mesh with a plane.\nplot_meshobject\nPlot a generic MeshObjectPlot object to the scene.\nplot_edges\nPlot the outer edges of an object to the plot.\nplot\nPlot any type of object to the scene.\nplot_iter\nPlot elements of an iterable of any type of objects to the scene.\nshow\nShow the rendered scene on the screen.\nset_add_mesh_defaults\nSet the default values for the plotting options.\nscene\nRendered scene object.\nobject_to_actors_map\nMapping between the PyVista actor and the PyAnsys objects.\nOverview\nview_xy\nview_xz\nview_yx\nview_yz\nview_zx\nview_zy\nclip\nplot_meshobject\nMeshObjectPlot\nplot_edges\nplot\nplot_iter\nshow\nset_add_mesh_defaults\nscene\nobject_to_actors_map"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#import-detail",
        "title": "PyVistaInterface > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#property-detail",
        "title": "PyVistaInterface > Property detail",
        "section": "Property detail",
        "text": "Rendered scene object.\nRendered scene object.\nMapping between the PyVista actor and the PyAnsys objects.\nProperty detail\nPlotter"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#PyVistaInterface.scene",
        "title": "PyVistaInterface > Property detail > scene",
        "section": "Property detail > scene",
        "text": "property PyVistaInterface.scene: pyvista.plotting.plotter.Plotter\n\nRendered scene object.\n\nReturns\n\nPlotter\n\nRendered scene object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#PyVistaInterface.object_to_actors_map",
        "title": "PyVistaInterface > Property detail > object_to_actors_map",
        "section": "Property detail > object_to_actors_map",
        "text": "property PyVistaInterface.object_to_actors_map: Dict[pyvista.Actor, ansys.tools.visualization_interface.types.mesh_object_plot.MeshObjectPlot]\n\nMapping between the PyVista actor and the PyAnsys objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#method-detail",
        "title": "PyVistaInterface > Method detail",
        "section": "Method detail",
        "text": "View the scene from the XY plane.\nView the scene from the XZ plane.\nView the scene from the YX plane.\nView the scene from the YZ plane.\nView the scene from the ZX plane.\nView the scene from the ZY plane.\nClip a given mesh with a plane.\nMesh.\nPlane to use for clipping. Options are \"x\", \"-x\",\n\"y\", \"-y\", \"z\", and \"-z\".\nOrigin point of the plane.\nClipping plane to cut the mesh with.\nClipped mesh.\nPlot a generic MeshObjectPlot object to the scene.\nObject to add to the scene.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nPlot the outer edges of an object to the plot.\nThis method has the side effect of adding the edges to the MeshObjectPlot\nobject that you pass through the parameters.\nCustom object with the edges to add.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nPlot any type of object to the scene.\nSupported object types are List[pv.PolyData], MeshObjectPlot,\nand pv.MultiBlock.\nObject to plot.\nRegular expression with the desired name or names to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nPlot elements of an iterable of any type of objects to the scene.\nList of objects to plot.\nRegular expression with the desired name or names to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nShow the rendered scene on the screen.\nWhether to show the XY plane.\nPyVista Jupyter backend.\nPlotting keyword arguments. For allowable keyword arguments, see the\nPlotter.show method.\nFor more information on supported Jupyter backends, see\nJupyter Notebook Plotting\nin the PyVista documentation.\nSet the default values for the plotting options.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nMethod detail\nUnion\npv.PolyData\npv.MultiBlock\npython:str\n\"x\"\n\"-x\"\n\"y\"\n\"-y\"\n\"z\"\n\"-z\"\npython:tuple\npython:None\nClipPlane\npython:None\nUnion\nMeshObjectPlot\nMeshObjectPlot\npython:dict\npython:None\nPlotter.add_mesh\nMeshObjectPlot\nMeshObjectPlot\npython:dict\npython:None\nPlotter.add_mesh\nList[pv.PolyData]\nMeshObjectPlot\npv.MultiBlock\nUnion\npv.PolyData\npv.MultiBlock\nMeshObjectPlot\npv.UnstructuredGrid\npv.StructuredGrid\npython:str\npython:None\npython:dict\npython:None\nPlotter.add_mesh\nList\nAny\npython:str\npython:None\npython:dict\npython:None\nPlotter.add_mesh\npython:True\npython:str\npython:None\npython:dict\npython:None\nPlotter.show\nOptional\nDict\nPlotter.add_mesh"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#PyVistaInterface.view_xy",
        "title": "PyVistaInterface > Method detail > view_xy",
        "section": "Method detail > view_xy",
        "text": "PyVistaInterface.view_xy() -> None\n\nView the scene from the XY plane.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#PyVistaInterface.view_xz",
        "title": "PyVistaInterface > Method detail > view_xz",
        "section": "Method detail > view_xz",
        "text": "PyVistaInterface.view_xz() -> None\n\nView the scene from the XZ plane.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#PyVistaInterface.view_yx",
        "title": "PyVistaInterface > Method detail > view_yx",
        "section": "Method detail > view_yx",
        "text": "PyVistaInterface.view_yx() -> None\n\nView the scene from the YX plane.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#PyVistaInterface.view_yz",
        "title": "PyVistaInterface > Method detail > view_yz",
        "section": "Method detail > view_yz",
        "text": "PyVistaInterface.view_yz() -> None\n\nView the scene from the YZ plane.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#PyVistaInterface.view_zx",
        "title": "PyVistaInterface > Method detail > view_zx",
        "section": "Method detail > view_zx",
        "text": "PyVistaInterface.view_zx() -> None\n\nView the scene from the ZX plane.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#PyVistaInterface.view_zy",
        "title": "PyVistaInterface > Method detail > view_zy",
        "section": "Method detail > view_zy",
        "text": "PyVistaInterface.view_zy() -> None\n\nView the scene from the ZY plane.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#PyVistaInterface.clip",
        "title": "PyVistaInterface > Method detail > clip",
        "section": "Method detail > clip",
        "text": "PyVistaInterface.clip(mesh: pyvista.PolyData | pyvista.MultiBlock | pyvista.UnstructuredGrid, plane: ansys.tools.visualization_interface.utils.clip_plane.ClipPlane) -> pyvista.PolyData | pyvista.MultiBlock\n\nClip a given mesh with a plane.\n\nParameters\n\nmesh\n\nUnion[pv.PolyData, pv.MultiBlock]\n\nMesh.\n\nnormal\n\npython:str, default: “x”\n\nPlane to use for clipping. Options are \"x\", \"-x\",\n\"y\", \"-y\", \"z\", and \"-z\".\n\norigin\n\npython:tuple, default: python:None\n\nOrigin point of the plane.\n\nplane\n\nClipPlane, default: python:None\n\nClipping plane to cut the mesh with.\n\nReturns\n\nUnion[pv.PolyData,pv.MultiBlock]\n\nClipped mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#PyVistaInterface.plot_meshobject",
        "title": "PyVistaInterface > Method detail > plot_meshobject",
        "section": "Method detail > plot_meshobject",
        "text": "PyVistaInterface.plot_meshobject(custom_object: ansys.tools.visualization_interface.types.mesh_object_plot.MeshObjectPlot, **plotting_options)\n\nPlot a generic MeshObjectPlot object to the scene.\n\nParameters\n\nplottable_object\n\nMeshObjectPlot\n\nObject to add to the scene.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#PyVistaInterface.plot_edges",
        "title": "PyVistaInterface > Method detail > plot_edges",
        "section": "Method detail > plot_edges",
        "text": "PyVistaInterface.plot_edges(custom_object: ansys.tools.visualization_interface.types.mesh_object_plot.MeshObjectPlot, **plotting_options) -> None\n\nPlot the outer edges of an object to the plot.\n\nThis method has the side effect of adding the edges to the MeshObjectPlot\nobject that you pass through the parameters.\n\nParameters\n\ncustom_object\n\nMeshObjectPlot\n\nCustom object with the edges to add.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#PyVistaInterface.plot",
        "title": "PyVistaInterface > Method detail > plot",
        "section": "Method detail > plot",
        "text": "PyVistaInterface.plot(plottable_object: pyvista.PolyData | pyvista.MultiBlock | ansys.tools.visualization_interface.types.mesh_object_plot.MeshObjectPlot | pyvista.UnstructuredGrid, name_filter: str = None, **plotting_options) -> None\n\nPlot any type of object to the scene.\n\nSupported object types are List[pv.PolyData], MeshObjectPlot,\nand pv.MultiBlock.\n\nParameters\n\nplottable_object\n\nUnion[pv.PolyData, pv.MultiBlock, MeshObjectPlot, pv.UnstructuredGrid, pv.StructuredGrid]\n\nObject to plot.\n\nname_filter\n\npython:str, default: python:None\n\nRegular expression with the desired name or names to include in the plotter.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#PyVistaInterface.plot_iter",
        "title": "PyVistaInterface > Method detail > plot_iter",
        "section": "Method detail > plot_iter",
        "text": "PyVistaInterface.plot_iter(plotting_list: List[Any], name_filter: str = None, **plotting_options) -> None\n\nPlot elements of an iterable of any type of objects to the scene.\n\nParameters\n\nplotting_list\n\nList[Any]\n\nList of objects to plot.\n\nname_filter\n\npython:str, default: python:None\n\nRegular expression with the desired name or names to include in the plotter.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#PyVistaInterface.show",
        "title": "PyVistaInterface > Method detail > show",
        "section": "Method detail > show",
        "text": "PyVistaInterface.show(show_plane: bool = False, jupyter_backend: str | None = None, **kwargs: Dict | None) -> None\n\nShow the rendered scene on the screen.\n\nParameters\n\nshow_plane\n\nbool, default: python:True\n\nWhether to show the XY plane.\n\njupyter_backend\n\npython:str, default: python:None\n\nPyVista Jupyter backend.\n\n**kwargs\n\npython:dict, default: python:None\n\nPlotting keyword arguments. For allowable keyword arguments, see the\nPlotter.show method.\n\nNotes\n\nFor more information on supported Jupyter backends, see\nJupyter Notebook Plotting\nin the PyVista documentation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#PyVistaInterface.set_add_mesh_defaults",
        "title": "PyVistaInterface > Method detail > set_add_mesh_defaults",
        "section": "Method detail > set_add_mesh_defaults",
        "text": "PyVistaInterface.set_add_mesh_defaults(plotting_options: Dict | None) -> None\n\nSet the default values for the plotting options.\n\nParameters\n\nplotting_options\n\nOptional[Dict]\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/sg_execution_times",
        "href": "examples/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 0 files from examples:\nExample\nTime\nMem (MB)\nN/A\nN/A\nN/A\nComputation times"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/index.html#the-rulerpy-module",
        "title": "The ruler.py module",
        "section": "The ruler.py module",
        "text": "The ruler.py module\nruler.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/index.html#summary",
        "title": "The ruler.py module > Summary",
        "section": "Summary",
        "text": "Ruler\nProvides the ruler widget for the Visualization Interface Tool Plotter class.\nSummary\nRuler\nPlotter"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/index.html#description",
        "title": "The ruler.py module > Description",
        "section": "Description",
        "text": "Provides the ruler widget for the Visualization Interface Tool plotter.\nDescription"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/index.html#the-buttonpy-module",
        "title": "The button.py module",
        "section": "The button.py module",
        "text": "The button.py module\nbutton.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/index.html#summary",
        "title": "The button.py module > Summary",
        "section": "Summary",
        "text": "Button\nProvides the abstract class for implementing buttons in PyAnsys.\nSummary\nButton"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/index.html#description",
        "title": "The button.py module > Description",
        "section": "Description",
        "text": "Provides for implementing buttons in PyAnsys.\nDescription"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "This section describes how to install the Visualization Interface Tool in user mode and\nquickly begin using it. If you are interested in contributing to the Visualization Interface Tool,\nsee contribute for information on installing in developer mode.\nGetting started"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#installation",
        "title": "Getting started > Installation",
        "section": "Installation",
        "text": "To use pip to install the Visualization Interface Tool,\nrun this command:\nAlternatively, to install the latest version from this library’s\nGitHub repository,\nrun these commands:\nInstallation"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#quick-start",
        "title": "Getting started > Quick start",
        "section": "Quick start",
        "text": "The following examples show how to use the Visualization Interface Tool to visualize a mesh file.\nThis code uses only a PyVista mesh:\nThis code uses objects from a PyAnsys library:\nQuick start"
    }
]