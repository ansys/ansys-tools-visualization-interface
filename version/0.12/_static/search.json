[{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler.html#ruler","title":"Ruler","text":"Ruler\n\n\n\nclass ansys.tools.visualization_interface.backends.pyvista.widgets.ruler.Ruler(plotter: pyvista.Plotter, dark_mode: bool = False)\n\nBases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\n\nProvides the ruler widget for the Visualization Interface Tool Plotter class.\n\nParameters\n\nplotter\n\nPlotter\n\nProvides the plotter to add the ruler widget to.\n\ndark_mode\n\nbool, optional\n\nWhether to activate the dark mode or not."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler.html#overview","title":"Ruler > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncallback\n\nRemove or add the ruler widget actor upon click.\n\nupdate\n\nDefine the configuration and representation of the ruler widget button."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler.html#import-detail","title":"Ruler > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler.html#method-detail","title":"Ruler > Method detail","text":"Method detail\n\n\n\nRuler.callback(state: bool) -> None\n\nRemove or add the ruler widget actor upon click.\n\nParameters\n\nstate\n\nbool\n\nWhether the state of the button, which is inherited from PyVista, is True.\n\nNotes\n\nThis method provides a callback function for the ruler widet.\nIt is called every time the ruler widget is clicked.\n\n\n\nRuler.update() -> None\n\nDefine the configuration and representation of the ruler widget button."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend.html#pyvistabackend","title":"PyVistaBackend","text":"PyVistaBackend\n\n\n\nclass ansys.tools.visualization_interface.backends.pyvista.pyvista.PyVistaBackend(use_trame: bool | None = None, allow_picking: bool | None = False, allow_hovering: bool | None = False, plot_picked_names: bool | None = True, use_qt: bool | None = False, show_qt: bool | None = False, custom_picker: ansys.tools.visualization_interface.backends.pyvista.picker.AbstractPicker = None)\n\nBases: PyVistaBackendInterface\n\nProvides the generic plotter implementation for PyAnsys libraries.\n\nThis class accepts MeshObjectPlot, pv.MultiBlock and pv.PolyData objects.\n\nParameters\n\nuse_trame\n\nbool, default: python:None\n\nWhether to enable the use of trame.\nThe default is None, in which case the USE_TRAME global setting\nis used.\n\nallow_picking\n\nOptional[bool], default: python:False\n\nWhether to allow picking capabilities in the window. Incompatible with hovering.\nPicking will take precedence over hovering.\n\nallow_hovering\n\nOptional[bool], default: python:False\n\nWhether to allow hovering capabilities in the window. Incompatible with picking.\nPicking will take precedence over hovering.\n\nplot_picked_names\n\nbool, default: python:True\n\nWhether to plot the names of the picked objects."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend.html#overview","title":"PyVistaBackend > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nplot_iter\n\nPlot the elements of an iterable of any type of object to the scene.\n\nplot\n\nPlot a pyansys or PyVista object to the plotter.\n\nclose\n\nClose the plotter for PyVistaQT.\n\nProperties\n\n\n\n\n\nbase_plotter\n\nReturn the base plotter object."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend.html#import-detail","title":"PyVistaBackend > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend.html#property-detail","title":"PyVistaBackend > Property detail","text":"Property detail\n\n\n\nproperty PyVistaBackend.base_plotter\n\nReturn the base plotter object."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend.html#method-detail","title":"PyVistaBackend > Method detail","text":"Method detail\n\n\n\nPyVistaBackend.plot_iter(plotting_list: List[Any], name_filter: str = None, **plotting_options) -> None\n\nPlot the elements of an iterable of any type of object to the scene.\n\nThe types of objects supported are Body, Component, List[pv.PolyData],\npv.MultiBlock, and Sketch.\n\nParameters\n\nplotting_list\n\nList[Any]\n\nList of objects to plot.\n\nname_filter\n\npython:str, default: python:None\n\nRegular expression with the desired name or names to include in the plotter.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n\n\nPyVistaBackend.plot(plottable_object: Any, name_filter: str = None, **plotting_options)\n\nPlot a pyansys or PyVista object to the plotter.\n\nParameters\n\nplottable_object\n\nAny\n\nObject to add.\n\nname_filter\n\npython:str\n\nRegular expression with the desired name or names to include in the plotter.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n\n\nPyVistaBackend.close()\n\nClose the plotter for PyVistaQT."},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/plain_usage.html#use-the-plotter","title":"Use the plotter","text":"Use the plotter\n\nThis example shows how to add one or more meshes to the plotter."},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/plain_usage.html#add-a-mesh-to-the-plotter","title":"Use the plotter > Add a mesh to the plotter","text":"Add a mesh to the plotter\n\nThis code shows how to add a single mesh to the plotter.\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/plain_usage.html#getting-a-screenshot","title":"Use the plotter > Getting a screenshot","text":"Getting a screenshot\n\nNow we will check how to get a screenshot from our plotter.\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/plain_usage.html#add-a-list-of-meshes","title":"Use the plotter > Add a list of meshes","text":"Add a list of meshes\n\nThis code shows how to add a list of meshes to the plotter.\n\nStatic Scene\n\n\n\nInteractive Scene\n\n\n\nTotal running time of the script: (0 minutes 0.976 seconds)\n\n\n\nDownload Jupyter notebook: plain_usage.ipynb\n\nDownload Python source code: plain_usage.py\n\nDownload zipped: plain_usage.zip"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget.html#plotterwidget","title":"PlotterWidget","text":"PlotterWidget\n\n\n\nclass ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget(plotter: pyvista.Plotter)\n\nBases: abc.ABC\n\nProvides an abstract class for plotter widgets.\n\nParameters\n\nplotter\n\nPlotter\n\nPlotter instance to add the widget to.\n\nNotes\n\nThese widgets are intended to be used with PyVista plotter objects.\nMore specifically, the way in which this abstraction has been built\nensures that these widgets can be easily integrated with the Visualization Interface\nTool’s widgets."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget.html#overview","title":"PlotterWidget > Overview","text":"Overview\n\nAbstract methods\n\n\n\n\n\ncallback\n\nGeneral callback function for PlotterWidget objects.\n\nupdate\n\nGeneral update function for PlotterWidget objects.\n\nProperties\n\n\n\n\n\nplotter\n\nPlotter object that the widget is assigned to."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget.html#import-detail","title":"PlotterWidget > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget.html#property-detail","title":"PlotterWidget > Property detail","text":"Property detail\n\n\n\nproperty PlotterWidget.plotter: pyvista.Plotter\n\nPlotter object that the widget is assigned to."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget.html#method-detail","title":"PlotterWidget > Method detail","text":"Method detail\n\n\n\nabstractmethod PlotterWidget.callback(state) -> None\n\nGeneral callback function for PlotterWidget objects.\n\n\n\nabstractmethod PlotterWidget.update() -> None\n\nGeneral update function for PlotterWidget objects."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot.html#meshobjectplot","title":"MeshObjectPlot","text":"MeshObjectPlot\n\n\n\nclass ansys.tools.visualization_interface.types.mesh_object_plot.MeshObjectPlot(custom_object: Any, mesh: pyvista.PolyData | pyvista.MultiBlock, actor: pyvista.Actor = None, edges: List[ansys.tools.visualization_interface.types.edge_plot.EdgePlot] = None)\n\nRelates a custom object with a mesh, provided by the consumer library."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot.html#overview","title":"MeshObjectPlot > Overview","text":"Overview\n\nProperties\n\n\n\n\n\nmesh\n\nMesh of the object in PyVista format.\n\ncustom_object\n\nCustom object.\n\nactor\n\nPyVista actor of the object in the plotter.\n\nedges\n\nEdges of the object.\n\nname\n\nName of the object."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot.html#import-detail","title":"MeshObjectPlot > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot.html#property-detail","title":"MeshObjectPlot > Property detail","text":"Property detail\n\n\n\nproperty MeshObjectPlot.mesh: pyvista.PolyData | pyvista.MultiBlock\n\nMesh of the object in PyVista format.\n\nReturns\n\nUnion[pv.PolyData, pv.MultiBlock]\n\nMesh of the object.\n\n\n\nproperty MeshObjectPlot.custom_object: Any\n\nCustom object.\n\nReturns\n\nAny\n\nCustom object.\n\n\n\nproperty MeshObjectPlot.actor: pyvista.Actor\n\nPyVista actor of the object in the plotter.\n\nReturns\n\npv.Actor\n\nPyVista actor of the object.\n\n\n\nproperty MeshObjectPlot.edges: List[ansys.tools.visualization_interface.types.edge_plot.EdgePlot]\n\nEdges of the object.\n\nReturns\n\nList[EdgePlot]\n\nEdges of the object.\n\n\n\nproperty MeshObjectPlot.name: str\n\nName of the object.\n\nReturns\n\npython:str\n\nName of the object."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/index.html#the-ansystoolsvisualization_interface-library","title":"The ansys.tools.visualization_interface library","text":"The ansys.tools.visualization_interface library\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/index.html#summary","title":"The ansys.tools.visualization_interface library > Summary","text":"Summary\n\nSubpackages\n\n\n\n\n\nbackends\n\nProvides interfaces.\n\ntypes\n\nProvides custom types.\n\nutils\n\nProvides the Utils package.\n\nSubmodules\n\n\n\n\n\nplotter\n\nModule for the Plotter class.\n\nAttributes\n\n\n\n\n\n__version__\n\n\n\nConstants\n\n\n\n\n\nUSE_TRAME\n\n\n\nDOCUMENTATION_BUILD\n\nWhether the documentation is being built or not.\n\nTESTING_MODE\n\nWhether the library is being built or not, used to avoid showing plots while testing.\n\nUSE_HTML_BACKEND\n\nWhether the library is being built or not, used to avoid showing plots while testing.\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/index.html#description","title":"The ansys.tools.visualization_interface library > Description","text":"Description\n\nVisualization Interface Tool is a Python client library for visualizing the results of Ansys simulations."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/index.html#module-detail","title":"The ansys.tools.visualization_interface library > Module detail","text":"Module detail\n\n\n\nvisualization_interface.USE_TRAME: bool = False\n\n\n\n\n\nvisualization_interface.DOCUMENTATION_BUILD: bool\n\nWhether the documentation is being built or not.\n\n\n\nvisualization_interface.TESTING_MODE: bool\n\nWhether the library is being built or not, used to avoid showing plots while testing.\n\n\n\nvisualization_interface.USE_HTML_BACKEND: bool\n\nWhether the library is being built or not, used to avoid showing plots while testing.\n\n\n\nvisualization_interface.__version__\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index.html#the-trame_remotepy-module","title":"The trame_remote.py module","text":"The trame_remote.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index.html#summary","title":"The trame_remote.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nsend_pl\n\nSend the plotter meshes to a remote trame service.\n\nsend_mesh\n\nSend a mesh to a remote trame service."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index.html#description","title":"The trame_remote.py module > Description","text":"Description\n\nModule for trame websocket client functions."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index.html#module-detail","title":"The trame_remote.py module > Module detail","text":"Module detail\n\n\n\ntrame_remote.send_pl(plotter: pyvista.Plotter, host: str = 'localhost', port: int = 8765)\n\nSend the plotter meshes to a remote trame service.\n\nSince plotter can’t be pickled, we send the meshes list instead.\n\nParameters\n\nplotter\n\npv.Plotter\n\nPlotter to send.\n\nhost\n\npython:str, optional\n\nWebsocket host to connect to, by default “localhost”.\n\nport\n\npython:int, optional\n\nWebsocket port to connect to, by default 8765.\n\n\n\ntrame_remote.send_mesh(mesh: pyvista.PolyData | pyvista.MultiBlock, host: str = 'localhost', port: int = 8765)\n\nSend a mesh to a remote trame service.\n\nParameters\n\nmesh\n\nUnion[pv.PolyData, pv.MultiBlock]\n\nMesh to send.\n\nhost\n\npython:str, optional\n\nWebsocket host to connect to, by default “localhost”.\n\nport\n\npython:int, optional\n\nWebsocket port to connect to, by default 8765."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/index.html#the-displace_arrowspy-module","title":"The displace_arrows.py module","text":"The displace_arrows.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/index.html#summary","title":"The displace_arrows.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nDisplacementArrow\n\nDefines the arrow to draw and what it is to do.\n\nEnums\n\n\n\n\n\nCameraPanDirection\n\nProvides an enum with the available movement directions of the camera.\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/index.html#description","title":"The displace_arrows.py module > Description","text":"Description\n\nProvides the displacement arrows widget for the PyVista plotter."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/index.html#the-rulerpy-module","title":"The ruler.py module","text":"The ruler.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/index.html#summary","title":"The ruler.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nRuler\n\nProvides the ruler widget for the Visualization Interface Tool Plotter class.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/index.html#description","title":"The ruler.py module > Description","text":"Description\n\nProvides the ruler widget for the Visualization Interface Tool plotter."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/index.html#the-widgetpy-module","title":"The widget.py module","text":"The widget.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/index.html#summary","title":"The widget.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nPlotterWidget\n\nProvides an abstract class for plotter widgets.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/index.html#description","title":"The widget.py module > Description","text":"Description\n\nProvides the abstract implementation of plotter widgets."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow.html#displacementarrow","title":"DisplacementArrow","text":"DisplacementArrow\n\n\n\nclass ansys.tools.visualization_interface.backends.pyvista.widgets.displace_arrows.DisplacementArrow(plotter: pyvista.Plotter, direction: CameraPanDirection, dark_mode: bool = False)\n\nBases: ansys.tools.visualization_interface.backends.pyvista.widgets.button.Button\n\nDefines the arrow to draw and what it is to do.\n\nParameters\n\nplotter\n\nPlotter\n\nPlotter to draw the buttons on.\n\ndirection\n\nCameraPanDirection\n\nDirection that the camera is to move.\n\ndark_mode\n\nbool, optional\n\nWhether to activate the dark mode or not."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow.html#overview","title":"DisplacementArrow > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncallback\n\nMove the camera in the direction defined by the button.\n\nAttributes\n\n\n\n\n\ndirection\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow.html#import-detail","title":"DisplacementArrow > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow.html#attribute-detail","title":"DisplacementArrow > Attribute detail","text":"Attribute detail\n\n\n\nDisplacementArrow.direction\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow.html#method-detail","title":"DisplacementArrow > Method detail","text":"Method detail\n\n\n\nDisplacementArrow.callback(state: bool) -> None\n\nMove the camera in the direction defined by the button.\n\nParameters\n\nstate\n\nbool\n\nWhether the state of the button, which is inherited from PyVista, is active.\nHowever, this parameter is unused by this callback method."},{"objectID":"Computation times","href":"sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:17.880 total execution time for 8 files from all galleries:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_00-basic-pyvista-examples_qt_backend.py (../../examples/00-basic-pyvista-examples/qt_backend.py)\n\n00:07.869\n\n0.0\n\nsphx_glr_examples_01-advanced-pyansys-examples_using_meshobject_with_field_data.py (../../examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.py)\n\n00:06.994\n\n0.0\n\nsphx_glr_examples_00-basic-pyvista-examples_plain_usage.py (../../examples/00-basic-pyvista-examples/plain_usage.py)\n\n00:00.976\n\n0.0\n\nsphx_glr_examples_00-basic-pyvista-examples_picker.py (../../examples/00-basic-pyvista-examples/picker.py)\n\n00:00.917\n\n0.0\n\nsphx_glr_examples_00-basic-pyvista-examples_custom_picker.py (../../examples/00-basic-pyvista-examples/custom_picker.py)\n\n00:00.423\n\n0.0\n\nsphx_glr_examples_00-basic-pyvista-examples_using_meshobject.py (../../examples/00-basic-pyvista-examples/using_meshobject.py)\n\n00:00.380\n\n0.0\n\nsphx_glr_examples_00-basic-pyvista-examples_clipping_plane.py (../../examples/00-basic-pyvista-examples/clipping_plane.py)\n\n00:00.320\n\n0.0\n\nsphx_glr_examples_00-basic-pyvista-examples_remote_trame_view.py (../../examples/00-basic-pyvista-examples/remote_trame_view.py)\n\n00:00.000\n\n0.0"},{"objectID":"Home","href":"examples/01-advanced-pyansys-examples/index.html#advanced-usage-examples","title":"Advanced usage examples","text":"Advanced usage examples\n\nThese examples show how to use the Visualization Interface Tool to postprocess simulation data.\n\nsphx_glr_examples_01-advanced-pyansys-examples_using_meshobject_with_field_data.py\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/types/index.html#the-types-package","title":"The types package","text":"The types package\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/types/index.html#summary","title":"The types package > Summary","text":"Summary\n\nSubmodules\n\n\n\n\n\nedge_plot\n\nProvides the edge type for plotting.\n\nmesh_object_plot\n\nProvides the MeshObjectPlot class.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/types/index.html#description","title":"The types package > Description","text":"Description\n\nProvides custom types."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#pyvistabackendinterface","title":"PyVistaBackendInterface","text":"PyVistaBackendInterface\n\n\n\nclass ansys.tools.visualization_interface.backends.pyvista.pyvista.PyVistaBackendInterface(use_trame: bool | None = None, allow_picking: bool | None = False, allow_hovering: bool | None = False, plot_picked_names: bool | None = False, show_plane: bool | None = False, use_qt: bool | None = False, show_qt: bool | None = True, custom_picker: ansys.tools.visualization_interface.backends.pyvista.picker.AbstractPicker = None, custom_picker_kwargs: Dict[str, Any] | None = None, **plotter_kwargs)\n\nBases: ansys.tools.visualization_interface.backends._base.BaseBackend\n\nProvides the interface for the Visualization Interface Tool plotter.\n\nThis class is intended to be used as a base class for the custom plotters\nin the different PyAnsys libraries. It provides the basic plotter functionalities,\nsuch as adding objects and enabling widgets and picking capabilities. It also\nprovides the ability to show the plotter using the trame\nservice.\n\nYou can override the plot_iter(), plot(), and picked_operation() methods.\nThe plot_iter() method is intended to plot a list of objects to the plotter, while the\nplot() method is intended to plot a single object to the plotter. The show() method is\nintended to show the plotter. The picked_operation() method is\nintended to perform an operation on the picked objects.\n\nParameters\n\nuse_trame\n\nOptional[bool], default: python:None\n\nWhether to activate the usage of the trame UI instead of the Python window.\n\nallow_picking\n\nOptional[bool], default: python:False\n\nWhether to allow picking capabilities in the window. Incompatible with hovering.\nPicking will take precedence over hovering.\n\nallow_hovering\n\nOptional[bool], default: python:False\n\nWhether to allow hovering capabilities in the window. Incompatible with picking.\nPicking will take precedence over hovering.\n\nplot_picked_names\n\nOptional[bool], default: python:False\n\nWhether to plot the names of the picked objects.\n\nshow_plane\n\nOptional[bool], default: python:False\n\nWhether to show the plane in the plotter.\n\nuse_qt\n\nOptional[bool], default: python:False\n\nWhether to use the Qt backend for the plotter.\n\nshow_qt\n\nOptional[bool], default: python:True\n\nWhether to show the Qt window.\n\ncustom_picker\n\nAbstractPicker, default: python:None\n\nCustom picker class that extends the AbstractPicker class.\n\ncustom_picker_kwargs\n\nOptional[Dict[python:str, Any]], default: python:None\n\nKeyword arguments to pass to the custom picker class."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#overview","title":"PyVistaBackendInterface > Overview","text":"Overview\n\nAbstract methods\n\n\n\n\n\nplot_iter\n\nPlot one or more compatible objects to the plotter.\n\nplot\n\nPlot a single object to the plotter.\n\nMethods\n\n\n\n\n\nenable_widgets\n\nEnable the widgets for the plotter.\n\nadd_widget\n\nAdd one or more custom widgets to the plotter.\n\npicker_callback\n\nDefine the callback for the element picker.\n\nhover_callback\n\nDefine the callback for the element hover.\n\nfocus_point_selection\n\nFocus the camera on a selected actor.\n\ncompute_edge_object_map\n\nCompute the mapping between plotter actors and EdgePlot objects.\n\nenable_picking\n\nEnable picking capabilities in the plotter.\n\nenable_set_focus_center\n\nEnable setting the focus of the camera to the picked point.\n\nenable_hover\n\nEnable hover capabilities in the plotter.\n\ndisable_picking\n\nDisable picking capabilities in the plotter.\n\ndisable_hover\n\nDisable hover capabilities in the plotter.\n\ndisable_center_focus\n\nDisable setting the focus of the camera to the picked point.\n\nshow\n\nPlot and show any PyAnsys object.\n\nshow_plotter\n\nShow the plotter or start the trame service.\n\npicked_operation\n\nPerform an operation on the picked objects.\n\nProperties\n\n\n\n\n\npv_interface\n\nPyVista interface.\n\nscene\n\nPyVista scene."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#import-detail","title":"PyVistaBackendInterface > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#property-detail","title":"PyVistaBackendInterface > Property detail","text":"Property detail\n\n\n\nproperty PyVistaBackendInterface.pv_interface: ansys.tools.visualization_interface.backends.pyvista.pyvista_interface.PyVistaInterface\n\nPyVista interface.\n\n\n\nproperty PyVistaBackendInterface.scene: pyvista.Plotter\n\nPyVista scene."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#method-detail","title":"PyVistaBackendInterface > Method detail","text":"Method detail\n\n\n\nPyVistaBackendInterface.enable_widgets(dark_mode: bool = False) -> None\n\nEnable the widgets for the plotter.\n\nParameters\n\ndark_mode\n\nbool, default: python:False\n\nWhether to use dark mode for the widgets.\n\n\n\nPyVistaBackendInterface.add_widget(widget: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget | List[ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget])\n\nAdd one or more custom widgets to the plotter.\n\nParameters\n\nwidget\n\nUnion[PlotterWidget, List[PlotterWidget]]\n\nOne or more custom widgets.\n\n\n\nPyVistaBackendInterface.picker_callback(actor: pyvista.Actor) -> None\n\nDefine the callback for the element picker.\n\nParameters\n\nactor\n\nActor\n\nActor to select for the picker.\n\n\n\nPyVistaBackendInterface.hover_callback(_widget, event_name) -> None\n\nDefine the callback for the element hover.\n\nParameters\n\nactor\n\nActor\n\nActor to hover for the picker.\n\n\n\nPyVistaBackendInterface.focus_point_selection(actor: pyvista.Actor) -> None\n\nFocus the camera on a selected actor.\n\nParameters\n\nactor\n\nActor\n\nActor to focus the camera on.\n\n\n\nPyVistaBackendInterface.compute_edge_object_map() -> Dict[pyvista.Actor, ansys.tools.visualization_interface.types.edge_plot.EdgePlot]\n\nCompute the mapping between plotter actors and EdgePlot objects.\n\nReturns\n\nDict[Actor, EdgePlot]\n\nDictionary defining the mapping between plotter actors and EdgePlot objects.\n\n\n\nPyVistaBackendInterface.enable_picking()\n\nEnable picking capabilities in the plotter.\n\n\n\nPyVistaBackendInterface.enable_set_focus_center()\n\nEnable setting the focus of the camera to the picked point.\n\n\n\nPyVistaBackendInterface.enable_hover()\n\nEnable hover capabilities in the plotter.\n\n\n\nPyVistaBackendInterface.disable_picking()\n\nDisable picking capabilities in the plotter.\n\n\n\nPyVistaBackendInterface.disable_hover()\n\nDisable hover capabilities in the plotter.\n\n\n\nPyVistaBackendInterface.disable_center_focus()\n\nDisable setting the focus of the camera to the picked point.\n\n\n\nPyVistaBackendInterface.show(plottable_object: Any = None, screenshot: str | None = None, view_2d: Dict = None, name_filter: str = None, dark_mode: bool = False, **kwargs: Dict[str, Any]) -> List[Any]\n\nPlot and show any PyAnsys object.\n\nThe types of objects supported are MeshObjectPlot,\npv.MultiBlock, and pv.PolyData.\n\nParameters\n\nplottable_object\n\nAny, default: python:None\n\nObject or list of objects to plot.\n\nscreenshot\n\npython:str, default: python:None\n\nPath for saving a screenshot of the image that is being represented.\n\nview_2d\n\nDict, default: python:None\n\nDictionary with the plane and the viewup vectors of the 2D plane.\n\nname_filter\n\npython:str, default: python:None\n\nRegular expression with the desired name or names to include in the plotter.\n\ndark_mode\n\nbool, default: python:False\n\nWhether to use dark mode for the widgets.\n\n**kwargs\n\nAny\n\nAdditional keyword arguments for the show or plot method.\n\nReturns\n\nList[Any]\n\nList with the picked bodies in the picked order.\n\n\n\nPyVistaBackendInterface.show_plotter(screenshot: str | None = None, **kwargs) -> None\n\nShow the plotter or start the trame service.\n\nParameters\n\nplotter\n\nPlotter\n\nVisualization Interface Tool plotter with the meshes added.\n\nscreenshot\n\npython:str, default: python:None\n\nPath for saving a screenshot of the image that is being represented.\n\n\n\nabstractmethod PyVistaBackendInterface.plot_iter(plottable_object: Any, name_filter: str = None, **plotting_options)\n\nPlot one or more compatible objects to the plotter.\n\nParameters\n\nplottable_object\n\nAny\n\nOne or more objects to add.\n\nname_filter\n\npython:str, default: None.\n\nRegular expression with the desired name or names  to include in the plotter.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n\n\nabstractmethod PyVistaBackendInterface.plot(plottable_object: Any, name_filter: str = None, **plotting_options)\n\nPlot a single object to the plotter.\n\nParameters\n\nplottable_object\n\nAny\n\nObject to add.\n\nname_filter\n\npython:str\n\nRegular expression with the desired name or names to include in the plotter.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n\n\nPyVistaBackendInterface.picked_operation() -> None\n\nPerform an operation on the picked objects."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot.html#edgeplot","title":"EdgePlot","text":"EdgePlot\n\n\n\nclass ansys.tools.visualization_interface.types.edge_plot.EdgePlot(actor: pyvista.Actor, edge_object: Any, parent: Any = None)\n\nProvides the mapper class for relating PyAnsys object edges with its PyVista actor.\n\nParameters\n\nactor\n\nActor\n\nPyVista actor that represents the edge.\n\nedge_object\n\nEdge\n\nPyAnsys object edge that is represented by the PyVista actor.\n\nparent\n\nMeshObjectPlot, default: python:None\n\nParent PyAnsys object of the edge."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot.html#overview","title":"EdgePlot > Overview","text":"Overview\n\nProperties\n\n\n\n\n\nactor\n\nPyVista actor of the object.\n\nedge_object\n\nPyAnsys edge.\n\nparent\n\nParent PyAnsys object of the edge.\n\nname\n\nName of the edge."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot.html#import-detail","title":"EdgePlot > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot.html#property-detail","title":"EdgePlot > Property detail","text":"Property detail\n\n\n\nproperty EdgePlot.actor: pyvista.Actor\n\nPyVista actor of the object.\n\nReturns\n\nActor\n\nPyVista actor.\n\n\n\nproperty EdgePlot.edge_object: Any\n\nPyAnsys edge.\n\nReturns\n\nAny\n\nPyAnsys edge.\n\n\n\nproperty EdgePlot.parent: Any\n\nParent PyAnsys object of the edge.\n\nReturns\n\nAny\n\nParent PyAnsys object.\n\n\n\nproperty EdgePlot.name: str\n\nName of the edge.\n\nReturns\n\npython:str\n\nName of the edge."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/types/edge_plot/index.html#the-edge_plotpy-module","title":"The edge_plot.py module","text":"The edge_plot.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/types/edge_plot/index.html#summary","title":"The edge_plot.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nEdgePlot\n\nProvides the mapper class for relating PyAnsys object edges with its PyVista actor.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/types/edge_plot/index.html#description","title":"The edge_plot.py module > Description","text":"Description\n\nProvides the edge type for plotting."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer.html#tramevisualizer","title":"TrameVisualizer","text":"TrameVisualizer\n\n\n\nclass ansys.tools.visualization_interface.backends.pyvista.trame_local.TrameVisualizer\n\nDefines the trame layout view."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer.html#overview","title":"TrameVisualizer > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_scene\n\nSet the trame layout view and the mesh to show through the PyVista plotter.\n\nshow\n\nStart the trame server and show the mesh.\n\nAttributes\n\n\n\n\n\nserver\n\n\n\nplotter\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer.html#import-detail","title":"TrameVisualizer > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer.html#attribute-detail","title":"TrameVisualizer > Attribute detail","text":"Attribute detail\n\n\n\nTrameVisualizer.server = None\n\n\n\n\n\nTrameVisualizer.plotter = None\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer.html#method-detail","title":"TrameVisualizer > Method detail","text":"Method detail\n\n\n\nTrameVisualizer.set_scene(plotter)\n\nSet the trame layout view and the mesh to show through the PyVista plotter.\n\nParameters\n\nplotter\n\nPlotter\n\nPyVista plotter with the rendered mesh.\n\n\n\nTrameVisualizer.show()\n\nStart the trame server and show the mesh."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/index.html#the-utils-package","title":"The utils package","text":"The utils package\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/index.html#summary","title":"The utils package > Summary","text":"Summary\n\nSubmodules\n\n\n\n\n\nclip_plane\n\nProvides the ClipPlane class.\n\ncolor\n\nProvides an enum with the color to use for the plotter actors.\n\nlogger\n\nProvides the singleton helper class for the logger.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/index.html#description","title":"The utils package > Description","text":"Description\n\nProvides the Utils package."},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/custom_picker.html#create-custom-picker","title":"Create custom picker","text":"Create custom picker\n\nThis example shows how to create a custom picker. In this case we will show how the default\npicker is implemented through the AbstractPicker class."},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/custom_picker.html#import-the-abstractpicker-class","title":"Create custom picker > Import the AbstractPicker class","text":"Import the AbstractPicker class"},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/custom_picker.html#create-a-custom-picker-class","title":"Create custom picker > Create a custom picker class","text":"Create a custom picker class"},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/custom_picker.html#initialize-the-plotter-backend-with-the-custom-picker","title":"Create custom picker > Initialize the plotter backend with the custom picker","text":"Initialize the plotter backend with the custom picker\n\n"},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/custom_picker.html#create-a-custom-object-with-a-name-to-be-picked","title":"Create custom picker > Create a custom object with a name to be picked","text":"Create a custom object with a name to be picked"},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/custom_picker.html#create-a-meshobjectplot-instance","title":"Create custom picker > Create a MeshObjectPlot instance","text":"Create a MeshObjectPlot instance"},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/custom_picker.html#display-the-plotter-and-interact-with-the-object","title":"Create custom picker > Display the plotter and interact with the object","text":"Display the plotter and interact with the object\n\nTotal running time of the script: (0 minutes 0.423 seconds)\n\n\n\nDownload Jupyter notebook: custom_picker.ipynb\n\nDownload Python source code: custom_picker.py\n\nDownload zipped: custom_picker.zip"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton.html#viewbutton","title":"ViewButton","text":"ViewButton\n\n\n\nclass ansys.tools.visualization_interface.backends.pyvista.widgets.view_button.ViewButton(plotter: pyvista.Plotter, direction: tuple, dark_mode: bool = False)\n\nBases: ansys.tools.visualization_interface.backends.pyvista.widgets.button.Button\n\nProvides for changing the view.\n\nParameters\n\nplotter\n\nPlotter\n\nPlotter to draw the buttons on.\n\ndirection\n\nViewDirection\n\nDirection of the view.\n\ndark_mode\n\nbool, optional\n\nWhether to activate the dark mode or not."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton.html#overview","title":"ViewButton > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncallback\n\nChange the view depending on button interaction.\n\nAttributes\n\n\n\n\n\ndirection\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton.html#import-detail","title":"ViewButton > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton.html#attribute-detail","title":"ViewButton > Attribute detail","text":"Attribute detail\n\n\n\nViewButton.direction\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton.html#method-detail","title":"ViewButton > Method detail","text":"Method detail\n\n\n\nViewButton.callback(state: bool) -> None\n\nChange the view depending on button interaction.\n\nParameters\n\nstate\n\nbool\n\nWhether the state of the button, which is inherited from PyVista, is True.\n\nRaises\n\nNotImplementedError\n\nRaised if the specified direction is not implemented."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/trame_service/index.html#the-trame_servicepy-module","title":"The trame_service.py module","text":"The trame_service.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/trame_service/index.html#summary","title":"The trame_service.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nTrameService\n\nTrame service class.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/trame_service/index.html#description","title":"The trame_service.py module > Description","text":"Description\n\nTrame service module."},{"objectID":"Home","href":"examples/01-advanced-pyansys-examples/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:06.994 total execution time for 1 file from examples/01-advanced-pyansys-examples:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_01-advanced-pyansys-examples_using_meshobject_with_field_data.py (using_meshobject_with_field_data.py)\n\n00:06.994\n\n0.0"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index.html#the-trame_localpy-module","title":"The trame_local.py module","text":"The trame_local.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index.html#summary","title":"The trame_local.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nTrameVisualizer\n\nDefines the trame layout view.\n\nConstants\n\n\n\n\n\nCLIENT_TYPE\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index.html#description","title":"The trame_local.py module > Description","text":"Description\n\nProvides trame visualizer interface for visualization."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index.html#module-detail","title":"The trame_local.py module > Module detail","text":"Module detail\n\n\n\ntrame_local.CLIENT_TYPE = 'vue2'\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/index.html#the-hide_buttonspy-module","title":"The hide_buttons.py module","text":"The hide_buttons.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/index.html#summary","title":"The hide_buttons.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nHideButton\n\nProvides the hide widget for the Visualization Interface Tool Plotter class.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/index.html#description","title":"The hide_buttons.py module > Description","text":"Description\n\nProvides the hide buttons widget for the PyAnsys plotter."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/types/mesh_object_plot/index.html#the-mesh_object_plotpy-module","title":"The mesh_object_plot.py module","text":"The mesh_object_plot.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/types/mesh_object_plot/index.html#summary","title":"The mesh_object_plot.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nMeshObjectPlot\n\nRelates a custom object with a mesh, provided by the consumer library.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/types/mesh_object_plot/index.html#description","title":"The mesh_object_plot.py module > Description","text":"Description\n\nProvides the MeshObjectPlot class."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/pick_rotation_center/index.html#the-pick_rotation_centerpy-module","title":"The pick_rotation_center.py module","text":"The pick_rotation_center.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/pick_rotation_center/index.html#summary","title":"The pick_rotation_center.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nPickRotCenterButton\n\nProvides the pick rotation center widget for the Visualization Interface Tool Plotter class.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/pick_rotation_center/index.html#description","title":"The pick_rotation_center.py module > Description","text":"Description\n\nProvides the measure widget for the PyAnsys plotter."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/plotter/Plotter.html#plotter","title":"Plotter","text":"Plotter\n\n\n\nclass ansys.tools.visualization_interface.plotter.Plotter(backend: ansys.tools.visualization_interface.backends._base.BaseBackend = None)\n\nBase plotting class containing common methods and attributes.\n\nThis class is responsible for plotting objects using the specified backend.\n\nParameters\n\nbackend\n\nBaseBackend, optional\n\nPlotting backend to use, by default PyVistaBackend."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/plotter/Plotter.html#overview","title":"Plotter > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nplot\n\nPlots an object using the specified backend.\n\nshow\n\nShow the plotted objects.\n\nProperties\n\n\n\n\n\nbackend\n\nReturn the base plotter object."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/plotter/Plotter.html#import-detail","title":"Plotter > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/plotter/Plotter.html#property-detail","title":"Plotter > Property detail","text":"Property detail\n\n\n\nproperty Plotter.backend\n\nReturn the base plotter object."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/plotter/Plotter.html#method-detail","title":"Plotter > Method detail","text":"Method detail\n\n\n\nPlotter.plot(plottable_object: Any, **plotting_options)\n\nPlots an object using the specified backend.\n\nParameters\n\nplottable_object\n\nAny\n\nObject to plot.\n\nplotting_options\n\npython:dict\n\nAdditional plotting options.\n\n\n\nPlotter.show(plottable_object: Any = None, screenshot: str = None, name_filter: bool = None, **kwargs) -> List\n\nShow the plotted objects.\n\nParameters\n\nplottable_object\n\nAny, optional\n\nObject to show, by default None.\n\nscreenshot\n\npython:str, optional\n\nPath to save a screenshot, by default None.\n\nname_filter\n\nbool, optional\n\nFlag to filter the object, by default None.\n\nkwargs\n\npython:dict\n\nAdditional options the selected backend accepts.\n\nReturns\n\nList\n\nList of picked objects."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane.html#clipplane","title":"ClipPlane","text":"ClipPlane\n\n\n\nclass ansys.tools.visualization_interface.utils.clip_plane.ClipPlane(normal: Tuple[float, float, float] = (1, 0, 0), origin: Tuple[float, float, float] = (0, 0, 0))\n\nProvides the clipping plane for clipping meshes in the plotter.\n\nThe clipping plane is defined by both normal and origin vectors.\n\nParameters\n\nnormal\n\nTuple[python:float, python:float, python:float], default: (1, 0, 0)\n\nNormal of the plane.\n\norigin\n\nTuple[python:float, python:float, python:float], default: (0, 0, 0)\n\nOrigin point of the plane."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane.html#overview","title":"ClipPlane > Overview","text":"Overview\n\nProperties\n\n\n\n\n\nnormal\n\nNormal of the plane.\n\norigin\n\nOrigin of the plane."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane.html#import-detail","title":"ClipPlane > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane.html#property-detail","title":"ClipPlane > Property detail","text":"Property detail\n\n\n\nproperty ClipPlane.normal: Tuple[float, float, float]\n\nNormal of the plane.\n\nReturns\n\nTuple[python:float, python:float, python:float]\n\nNormal of the plane.\n\n\n\nproperty ClipPlane.origin: Tuple[float, float, float]\n\nOrigin of the plane.\n\nReturns\n\nTuple[python:float, python:float, python:float]\n\nOrigin of the plane."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/index.html#the-backends-package","title":"The backends package","text":"The backends package\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/index.html#summary","title":"The backends package > Summary","text":"Summary\n\nSubpackages\n\n\n\n\n\npyvista\n\nProvides interfaces.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/index.html#description","title":"The backends package > Description","text":"Description\n\nProvides interfaces."},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/picker.html#activate-the-picker","title":"Activate the picker","text":"Activate the picker\n\nThis example shows how to activate the picker, which is the tool that you\nuse to select an object in the plotter and get its name."},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/picker.html#relate-customobject-class-with-a-pyvista-mesh","title":"Activate the picker > Relate CustomObject class with a PyVista mesh","text":"Relate CustomObject class with a PyVista mesh"},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/picker.html#create-two-meshobjectplot-instances","title":"Activate the picker > Create two MeshObjectPlot instances","text":"Create two MeshObjectPlot instances"},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/picker.html#activate-the-picking-capabilities","title":"Activate the picker > Activate the picking capabilities","text":"Activate the picking capabilities\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/picker.html#activate-the-hover-capabilities","title":"Activate the picker > Activate the hover capabilities","text":"Activate the hover capabilities\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/picker.html#using-structuredgrid-mesh","title":"Activate the picker > Using StructuredGrid mesh","text":"Using StructuredGrid mesh\n\nStatic Scene\n\n\n\nInteractive Scene\n\n\n\nTotal running time of the script: (0 minutes 0.917 seconds)\n\n\n\nDownload Jupyter notebook: picker.ipynb\n\nDownload Python source code: picker.py\n\nDownload zipped: picker.zip"},{"objectID":"Home","href":"index.html#visualization-interface-tool-documentation-0121","title":"Visualization Interface Tool documentation 0.12.1","text":"Visualization Interface Tool documentation 0.12.1\n\nThe Visualization Interface Tool is a Python API that provides an interface between PyAnsys libraries and\ndifferent plotting backends.\n\nThe Visualization Interface Tool offers these main features:\n\nServes as an interface between PyAnsys and other plotting libraries (although only\nPyVista is supported currently).\n\nProvides out-of-the box picking, viewing, and measuring functionalities.\n\nSupplies an extensible class for adding custom functionalities.\n\nGetting started \n\nLearn how to install the Visualization Interface Tool in user mode and quickly\nbegin using it.\n\ngetting_started/index\n\nUser guide \n\nUnderstand key concepts for implementing the Visualization Interface Tool in\nyour workflow.\n\nuser_guide/index\n\nAPI reference \n\nUnderstand how to use Python to interact programmatically with\nthe Visualization Interface Tool.\n\napi/index\n\nExamples \n\nExplore examples that show how to use the Visualization Interface Tool to\nperform many different types of operations.\n\nexamples/index\n\nContribute \n\nLearn how to contribute to the Visualization Interface Tool codebase or documentation.\n\ncontributing\n\n"},{"objectID":"Contribute","href":"contributing.html#contribute","title":"Contribute","text":"Contribute\n\nOverall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys developer’s guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to the Visualization Interface Tool.\n\nThe following contribution information is specific to the Visualization Interface Tool."},{"objectID":"Contribute","href":"contributing.html#install-in-developer-mode","title":"Contribute > Install in developer mode","text":"Install in developer mode\n\nInstalling the Visualization Interface Tool in developer mode allows you to modify and enhance\nthe source.\n\nTo clone and install the latest Visualization Interface Tool release in development mode, run\nthese commands:"},{"objectID":"Contribute","href":"contributing.html#run-tests","title":"Contribute > Run tests","text":"Run tests\n\nThe Visualization Interface Tool uses pytest for testing.\n\nPrior to running tests, you must run this command to install\ntest dependencies:\n\nTo then run the tests, navigate to the root directory of the repository and run this\ncommand:"},{"objectID":"Contribute","href":"contributing.html#adhere-to-code-style","title":"Contribute > Adhere to code style","text":"Adhere to code style\n\nThe Visualization Interface Tool follows the PEP8 standard as outlined in\nPEP 8 in\nthe PyAnsys developer’s guide and implements style checking using\npre-commit.\n\nTo ensure your code meets minimum code styling standards, run these commands:\n\nYou can also install this as a pre-commit hook by running this command:\n\nThis way, it’s not possible for you to push code that fails the style checks:"},{"objectID":"Contribute","href":"contributing.html#build-the-documentation","title":"Contribute > Build the documentation","text":"Build the documentation\n\nYou can build the Visualization Interface Tool documentation locally.\n\nPrior to building the documentation, you must run this command to install\ndocumentation dependencies:\n\nTo then build the documentation, navigate to the docs directory and run\nthis command:\n\nThe documentation is built in the docs/_build/html directory.\n\nYou can clean the documentation build by running this command:"},{"objectID":"Contribute","href":"contributing.html#post-issues","title":"Contribute > Post issues","text":"Post issues\n\nUse the Visualization Interface Tool Issues\npage to report bugs and request new features. When possible, use the issue templates provided.\nIf your issue does not fit into one of these templates, click the link for opening a blank issue.\n\nIf you have general questions about the PyAnsys ecosystem, email\npyansys.core@ansys.com. If your\nquestion is specific to the Visualization Interface Tool, ask your\nquestion in an issue as described in the previous paragraph."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/index.html#the-measurepy-module","title":"The measure.py module","text":"The measure.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/index.html#summary","title":"The measure.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nMeasureWidget\n\nProvides the measure widget for the Visualization Interface Tool Plotter class.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/index.html#description","title":"The measure.py module > Description","text":"Description\n\nProvides the measure widget for the PyAnsys plotter."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/pick_rotation_center/PickRotCenterButton.html#pickrotcenterbutton","title":"PickRotCenterButton","text":"PickRotCenterButton\n\n\n\nclass ansys.tools.visualization_interface.backends.pyvista.widgets.pick_rotation_center.PickRotCenterButton(plotter_helper: ansys.tools.visualization_interface.backends.pyvista.pyvista.Plotter, dark_mode: bool = False)\n\nBases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\n\nProvides the pick rotation center widget for the Visualization Interface Tool Plotter class.\n\nParameters\n\nplotter_helper\n\nPlotterHelper\n\nPlotter to add the pick rotation center widget to.\n\ndark_mode\n\nbool, optional\n\nWhether to activate the dark mode or not."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/pick_rotation_center/PickRotCenterButton.html#overview","title":"PickRotCenterButton > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncallback\n\nRemove or add the pick rotation center widget actor upon click.\n\nupdate\n\nDefine the measurement widget button parameters.\n\nAttributes\n\n\n\n\n\nplotter_helper\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/pick_rotation_center/PickRotCenterButton.html#import-detail","title":"PickRotCenterButton > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/pick_rotation_center/PickRotCenterButton.html#attribute-detail","title":"PickRotCenterButton > Attribute detail","text":"Attribute detail\n\n\n\nPickRotCenterButton.plotter_helper\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/pick_rotation_center/PickRotCenterButton.html#method-detail","title":"PickRotCenterButton > Method detail","text":"Method detail\n\n\n\nPickRotCenterButton.callback(state: bool) -> None\n\nRemove or add the pick rotation center widget actor upon click.\n\nParameters\n\nstate\n\nbool\n\nWhether the state of the button, which is inherited from PyVista, is active.\n\n\n\nPickRotCenterButton.update() -> None\n\nDefine the measurement widget button parameters."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/picker/index.html#the-pickerpy-module","title":"The picker.py module","text":"The picker.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/picker/index.html#summary","title":"The picker.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nAbstractPicker\n\nAbstract base class for pickers.\n\nPicker\n\nClass to manage picking and hovering of objects in the plotter.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/picker/index.html#description","title":"The picker.py module > Description","text":"Description\n\nModule for managing picking and hovering of objects in a PyVista plotter."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/picker/AbstractPicker.html#abstractpicker","title":"AbstractPicker","text":"AbstractPicker\n\n\n\nclass ansys.tools.visualization_interface.backends.pyvista.picker.AbstractPicker(plotter_backend: ansys.tools.visualization_interface.backends.pyvista.pyvista.Plotter, **kwargs)\n\nBases: abc.ABC\n\nAbstract base class for pickers."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/picker/AbstractPicker.html#overview","title":"AbstractPicker > Overview","text":"Overview\n\nAbstract methods\n\n\n\n\n\npick_select_object\n\nDetermine actions to take when an object is selected.\n\npick_unselect_object\n\nDetermine actions to take when an object is unselected.\n\nhover_select_object\n\nDetermine actions to take when an object is hovered over.\n\nhover_unselect_object\n\nDetermine actions to take when an object is unhovered.\n\nProperties\n\n\n\n\n\npicked_dict\n\nReturn the dictionary of picked objects."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/picker/AbstractPicker.html#import-detail","title":"AbstractPicker > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/picker/AbstractPicker.html#property-detail","title":"AbstractPicker > Property detail","text":"Property detail\n\n\n\nproperty AbstractPicker.picked_dict: dict\n\nAbstractmethod\n\n\n\nReturn the dictionary of picked objects."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/picker/AbstractPicker.html#method-detail","title":"AbstractPicker > Method detail","text":"Method detail\n\n\n\nabstractmethod AbstractPicker.pick_select_object(custom_object: ansys.tools.visualization_interface.types.mesh_object_plot.MeshObjectPlot | ansys.tools.visualization_interface.types.edge_plot.EdgePlot, pt: numpy.ndarray) -> None\n\nDetermine actions to take when an object is selected.\n\n\n\nabstractmethod AbstractPicker.pick_unselect_object(custom_object: ansys.tools.visualization_interface.types.mesh_object_plot.MeshObjectPlot | ansys.tools.visualization_interface.types.edge_plot.EdgePlot) -> None\n\nDetermine actions to take when an object is unselected.\n\n\n\nabstractmethod AbstractPicker.hover_select_object(custom_object: ansys.tools.visualization_interface.types.mesh_object_plot.MeshObjectPlot | ansys.tools.visualization_interface.types.edge_plot.EdgePlot, pt: numpy.ndarray) -> None\n\nDetermine actions to take when an object is hovered over.\n\n\n\nabstractmethod AbstractPicker.hover_unselect_object(custom_object: ansys.tools.visualization_interface.types.mesh_object_plot.MeshObjectPlot | ansys.tools.visualization_interface.types.edge_plot.EdgePlot) -> None\n\nDetermine actions to take when an object is unhovered."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget.html#meshsliderwidget","title":"MeshSliderWidget","text":"MeshSliderWidget\n\n\n\nclass ansys.tools.visualization_interface.backends.pyvista.widgets.mesh_slider.MeshSliderWidget(plotter_helper: ansys.tools.visualization_interface.backends.pyvista.pyvista.Plotter, dark_mode: bool = False)\n\nBases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\n\nProvides the mesh slider widget for the Visualization Interface Tool Plotter class.\n\nParameters\n\nplotter_helper\n\nPlotterHelper\n\nPlotter to add the mesh slider widget to.\n\ndark_mode\n\nbool, optional\n\nWhether to activate the dark mode or not."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget.html#overview","title":"MeshSliderWidget > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncallback\n\nRemove or add the mesh slider widget actor upon click.\n\nupdate\n\nDefine the mesh slider widget button parameters.\n\nAttributes\n\n\n\n\n\nplotter_helper\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget.html#import-detail","title":"MeshSliderWidget > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget.html#attribute-detail","title":"MeshSliderWidget > Attribute detail","text":"Attribute detail\n\n\n\nMeshSliderWidget.plotter_helper\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget.html#method-detail","title":"MeshSliderWidget > Method detail","text":"Method detail\n\n\n\nMeshSliderWidget.callback(state: bool) -> None\n\nRemove or add the mesh slider widget actor upon click.\n\nParameters\n\nstate\n\nbool\n\nWhether the state of the button, which is inherited from PyVista, is active.\n\n\n\nMeshSliderWidget.update() -> None\n\nDefine the mesh slider widget button parameters."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/logger/VizLogger.html#vizlogger","title":"VizLogger","text":"VizLogger\n\n\n\nclass ansys.tools.visualization_interface.utils.logger.VizLogger(level: int = logging.ERROR, logger_name: str = 'VizLogger')\n\nBases: object\n\nProvides the singleton logger for the visualizer.\n\nParameters\n\nto_file\n\nbool, default: python:False\n\nWhether to include the logs in a file."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/logger/VizLogger.html#overview","title":"VizLogger > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget_logger\n\nGet the logger.\n\nset_level\n\nSet the logger output level.\n\nenable_output\n\nEnable logger output to a given stream.\n\nadd_file_handler\n\nSave logs to a file in addition to printing them to the standard output."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/logger/VizLogger.html#import-detail","title":"VizLogger > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/logger/VizLogger.html#method-detail","title":"VizLogger > Method detail","text":"Method detail\n\n\n\nVizLogger.get_logger()\n\nGet the logger.\n\nReturns\n\nLogger\n\nLogger.\n\n\n\nVizLogger.set_level(level: int)\n\nSet the logger output level.\n\nParameters\n\nlevel\n\npython:int\n\nOutput Level of the logger.\n\n\n\nVizLogger.enable_output(stream=None)\n\nEnable logger output to a given stream.\n\nIf a stream is not specified, sys.stderr is used.\n\nParameters\n\nstream: TextIO, default: ``sys.stderr``\n\nStream to output the log output to.\n\n\n\nVizLogger.add_file_handler(logs_dir: str = './.log')\n\nSave logs to a file in addition to printing them to the standard output.\n\nParameters\n\nlogs_dir\n\npython:str, default: \"./.log\"\n\nDirectory of the logs."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista/index.html#the-pyvistapy-module","title":"The pyvista.py module","text":"The pyvista.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista/index.html#summary","title":"The pyvista.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nPyVistaBackendInterface\n\nProvides the interface for the Visualization Interface Tool plotter.\n\nPyVistaBackend\n\nProvides the generic plotter implementation for PyAnsys libraries.\n\nConstants\n\n\n\n\n\nDARK_MODE_THRESHOLD\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista/index.html#description","title":"The pyvista.py module > Description","text":"Description\n\nProvides a wrapper to aid in plotting."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista/index.html#module-detail","title":"The pyvista.py module > Module detail","text":"Module detail\n\n\n\npyvista.DARK_MODE_THRESHOLD = 120\n\n"},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/clipping_plane.html#use-a-clipping-plane","title":"Use a clipping plane","text":"Use a clipping plane\n\nThis example shows how to use a clipping plane in the Visualization Interface Tool to cut a mesh."},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/clipping_plane.html#create-a-plotter-and-clip-the-mesh","title":"Use a clipping plane > Create a plotter and clip the mesh","text":"Create a plotter and clip the mesh\n\nStatic Scene\n\n\n\nInteractive Scene\n\n\n\nTotal running time of the script: (0 minutes 0.320 seconds)\n\n\n\nDownload Jupyter notebook: clipping_plane.ipynb\n\nDownload Python source code: clipping_plane.py\n\nDownload zipped: clipping_plane.zip"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection.html#camerapandirection","title":"CameraPanDirection","text":"CameraPanDirection\n\n\n\nclass ansys.tools.visualization_interface.backends.pyvista.widgets.displace_arrows.CameraPanDirection(*args, **kwds)\n\nBases: enum.Enum\n\nProvides an enum with the available movement directions of the camera."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection.html#overview","title":"CameraPanDirection > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nXUP\n\n\n\nXDOWN\n\n\n\nYUP\n\n\n\nYDOWN\n\n\n\nZUP\n\n\n\nZDOWN\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection.html#import-detail","title":"CameraPanDirection > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection.html#attribute-detail","title":"CameraPanDirection > Attribute detail","text":"Attribute detail\n\n\n\nCameraPanDirection.XUP = (0, 'upxarrow', (5, 230))\n\n\n\n\n\nCameraPanDirection.XDOWN = (1, 'downarrow', (5, 190))\n\n\n\n\n\nCameraPanDirection.YUP = (2, 'upyarrow', (35, 230))\n\n\n\n\n\nCameraPanDirection.YDOWN = (3, 'downarrow', (35, 190))\n\n\n\n\n\nCameraPanDirection.ZUP = (4, 'upzarrow', (65, 230))\n\n\n\n\n\nCameraPanDirection.ZDOWN = (5, 'downarrow', (65, 190))\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/dark_mode/index.html#the-dark_modepy-module","title":"The dark_mode.py module","text":"The dark_mode.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/dark_mode/index.html#summary","title":"The dark_mode.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nDarkModeButton\n\nProvides the dark mode widget for the Visualization Interface Tool Plotter class.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/dark_mode/index.html#description","title":"The dark_mode.py module > Description","text":"Description\n\nProvides the dark mode button widget for the PyAnsys plotter."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton.html#hidebutton","title":"HideButton","text":"HideButton\n\n\n\nclass ansys.tools.visualization_interface.backends.pyvista.widgets.hide_buttons.HideButton(plotter: ansys.tools.visualization_interface.backends.pyvista.pyvista.Plotter, dark_mode: bool = False)\n\nBases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\n\nProvides the hide widget for the Visualization Interface Tool Plotter class.\n\nParameters\n\nplotter_helper\n\nPlotterHelper\n\nPlotter to add the hide widget to.\n\ndark_mode\n\nbool, optional\n\nWhether to activate the dark mode or not."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton.html#overview","title":"HideButton > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncallback\n\nRemove or add the hide widget actor upon click.\n\nupdate\n\nDefine the hide widget button parameters."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton.html#import-detail","title":"HideButton > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton.html#method-detail","title":"HideButton > Method detail","text":"Method detail\n\n\n\nHideButton.callback(state: bool) -> None\n\nRemove or add the hide widget actor upon click.\n\nParameters\n\nstate\n\nbool\n\nWhether the state of the button, which is inherited from PyVista, is active.\n\n\n\nHideButton.update() -> None\n\nDefine the hide widget button parameters."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/logger/index.html#the-loggerpy-module","title":"The logger.py module","text":"The logger.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/logger/index.html#summary","title":"The logger.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nSingletonType\n\nProvides the singleton helper class for the logger.\n\nVizLogger\n\nProvides the singleton logger for the visualizer.\n\nAttributes\n\n\n\n\n\nlogger\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/logger/index.html#description","title":"The logger.py module > Description","text":"Description\n\nProvides the singleton helper class for the logger."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/logger/index.html#module-detail","title":"The logger.py module > Module detail","text":"Module detail\n\n\n\nlogger.logger\n\n"},{"objectID":"Home","href":"examples/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 0 files from examples:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nN/A\n\nN/A\n\nN/A"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton.html#screenshotbutton","title":"ScreenshotButton","text":"ScreenshotButton\n\n\n\nclass ansys.tools.visualization_interface.backends.pyvista.widgets.screenshot.ScreenshotButton(plotter: pyvista.Plotter, dark_mode: bool = False)\n\nBases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\n\nProvides the screenshot widget for the Visualization Interface Tool Plotter class.\n\nParameters\n\nplotter\n\nPlotter\n\nProvides the plotter to add the screenshot widget to.\n\ndark_mode\n\nbool, optional\n\nWhether to activate the dark mode or not."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton.html#overview","title":"ScreenshotButton > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncallback\n\nRemove or add the screenshot widget actor upon click.\n\nupdate\n\nDefine the configuration and representation of the screenshot widget button."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton.html#import-detail","title":"ScreenshotButton > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton.html#method-detail","title":"ScreenshotButton > Method detail","text":"Method detail\n\n\n\nScreenshotButton.callback(state: bool) -> None\n\nRemove or add the screenshot widget actor upon click.\n\nParameters\n\nstate\n\nbool\n\nWhether the state of the button, which is inherited from PyVista, is True.\n\nNotes\n\nThis method provides a callback function for the screenshot widget.\nIt is called every time the screenshot widget is clicked.\n\n\n\nScreenshotButton.update() -> None\n\nDefine the configuration and representation of the screenshot widget button."},{"objectID":"Home","href":"api/index.html#api-reference","title":"API reference","text":"API reference\n\nThis section describes ansys-tools-visualization-interface endpoints, their capabilities, and how\nto interact with them programmatically.\n\n"},{"objectID":"Home","href":"examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#postprocessing-simulation-results-using-the-meshobjectplot-class","title":"Postprocessing simulation results using the MeshObjectPlot class","text":"Postprocessing simulation results using the MeshObjectPlot class\n\nThe Visualization Interface Tool provides the MeshObject helper class to relate a custom object.\nWith a custom object, you can take advantage of the full potential of the Visualization Interface Tool.\n\nThis example shows how to use the MeshObjectPlot class to plot your custom objects with scalar data on mesh."},{"objectID":"Home","href":"examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#necessary-imports","title":"Postprocessing simulation results using the MeshObjectPlot class > Necessary imports","text":"Necessary imports"},{"objectID":"Home","href":"examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#download-the-vtk-file","title":"Postprocessing simulation results using the MeshObjectPlot class > Download the VTK file","text":"Download the VTK file\n\nA VTK dataset can be produced utilizing PyDPF\nfor Ansys Flagship products simulations results file format."},{"objectID":"Home","href":"examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#define-a-custom-object-class","title":"Postprocessing simulation results using the MeshObjectPlot class > Define a custom object class","text":"Define a custom object class\n\nNote that the CustomObject class must have a way to get the mesh\nand a name or ID."},{"objectID":"Home","href":"examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#create-a-meshobjectplot-instance","title":"Postprocessing simulation results using the MeshObjectPlot class > Create a MeshObjectPlot instance","text":"Create a MeshObjectPlot instance"},{"objectID":"Home","href":"examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#get-the-available-field-data-arrays","title":"Postprocessing simulation results using the MeshObjectPlot class > Get the available field data arrays","text":"Get the available field data arrays"},{"objectID":"Home","href":"examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#plot-the-meshobjectplot-instance-with-mesh-object--field-data-0","title":"Postprocessing simulation results using the MeshObjectPlot class > Plot the MeshObjectPlot instance with mesh object & field data (0)","text":"Plot the MeshObjectPlot instance with mesh object & field data (0)\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Home","href":"examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#plot-the-meshobjectplot-instance-with-mesh-object--other-field-data-1","title":"Postprocessing simulation results using the MeshObjectPlot class > Plot the MeshObjectPlot instance with mesh object & other field data (1)","text":"Plot the MeshObjectPlot instance with mesh object & other field data (1)\n\nStatic Scene\n\n\n\nInteractive Scene\n\n\n\nTotal running time of the script: (0 minutes 6.994 seconds)\n\n\n\nDownload Jupyter notebook: using_meshobject_with_field_data.ipynb\n\nDownload Python source code: using_meshobject_with_field_data.py\n\nDownload zipped: using_meshobject_with_field_data.zip"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/clip_plane/index.html#the-clip_planepy-module","title":"The clip_plane.py module","text":"The clip_plane.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/clip_plane/index.html#summary","title":"The clip_plane.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nClipPlane\n\nProvides the clipping plane for clipping meshes in the plotter.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/clip_plane/index.html#description","title":"The clip_plane.py module > Description","text":"Description\n\nProvides the ClipPlane class."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/dark_mode/DarkModeButton.html#darkmodebutton","title":"DarkModeButton","text":"DarkModeButton\n\n\n\nclass ansys.tools.visualization_interface.backends.pyvista.widgets.dark_mode.DarkModeButton(plotter: ansys.tools.visualization_interface.backends.pyvista.pyvista.Plotter, dark_mode: bool = False)\n\nBases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\n\nProvides the dark mode widget for the Visualization Interface Tool Plotter class.\n\nParameters\n\nplotter_helper\n\nPlotterHelper\n\nPlotter to add the dark mode widget to.\n\ndark_mode\n\nbool, optional\n\nWhether to activate the dark mode or not."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/dark_mode/DarkModeButton.html#overview","title":"DarkModeButton > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncallback\n\nRemove or add the dark mode widget actor upon click.\n\nupdate\n\nDefine the dark mode widget button parameters."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/dark_mode/DarkModeButton.html#import-detail","title":"DarkModeButton > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/dark_mode/DarkModeButton.html#method-detail","title":"DarkModeButton > Method detail","text":"Method detail\n\n\n\nDarkModeButton.callback(state: bool) -> None\n\nRemove or add the dark mode widget actor upon click.\n\nParameters\n\nstate\n\nbool\n\nWhether the state of the button, which is inherited from PyVista, is active.\n\n\n\nDarkModeButton.update() -> None\n\nDefine the dark mode widget button parameters."},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:10.885 total execution time for 7 files from examples/00-basic-pyvista-examples:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_00-basic-pyvista-examples_qt_backend.py (qt_backend.py)\n\n00:07.869\n\n0.0\n\nsphx_glr_examples_00-basic-pyvista-examples_plain_usage.py (plain_usage.py)\n\n00:00.976\n\n0.0\n\nsphx_glr_examples_00-basic-pyvista-examples_picker.py (picker.py)\n\n00:00.917\n\n0.0\n\nsphx_glr_examples_00-basic-pyvista-examples_custom_picker.py (custom_picker.py)\n\n00:00.423\n\n0.0\n\nsphx_glr_examples_00-basic-pyvista-examples_using_meshobject.py (using_meshobject.py)\n\n00:00.380\n\n0.0\n\nsphx_glr_examples_00-basic-pyvista-examples_clipping_plane.py (clipping_plane.py)\n\n00:00.320\n\n0.0\n\nsphx_glr_examples_00-basic-pyvista-examples_remote_trame_view.py (remote_trame_view.py)\n\n00:00.000\n\n0.0"},{"objectID":"Home","href":"user_guide/index.html#user-guide","title":"User guide","text":"User guide\n\nThis section explains key concepts for implementing the Visualization Interface Tool in your workflow.\nYou can use the Visualization Interface Tool in your examples as well as integrate this library into\nyour own code."},{"objectID":"Home","href":"user_guide/index.html#default-plotter-usage","title":"User guide > Default plotter usage","text":"Default plotter usage\n\nThe Visualization Interface Tool provides a default plotter that can be used out of the box, using the PyVista backend. This default\nplotter provides common functionalities so that you do not need to create a custom plotter."},{"objectID":"Home","href":"user_guide/index.html#use-with-pyvista-meshes","title":"User guide > Use with PyVista meshes","text":"Use with PyVista meshes\n\nYou can use the default plotter to plot simple PyVista meshes. This code shows how to\nuse it to visualize a simple PyVista mesh:"},{"objectID":"Home","href":"user_guide/index.html#use-with-pyansys-custom-objects","title":"User guide > Use with PyAnsys custom objects","text":"Use with PyAnsys custom objects\n\nYou can also use the default plotter to visualize PyAnsys custom objects. The only requirement is that the\ncustom object must have a method that returns a PyVista mesh a method that exposes a name or\nid attribute of your object. To expose a custom object, you use a MeshObjectPlot instance. This class\nrelates PyVista meshes with any object.\n\nThe following code shows how to use the default plotter to visualize a PyAnsys custom object:"},{"objectID":"Home","href":"user_guide/index.html#customize-your-own-plotter","title":"User guide > Customize your own plotter","text":"Customize your own plotter\n\nThe Visualization Interface Tool provides a base class, PlotterInterface, for customizing certain functions\nof the plotter. This class provides a set of methods that can be overridden so that you can adapt the\nplotter to the specific need of your PyAnsys library.\n\nThe first thing you must do is to create a class that inherits from the PlotterInterface\nclass. After that, see these main use cases for customizing the plotter:\n\nThe most common use case is to customize the way that the objects you represent are shown in the plotter.\nTo this end, you can override the plot and plot_iter methods. These methods are called every time\na new object is added to the plotter. The default implementation of this method is to add a PyVista mesh\nor a  MeshObjectPlot instance to the plotter. You can override this method to add your own meshes or\nobjects to the plotter in a manner that fits the way that you want to represent the meshes.\n\nAnother use case is the need to have custom button functionalities for your library. For example, you may\nwant buttons for hiding or showing certain objects. To add custom buttons to the plotter, you use the\nimplementable interface provided by the PlotterWidget class.\n\nSome practical examples of how to use the PlotterInterface class are included in some PyAnsys libraries,\nsuch as PyAnsys Geometry."},{"objectID":"Home","href":"user_guide/index.html#customizing-the-picker-and-hover-callbacks","title":"User guide > Customizing the picker and hover callbacks","text":"Customizing the picker and hover callbacks\n\nThe Visualization Interface Tool provides a base class, AbstractPicker, for customizing the picker and hover\ncallbacks of the plotter. This class provides a set of methods that can be overridden so that you can adapt the\npicker and hover functionalities to the specific need of your PyAnsys library.\n\nThe first thing you must do is to create a class that inherits from the AbstractPicker class. After that, see\nthese main use cases for customizing the picker and hover callbacks:\n\nYou may want to change the way that objects are picked in the plotter. To do this, you can override the\npick_select_object and pick_unselect_object methods. These methods are called when an object is\nselected or unselected, respectively.\n\nSimilarly, you may want to change the way that objects are hovered over in the plotter. To do this, you can\noverride the hover_select_object and hover_unselect_object methods. These methods are called when an\nobject is hovered over or unhovered, respectively.\n\nA practical example of how to use the AbstractPicker class are included in the examples section of the documentation."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/index.html#the-buttonpy-module","title":"The button.py module","text":"The button.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/index.html#summary","title":"The button.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nButton\n\nProvides the abstract class for implementing buttons in PyAnsys.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/index.html#description","title":"The button.py module > Description","text":"Description\n\nProvides for implementing buttons in PyAnsys."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/index.html#the-mesh_sliderpy-module","title":"The mesh_slider.py module","text":"The mesh_slider.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/index.html#summary","title":"The mesh_slider.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nMeshSliderWidget\n\nProvides the mesh slider widget for the Visualization Interface Tool Plotter class.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/index.html#description","title":"The mesh_slider.py module > Description","text":"Description\n\nProvides the measure widget for the PyAnsys plotter."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/picker/Picker.html#picker","title":"Picker","text":"Picker\n\n\n\nclass ansys.tools.visualization_interface.backends.pyvista.picker.Picker(plotter_backend: ansys.tools.visualization_interface.backends.pyvista.pyvista.Plotter, plot_picked_names: bool = True)\n\nBases: AbstractPicker\n\nClass to manage picking and hovering of objects in the plotter.\n\nThis class is responsible for managing the selection and deselection of objects\nin the plotter, both through direct picking and hovering. It keeps track of the\ncurrently selected and hovered objects, and provides methods to select and unselect\nthem.\n\nParameters\n\nplotter_backend\n\nPlotter\n\nThe plotter instance to which this picker is attached.\n\nplot_picked_names\n\nbool, optional\n\nWhether to display the names of picked objects in the plotter. Defaults to True."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/picker/Picker.html#overview","title":"Picker > Overview","text":"Overview\n\nMethods\n\n\n\n\n\npick_select_object\n\nAdd actor to picked list and add label if required.\n\npick_unselect_object\n\nRemove actor from picked list and remove label if required.\n\nhover_select_object\n\nAdd label to hovered object if required.\n\nhover_unselect_object\n\nRemove all hover labels from the scene.\n\nProperties\n\n\n\n\n\npicked_dict\n\nReturn the dictionary of picked objects."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/picker/Picker.html#import-detail","title":"Picker > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/picker/Picker.html#property-detail","title":"Picker > Property detail","text":"Property detail\n\n\n\nproperty Picker.picked_dict: dict\n\nReturn the dictionary of picked objects."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/picker/Picker.html#method-detail","title":"Picker > Method detail","text":"Method detail\n\n\n\nPicker.pick_select_object(custom_object: ansys.tools.visualization_interface.types.mesh_object_plot.MeshObjectPlot | ansys.tools.visualization_interface.types.edge_plot.EdgePlot, pt: numpy.ndarray) -> None\n\nAdd actor to picked list and add label if required.\n\nParameters\n\ncustom_object\n\nUnion[MeshObjectPlot, EdgePlot]\n\nThe object to be selected.\n\npt\n\nnp.ndarray\n\nThe point where the object was picked.\n\n\n\nPicker.pick_unselect_object(custom_object: ansys.tools.visualization_interface.types.mesh_object_plot.MeshObjectPlot | ansys.tools.visualization_interface.types.edge_plot.EdgePlot) -> None\n\nRemove actor from picked list and remove label if required.\n\nParameters\n\ncustom_object\n\nUnion[MeshObjectPlot, EdgePlot]\n\nThe object to be unselected.\n\n\n\nPicker.hover_select_object(custom_object: ansys.tools.visualization_interface.types.mesh_object_plot.MeshObjectPlot | ansys.tools.visualization_interface.types.edge_plot.EdgePlot, actor: pyvista.Actor) -> None\n\nAdd label to hovered object if required.\n\nParameters\n\ncustom_object\n\nUnion[MeshObjectPlot, EdgePlot]\n\nThe object to be hovered over.\n\nactor\n\nvtkActor\n\nThe actor corresponding to the hovered object.\n\n\n\nPicker.hover_unselect_object()\n\nRemove all hover labels from the scene."},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/remote_trame_view.html#use-trame-as-a-remote-service","title":"Use trame as a remote service","text":"Use trame as a remote service\n\nThis example shows how to launch a trame service and use it as a remote service.\n\nFirst, we need to launch the trame service. We can do this by running the following code:\n\nNow, we can send meshes and plotter to the trame service. We can do this by running the following code in a separate terminal:\n\nTotal running time of the script: (0 minutes 0.000 seconds)\n\n\n\nDownload Jupyter notebook: remote_trame_view.ipynb\n\nDownload Python source code: remote_trame_view.py\n\nDownload zipped: remote_trame_view.zip"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/index.html#the-view_buttonpy-module","title":"The view_button.py module","text":"The view_button.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/index.html#summary","title":"The view_button.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nViewButton\n\nProvides for changing the view.\n\nEnums\n\n\n\n\n\nViewDirection\n\nProvides an enum with the available views.\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/index.html#description","title":"The view_button.py module > Description","text":"Description\n\nProvides the view button widget for changing the camera view."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/index.html#the-pyvista-package","title":"The pyvista package","text":"The pyvista package\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/index.html#summary","title":"The pyvista package > Summary","text":"Summary\n\nSubpackages\n\n\n\n\n\nwidgets\n\nProvides widgets for the Visualization Interface Tool plotter.\n\nSubmodules\n\n\n\n\n\npicker\n\nModule for managing picking and hovering of objects in a PyVista plotter.\n\npyvista\n\nProvides a wrapper to aid in plotting.\n\npyvista_interface\n\nProvides plotting for various PyAnsys objects.\n\ntrame_local\n\nProvides trame visualizer interface for visualization.\n\ntrame_remote\n\nModule for trame websocket client functions.\n\ntrame_service\n\nTrame service module.\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/index.html#description","title":"The pyvista package > Description","text":"Description\n\nProvides interfaces."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button.html#button","title":"Button","text":"Button\n\n\n\nclass ansys.tools.visualization_interface.backends.pyvista.widgets.button.Button(plotter: pyvista.Plotter, button_config: tuple, dark_mode: bool = False)\n\nBases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\n\nProvides the abstract class for implementing buttons in PyAnsys.\n\nParameters\n\nplotter\n\nPlotter\n\nPlotter to draw the buttons on.\n\nbutton_config\n\npython:tuple\n\nTuple containing the position and the path to the icon of the button.\n\ndark_mode\n\nbool, optional\n\nWhether to activate the dark mode or not.\n\nNotes\n\nThis class wraps the PyVista add_checkbox_button_widget() method."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button.html#overview","title":"Button > Overview","text":"Overview\n\nAbstract methods\n\n\n\n\n\ncallback\n\nGet the functionality of the button, which is implemented by subclasses.\n\nMethods\n\n\n\n\n\nupdate\n\nAssign the image that represents the button.\n\nAttributes\n\n\n\n\n\nbutton_config\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button.html#import-detail","title":"Button > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button.html#attribute-detail","title":"Button > Attribute detail","text":"Attribute detail\n\n\n\nButton.button_config\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button.html#method-detail","title":"Button > Method detail","text":"Method detail\n\n\n\nabstractmethod Button.callback(state: bool) -> None\n\nGet the functionality of the button, which is implemented by subclasses.\n\nParameters\n\nstate\n\nbool\n\nWhether the button is active.\n\n\n\nButton.update() -> None\n\nAssign the image that represents the button."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection.html#viewdirection","title":"ViewDirection","text":"ViewDirection\n\n\n\nclass ansys.tools.visualization_interface.backends.pyvista.widgets.view_button.ViewDirection(*args, **kwds)\n\nBases: enum.Enum\n\nProvides an enum with the available views."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection.html#overview","title":"ViewDirection > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nXYPLUS\n\n\n\nXYMINUS\n\n\n\nXZPLUS\n\n\n\nXZMINUS\n\n\n\nYZPLUS\n\n\n\nYZMINUS\n\n\n\nISOMETRIC\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection.html#import-detail","title":"ViewDirection > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection.html#attribute-detail","title":"ViewDirection > Attribute detail","text":"Attribute detail\n\n\n\nViewDirection.XYPLUS = (0, '+xy', (5, 280))\n\n\n\n\n\nViewDirection.XYMINUS = (1, '-xy', (5, 311))\n\n\n\n\n\nViewDirection.XZPLUS = (2, '+xz', (5, 342))\n\n\n\n\n\nViewDirection.XZMINUS = (3, '-xz', (5, 373))\n\n\n\n\n\nViewDirection.YZPLUS = (4, '+yz', (5, 404))\n\n\n\n\n\nViewDirection.YZMINUS = (5, '-yz', (5, 435))\n\n\n\n\n\nViewDirection.ISOMETRIC = (6, 'isometric', (5, 466))\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/color/index.html#the-colorpy-module","title":"The color.py module","text":"The color.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/color/index.html#summary","title":"The color.py module > Summary","text":"Summary\n\nEnums\n\n\n\n\n\nColor\n\nProvides an enum with the color to use for the plotter actors.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/color/index.html#description","title":"The color.py module > Description","text":"Description\n\nProvides an enum with the color to use for the plotter actors."},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/index.html#basic-usage-examples","title":"Basic usage examples","text":"Basic usage examples\n\nThese examples show how to use the general plotter included in the Visualization Interface Tool.\n\nsphx_glr_examples_00-basic-pyvista-examples_remote_trame_view.py\n\nsphx_glr_examples_00-basic-pyvista-examples_qt_backend.py\n\nsphx_glr_examples_00-basic-pyvista-examples_clipping_plane.py\n\nsphx_glr_examples_00-basic-pyvista-examples_using_meshobject.py\n\nsphx_glr_examples_00-basic-pyvista-examples_plain_usage.py\n\nsphx_glr_examples_00-basic-pyvista-examples_picker.py\n\nsphx_glr_examples_00-basic-pyvista-examples_custom_picker.py\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/index.html#the-widgets-package","title":"The widgets package","text":"The widgets package\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/index.html#summary","title":"The widgets package > Summary","text":"Summary\n\nSubmodules\n\n\n\n\n\nbutton\n\nProvides for implementing buttons in PyAnsys.\n\ndark_mode\n\nProvides the dark mode button widget for the PyAnsys plotter.\n\ndisplace_arrows\n\nProvides the displacement arrows widget for the PyVista plotter.\n\nhide_buttons\n\nProvides the hide buttons widget for the PyAnsys plotter.\n\nmeasure\n\nProvides the measure widget for the PyAnsys plotter.\n\nmesh_slider\n\nProvides the measure widget for the PyAnsys plotter.\n\npick_rotation_center\n\nProvides the measure widget for the PyAnsys plotter.\n\nruler\n\nProvides the ruler widget for the Visualization Interface Tool plotter.\n\nscreenshot\n\nProvides the screenshot widget for the Visualization Interface Tool plotter.\n\nview_button\n\nProvides the view button widget for changing the camera view.\n\nwidget\n\nProvides the abstract implementation of plotter widgets.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/index.html#description","title":"The widgets package > Description","text":"Description\n\nProvides widgets for the Visualization Interface Tool plotter."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/color/Color.html#color","title":"Color","text":"Color\n\n\n\nclass ansys.tools.visualization_interface.utils.color.Color(*args, **kwds)\n\nBases: enum.Enum\n\nProvides an enum with the color to use for the plotter actors."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/color/Color.html#overview","title":"Color > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nDEFAULT\n\nDefault color for the plotter actors.\n\nPICKED\n\nColor for the actors that are currently picked.\n\nEDGE\n\nDefault color for the edges.\n\nPICKED_EDGE\n\nColor for the edges that are currently picked."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/color/Color.html#import-detail","title":"Color > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/color/Color.html#attribute-detail","title":"Color > Attribute detail","text":"Attribute detail\n\n\n\nColor.DEFAULT = '#D6F7D1'\n\nDefault color for the plotter actors.\n\n\n\nColor.PICKED = '#BB6EEE'\n\nColor for the actors that are currently picked.\n\n\n\nColor.EDGE = '#000000'\n\nDefault color for the edges.\n\n\n\nColor.PICKED_EDGE = '#9C9C9C'\n\nColor for the edges that are currently picked."},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/using_meshobject.html#use-the-meshobjectplot-class","title":"Use the MeshObjectPlot class","text":"Use the MeshObjectPlot class\n\nThe Visualization Interface Tool provides the MeshObject helper class to relate a custom object\nwith its mesh. With a custom object, you can take advantage of the full potential of the\nVisualization Interface Tool.\n\nThis example shows how to use the MeshObjectPlot class to plot your custom objects."},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/using_meshobject.html#relate-customobject-class-with-a-pyvista-mesh","title":"Use the MeshObjectPlot class > Relate CustomObject class with a PyVista mesh","text":"Relate CustomObject class with a PyVista mesh"},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/using_meshobject.html#create-a-meshobjectplot-instance","title":"Use the MeshObjectPlot class > Create a MeshObjectPlot instance","text":"Create a MeshObjectPlot instance"},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/using_meshobject.html#plot-the-meshobjectplot-instance","title":"Use the MeshObjectPlot class > Plot the MeshObjectPlot instance","text":"Plot the MeshObjectPlot instance\n\nStatic Scene\n\n\n\nInteractive Scene\n\n\n\nTotal running time of the script: (0 minutes 0.380 seconds)\n\n\n\nDownload Jupyter notebook: using_meshobject.ipynb\n\nDownload Python source code: using_meshobject.py\n\nDownload zipped: using_meshobject.zip"},{"objectID":"Home","href":"getting_started/index.html#getting-started","title":"Getting started","text":"Getting started\n\nThis section describes how to install the Visualization Interface Tool in user mode and\nquickly begin using it. If you are interested in contributing to the Visualization Interface Tool,\nsee contribute for information on installing in developer mode."},{"objectID":"Home","href":"getting_started/index.html#installation","title":"Getting started > Installation","text":"Installation\n\nTo use pip to install the Visualization Interface Tool,\nrun this command:\n\nAlternatively, to install the latest version from this library’s\nGitHub repository,\nrun these commands:"},{"objectID":"Home","href":"getting_started/index.html#quick-start","title":"Getting started > Quick start","text":"Quick start\n\nThe following examples show how to use the Visualization Interface Tool to visualize a mesh file.\n\nThis code uses only a PyVista mesh:\n\nThis code uses objects from a PyAnsys library:"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService.html#trameservice","title":"TrameService","text":"TrameService\n\n\n\nclass ansys.tools.visualization_interface.backends.pyvista.trame_service.TrameService(websocket_host: str = 'localhost', websocket_port: int = 8765)\n\nTrame service class.\n\nInitializes a trame service where you can send meshes to plot in a trame webview plotter.\n\nParameters\n\nwebsocket_host\n\npython:str, optional\n\nHost where the webserver will listen for new plotters and meshes, by default “localhost”.\n\nwebsocket_port\n\npython:int, optional\n\nPort where the webserver will listen for new plotters and meshes, by default 8765."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService.html#overview","title":"TrameService > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nclear_plotter\n\nClears the web view in the service.\n\nset_scene\n\nSets the web view scene for the trame service.\n\nrun\n\nStart the trame web view and the websocket services."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService.html#import-detail","title":"TrameService > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService.html#method-detail","title":"TrameService > Method detail","text":"Method detail\n\n\n\nTrameService.clear_plotter()\n\nClears the web view in the service.\n\n\n\nTrameService.set_scene()\n\nSets the web view scene for the trame service.\n\n\n\nTrameService.run()\n\nStart the trame web view and the websocket services."},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/qt_backend.html#use-a-pyvista-qt-backend","title":"Use a PyVista Qt backend","text":"Use a PyVista Qt backend\n\nPyVista Qt is a package that extends the PyVista functionality through the\nusage of Qt. Qt applications operate in a separate thread than VTK, you can\nsimultaneously have an active VTK plot and a non-blocking Python session.\n\nThis example shows how to use the PyVista Qt backend to create a plotter"},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/qt_backend.html#open-a-pyvistaqt-window","title":"Use a PyVista Qt backend > Open a pyvistaqt window","text":"Open a pyvistaqt window"},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/qt_backend.html#parallel-vtk-window","title":"Use a PyVista Qt backend > Parallel VTK window","text":"Parallel VTK window\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/qt_backend.html#close-the-pyvistaqt-window","title":"Use a PyVista Qt backend > Close the pyvistaqt window","text":"Close the pyvistaqt window"},{"objectID":"Home","href":"examples/00-basic-pyvista-examples/qt_backend.html#integrate-the-plotter-in-a-qt-application","title":"Use a PyVista Qt backend > Integrate the plotter in a Qt application","text":"Integrate the plotter in a Qt application\n\nTotal running time of the script: (0 minutes 7.869 seconds)\n\n\n\nDownload Jupyter notebook: qt_backend.ipynb\n\nDownload Python source code: qt_backend.py\n\nDownload zipped: qt_backend.zip"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget.html#measurewidget","title":"MeasureWidget","text":"MeasureWidget\n\n\n\nclass ansys.tools.visualization_interface.backends.pyvista.widgets.measure.MeasureWidget(plotter_helper: ansys.tools.visualization_interface.backends.pyvista.pyvista.Plotter, dark_mode: bool = False)\n\nBases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\n\nProvides the measure widget for the Visualization Interface Tool Plotter class.\n\nParameters\n\nplotter_helper\n\nPlotterHelper\n\nPlotter to add the measure widget to.\n\ndark_mode\n\nbool, optional\n\nWhether to activate the dark mode or not."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget.html#overview","title":"MeasureWidget > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncallback\n\nRemove or add the measurement widget actor upon click.\n\nupdate\n\nDefine the measurement widget button parameters.\n\nAttributes\n\n\n\n\n\nplotter_helper\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget.html#import-detail","title":"MeasureWidget > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget.html#attribute-detail","title":"MeasureWidget > Attribute detail","text":"Attribute detail\n\n\n\nMeasureWidget.plotter_helper\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget.html#method-detail","title":"MeasureWidget > Method detail","text":"Method detail\n\n\n\nMeasureWidget.callback(state: bool) -> None\n\nRemove or add the measurement widget actor upon click.\n\nParameters\n\nstate\n\nbool\n\nWhether the state of the button, which is inherited from PyVista, is active.\n\n\n\nMeasureWidget.update() -> None\n\nDefine the measurement widget button parameters."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/index.html#the-screenshotpy-module","title":"The screenshot.py module","text":"The screenshot.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/index.html#summary","title":"The screenshot.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nScreenshotButton\n\nProvides the screenshot widget for the Visualization Interface Tool Plotter class.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/index.html#description","title":"The screenshot.py module > Description","text":"Description\n\nProvides the screenshot widget for the Visualization Interface Tool plotter."},{"objectID":"Home","href":"examples/index.html#examples","title":"Examples","text":"Examples\n\nThis section show how to use the Visualization Interface Tool to perform many different\ntypes of operations."},{"objectID":"Home","href":"examples/index.html#basic-usage-examples","title":"Examples > Basic usage examples","text":"Basic usage examples\n\nThese examples show how to use the general plotter included in the Visualization Interface Tool.\n\nsphx_glr_examples_00-basic-pyvista-examples_remote_trame_view.py\n\nsphx_glr_examples_00-basic-pyvista-examples_qt_backend.py\n\nsphx_glr_examples_00-basic-pyvista-examples_clipping_plane.py\n\nsphx_glr_examples_00-basic-pyvista-examples_using_meshobject.py\n\nsphx_glr_examples_00-basic-pyvista-examples_plain_usage.py\n\nsphx_glr_examples_00-basic-pyvista-examples_picker.py\n\nsphx_glr_examples_00-basic-pyvista-examples_custom_picker.py"},{"objectID":"Home","href":"examples/index.html#advanced-usage-examples","title":"Examples > Advanced usage examples","text":"Advanced usage examples\n\nThese examples show how to use the Visualization Interface Tool to postprocess simulation data.\n\nsphx_glr_examples_01-advanced-pyansys-examples_using_meshobject_with_field_data.py\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/index.html#the-pyvista_interfacepy-module","title":"The pyvista_interface.py module","text":"The pyvista_interface.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/index.html#summary","title":"The pyvista_interface.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nPyVistaInterface\n\nProvides the middle class between PyVista plotting operations and PyAnsys objects.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/index.html#description","title":"The pyvista_interface.py module > Description","text":"Description\n\nProvides plotting for various PyAnsys objects."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/logger/SingletonType.html#singletontype","title":"SingletonType","text":"SingletonType\n\n\n\nclass ansys.tools.visualization_interface.utils.logger.SingletonType\n\nBases: type\n\nProvides the singleton helper class for the logger."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/logger/SingletonType.html#overview","title":"SingletonType > Overview","text":"Overview\n\nSpecial methods\n\n\n\n\n\n__call__\n\nCall to redirect new instances to the singleton instance."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/logger/SingletonType.html#import-detail","title":"SingletonType > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/utils/logger/SingletonType.html#method-detail","title":"SingletonType > Method detail","text":"Method detail\n\n\n\nSingletonType.__call__(*args, **kwargs)\n\nCall to redirect new instances to the singleton instance."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/plotter/index.html#the-plotterpy-module","title":"The plotter.py module","text":"The plotter.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/plotter/index.html#summary","title":"The plotter.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nPlotter\n\nBase plotting class containing common methods and attributes.\n\n"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/plotter/index.html#description","title":"The plotter.py module > Description","text":"Description\n\nModule for the Plotter class."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#pyvistainterface","title":"PyVistaInterface","text":"PyVistaInterface\n\n\n\nclass ansys.tools.visualization_interface.backends.pyvista.pyvista_interface.PyVistaInterface(scene: pyvista.Plotter | None = None, color_opts: Dict | None = None, num_points: int = 100, enable_widgets: bool = True, show_plane: bool = False, use_qt: bool = False, show_qt: bool = True, **plotter_kwargs)\n\nProvides the middle class between PyVista plotting operations and PyAnsys objects.\n\nThe main purpose of this class is to simplify interaction between PyVista and the PyVista backend\nprovided. This class is responsible for creating the PyVista scene and adding\nthe PyAnsys objects to it.\n\nParameters\n\nscene\n\nPlotter, default: python:None\n\nScene for rendering the objects. If passed, off_screen needs to\nbe set manually beforehand for documentation and testing.\n\ncolor_opts\n\npython:dict, default: python:None\n\nDictionary containing the background and top colors.\n\nnum_points\n\npython:int, default: 100\n\nNumber of points to use to render the shapes.\n\nenable_widgets\n\nbool, default: python:True\n\nWhether to enable widget buttons in the plotter window.\nWidget buttons must be disabled when using\ntrame\nfor visualization.\n\nshow_plane\n\nbool, default: python:False\n\nWhether to show the XY plane in the plotter window.\n\nuse_qt\n\nbool, default: python:False\n\nWhether to use the Qt backend for the plotter window.\n\nshow_qt\n\nbool, default: python:True\n\nWhether to show the Qt plotter window."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#overview","title":"PyVistaInterface > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nview_xy\n\nView the scene from the XY plane.\n\nview_xz\n\nView the scene from the XZ plane.\n\nview_yx\n\nView the scene from the YX plane.\n\nview_yz\n\nView the scene from the YZ plane.\n\nview_zx\n\nView the scene from the ZX plane.\n\nview_zy\n\nView the scene from the ZY plane.\n\nclip\n\nClip a given mesh with a plane.\n\nplot_meshobject\n\nPlot a generic MeshObjectPlot object to the scene.\n\nplot_edges\n\nPlot the outer edges of an object to the plot.\n\nplot\n\nPlot any type of object to the scene.\n\nplot_iter\n\nPlot elements of an iterable of any type of objects to the scene.\n\nshow\n\nShow the rendered scene on the screen.\n\nset_add_mesh_defaults\n\nSet the default values for the plotting options.\n\nProperties\n\n\n\n\n\nscene\n\nRendered scene object.\n\nobject_to_actors_map\n\nMapping between the PyVista actor and the PyAnsys objects."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#import-detail","title":"PyVistaInterface > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#property-detail","title":"PyVistaInterface > Property detail","text":"Property detail\n\n\n\nproperty PyVistaInterface.scene: pyvista.plotting.plotter.Plotter\n\nRendered scene object.\n\nReturns\n\nPlotter\n\nRendered scene object.\n\n\n\nproperty PyVistaInterface.object_to_actors_map: Dict[pyvista.Actor, ansys.tools.visualization_interface.types.mesh_object_plot.MeshObjectPlot]\n\nMapping between the PyVista actor and the PyAnsys objects."},{"objectID":"Home","href":"api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#method-detail","title":"PyVistaInterface > Method detail","text":"Method detail\n\n\n\nPyVistaInterface.view_xy() -> None\n\nView the scene from the XY plane.\n\n\n\nPyVistaInterface.view_xz() -> None\n\nView the scene from the XZ plane.\n\n\n\nPyVistaInterface.view_yx() -> None\n\nView the scene from the YX plane.\n\n\n\nPyVistaInterface.view_yz() -> None\n\nView the scene from the YZ plane.\n\n\n\nPyVistaInterface.view_zx() -> None\n\nView the scene from the ZX plane.\n\n\n\nPyVistaInterface.view_zy() -> None\n\nView the scene from the ZY plane.\n\n\n\nPyVistaInterface.clip(mesh: pyvista.PolyData | pyvista.MultiBlock | pyvista.UnstructuredGrid, plane: ansys.tools.visualization_interface.utils.clip_plane.ClipPlane) -> pyvista.PolyData | pyvista.MultiBlock\n\nClip a given mesh with a plane.\n\nParameters\n\nmesh\n\nUnion[pv.PolyData, pv.MultiBlock]\n\nMesh.\n\nnormal\n\npython:str, default: “x”\n\nPlane to use for clipping. Options are \"x\", \"-x\",\n\"y\", \"-y\", \"z\", and \"-z\".\n\norigin\n\npython:tuple, default: python:None\n\nOrigin point of the plane.\n\nplane\n\nClipPlane, default: python:None\n\nClipping plane to cut the mesh with.\n\nReturns\n\nUnion[pv.PolyData,pv.MultiBlock]\n\nClipped mesh.\n\n\n\nPyVistaInterface.plot_meshobject(custom_object: ansys.tools.visualization_interface.types.mesh_object_plot.MeshObjectPlot, **plotting_options)\n\nPlot a generic MeshObjectPlot object to the scene.\n\nParameters\n\nplottable_object\n\nMeshObjectPlot\n\nObject to add to the scene.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n\n\nPyVistaInterface.plot_edges(custom_object: ansys.tools.visualization_interface.types.mesh_object_plot.MeshObjectPlot, **plotting_options) -> None\n\nPlot the outer edges of an object to the plot.\n\nThis method has the side effect of adding the edges to the MeshObjectPlot\nobject that you pass through the parameters.\n\nParameters\n\ncustom_object\n\nMeshObjectPlot\n\nCustom object with the edges to add.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n\n\nPyVistaInterface.plot(plottable_object: pyvista.PolyData | pyvista.MultiBlock | ansys.tools.visualization_interface.types.mesh_object_plot.MeshObjectPlot | pyvista.UnstructuredGrid, name_filter: str = None, **plotting_options) -> None\n\nPlot any type of object to the scene.\n\nSupported object types are List[pv.PolyData], MeshObjectPlot,\nand pv.MultiBlock.\n\nParameters\n\nplottable_object\n\nUnion[pv.PolyData, pv.MultiBlock, MeshObjectPlot, pv.UnstructuredGrid, pv.StructuredGrid]\n\nObject to plot.\n\nname_filter\n\npython:str, default: python:None\n\nRegular expression with the desired name or names to include in the plotter.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n\n\nPyVistaInterface.plot_iter(plotting_list: List[Any], name_filter: str = None, **plotting_options) -> None\n\nPlot elements of an iterable of any type of objects to the scene.\n\nParameters\n\nplotting_list\n\nList[Any]\n\nList of objects to plot.\n\nname_filter\n\npython:str, default: python:None\n\nRegular expression with the desired name or names to include in the plotter.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n\n\nPyVistaInterface.show(show_plane: bool = False, jupyter_backend: str | None = None, **kwargs: Dict | None) -> None\n\nShow the rendered scene on the screen.\n\nParameters\n\nshow_plane\n\nbool, default: python:True\n\nWhether to show the XY plane.\n\njupyter_backend\n\npython:str, default: python:None\n\nPyVista Jupyter backend.\n\n**kwargs\n\npython:dict, default: python:None\n\nPlotting and show keyword arguments. For allowable keyword arguments, see the\nPlotter.show and\nPlotter.show methods.\n\nNotes\n\nFor more information on supported Jupyter backends, see\nJupyter Notebook Plotting\nin the PyVista documentation.\n\n\n\nPyVistaInterface.set_add_mesh_defaults(plotting_options: Dict | None) -> None\n\nSet the default values for the plotting options.\n\nParameters\n\nplotting_options\n\nOptional[Dict]\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method."}]