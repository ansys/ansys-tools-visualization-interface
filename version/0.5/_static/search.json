[
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/index.html#the-widgets-package",
        "title": "The widgets package",
        "section": "The widgets package",
        "text": "button\nProvides for implementing buttons in PyAnsys.\ndisplace_arrows\nProvides the displacement arrows widget for the PyVista plotter.\nhide_buttons\nProvides the hide buttons widget for the PyAnsys plotter.\nmeasure\nProvides the measure widget for the PyAnsys plotter.\nmesh_slider\nProvides the measure widget for the PyAnsys plotter.\nruler\nProvides the ruler widget for the Visualization Interface Tool plotter.\nscreenshot\nProvides the screenshot widget for the Visualization Interface Tool plotter.\nview_button\nProvides the view button widget for changing the camera view.\nwidget\nProvides the abstract implementation of plotter widgets.\nProvides widgets for the Visualization Interface Tool plotter."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/index.html#summary",
        "title": "The widgets package > Summary",
        "section": "Summary",
        "text": "button\nProvides for implementing buttons in PyAnsys.\ndisplace_arrows\nProvides the displacement arrows widget for the PyVista plotter.\nhide_buttons\nProvides the hide buttons widget for the PyAnsys plotter.\nmeasure\nProvides the measure widget for the PyAnsys plotter.\nmesh_slider\nProvides the measure widget for the PyAnsys plotter.\nruler\nProvides the ruler widget for the Visualization Interface Tool plotter.\nscreenshot\nProvides the screenshot widget for the Visualization Interface Tool plotter.\nview_button\nProvides the view button widget for changing the camera view.\nwidget\nProvides the abstract implementation of plotter widgets."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/index.html#description",
        "title": "The widgets package > Description",
        "section": "Description",
        "text": "Provides widgets for the Visualization Interface Tool plotter."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection.html#viewdirection",
        "title": "ViewDirection",
        "section": "ViewDirection",
        "text": "Bases: enum.Enum\nProvides an enum with the available views.\nXYPLUS\nXYMINUS\nXZPLUS\nXZMINUS\nYZPLUS\nYZMINUS\nISOMETRIC\nfrom ansys.tools.visualization_interface.backends.pyvista.widgets.view_button import ViewDirection"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection.html#overview",
        "title": "ViewDirection > Overview",
        "section": "Overview",
        "text": "XYPLUS\nXYMINUS\nXZPLUS\nXZMINUS\nYZPLUS\nYZMINUS\nISOMETRIC"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection.html#import-detail",
        "title": "ViewDirection > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.backends.pyvista.widgets.view_button import ViewDirection"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewDirection.html#attribute-detail",
        "title": "ViewDirection > Attribute detail",
        "section": "Attribute detail",
        "text": ""
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/index",
        "href": "api/ansys/tools/visualization_interface/utils/index.html#the-utils-package",
        "title": "The utils package",
        "section": "The utils package",
        "text": "clip_plane\nProvides the ClipPlane class.\ncolor\nProvides an enum with the color to use for the plotter actors.\nlogger\nProvides the singleton helper class for the logger.\nProvides the Utils package."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/index",
        "href": "api/ansys/tools/visualization_interface/utils/index.html#summary",
        "title": "The utils package > Summary",
        "section": "Summary",
        "text": "clip_plane\nProvides the ClipPlane class.\ncolor\nProvides an enum with the color to use for the plotter actors.\nlogger\nProvides the singleton helper class for the logger."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/index",
        "href": "api/ansys/tools/visualization_interface/utils/index.html#description",
        "title": "The utils package > Description",
        "section": "Description",
        "text": "Provides the Utils package."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/index",
        "href": "api/ansys/tools/visualization_interface/utils/logger/index.html#the-loggerpy-module",
        "title": "The logger.py module",
        "section": "The logger.py module",
        "text": "SingletonType\nProvides the singleton helper class for the logger.\nVizLogger\nProvides the singleton logger for the visualizer.\nlogger\nProvides the singleton helper class for the logger."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/index",
        "href": "api/ansys/tools/visualization_interface/utils/logger/index.html#summary",
        "title": "The logger.py module > Summary",
        "section": "Summary",
        "text": "SingletonType\nProvides the singleton helper class for the logger.\nVizLogger\nProvides the singleton logger for the visualizer.\nlogger"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/index",
        "href": "api/ansys/tools/visualization_interface/utils/logger/index.html#description",
        "title": "The logger.py module > Description",
        "section": "Description",
        "text": "Provides the singleton helper class for the logger."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/index",
        "href": "api/ansys/tools/visualization_interface/utils/logger/index.html#module-detail",
        "title": "The logger.py module > Module detail",
        "section": "Module detail",
        "text": ""
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/edge_plot/index",
        "href": "api/ansys/tools/visualization_interface/types/edge_plot/index.html#the-edge_plotpy-module",
        "title": "The edge_plot.py module",
        "section": "The edge_plot.py module",
        "text": "EdgePlot\nProvides the mapper class for relating PyAnsys object edges with its PyVista actor.\nProvides the edge type for plotting."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/edge_plot/index",
        "href": "api/ansys/tools/visualization_interface/types/edge_plot/index.html#summary",
        "title": "The edge_plot.py module > Summary",
        "section": "Summary",
        "text": "EdgePlot\nProvides the mapper class for relating PyAnsys object edges with its PyVista actor."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/edge_plot/index",
        "href": "api/ansys/tools/visualization_interface/types/edge_plot/index.html#description",
        "title": "The edge_plot.py module > Description",
        "section": "Description",
        "text": "Provides the edge type for plotting."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/index",
        "href": "api/ansys/tools/visualization_interface/types/index.html#the-types-package",
        "title": "The types package",
        "section": "The types package",
        "text": "edge_plot\nProvides the edge type for plotting.\nmesh_object_plot\nProvides the MeshObjectPlot class.\nProvides custom types."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/index",
        "href": "api/ansys/tools/visualization_interface/types/index.html#summary",
        "title": "The types package > Summary",
        "section": "Summary",
        "text": "edge_plot\nProvides the edge type for plotting.\nmesh_object_plot\nProvides the MeshObjectPlot class."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/index",
        "href": "api/ansys/tools/visualization_interface/types/index.html#description",
        "title": "The types package > Description",
        "section": "Description",
        "text": "Provides custom types."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/SingletonType",
        "href": "api/ansys/tools/visualization_interface/utils/logger/SingletonType.html#singletontype",
        "title": "SingletonType",
        "section": "SingletonType",
        "text": "Bases: type\nProvides the singleton helper class for the logger.\n__call__\nCall to redirect new instances to the singleton instance.\nCall to redirect new instances to the singleton instance.\nfrom ansys.tools.visualization_interface.utils.logger import SingletonType"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/SingletonType",
        "href": "api/ansys/tools/visualization_interface/utils/logger/SingletonType.html#overview",
        "title": "SingletonType > Overview",
        "section": "Overview",
        "text": "__call__\nCall to redirect new instances to the singleton instance."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/SingletonType",
        "href": "api/ansys/tools/visualization_interface/utils/logger/SingletonType.html#import-detail",
        "title": "SingletonType > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.utils.logger import SingletonType"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/SingletonType",
        "href": "api/ansys/tools/visualization_interface/utils/logger/SingletonType.html#method-detail",
        "title": "SingletonType > Method detail",
        "section": "Method detail",
        "text": "Call to redirect new instances to the singleton instance."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/index.html#the-pyvista-package",
        "title": "The pyvista package",
        "section": "The pyvista package",
        "text": "widgets\nProvides widgets for the Visualization Interface Tool plotter.\npyvista\nProvides a wrapper to aid in plotting.\npyvista_interface\nProvides plotting for various PyAnsys objects.\ntrame_local\nProvides trame visualizer interface for visualization.\ntrame_remote\nModule for trame websocket client functions.\ntrame_service\nTrame service module.\nProvides interfaces."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/index.html#summary",
        "title": "The pyvista package > Summary",
        "section": "Summary",
        "text": "widgets\nProvides widgets for the Visualization Interface Tool plotter.\npyvista\nProvides a wrapper to aid in plotting.\npyvista_interface\nProvides plotting for various PyAnsys objects.\ntrame_local\nProvides trame visualizer interface for visualization.\ntrame_remote\nModule for trame websocket client functions.\ntrame_service\nTrame service module."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/index.html#description",
        "title": "The pyvista package > Description",
        "section": "Description",
        "text": "Provides interfaces."
    },
    {
        "objectID": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data",
        "href": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#postprocessing-simulation-results-using-the-meshobjectplot-class",
        "title": "Postprocessing simulation results using the MeshObjectPlot class",
        "section": "Postprocessing simulation results using the MeshObjectPlot class",
        "text": "The Visualization Interface Tool provides the MeshObject helper class to relate a custom object.\nWith a custom object, you can take advantage of the full potential of the Visualization Interface Tool.\nThis example shows how to use the MeshObjectPlot class to plot your custom objects with scalar data on mesh.\nA VTK dataset can be produced utilizing PyDPF\nfor Ansys Flagship products simulations results file format.\nNote that the CustomObject class must have a way to get the mesh\nand a name or ID.\nTotal running time of the script: (0 minutes 6.318 seconds)\nDownload Jupyter notebook: using_meshobject_with_field_data.ipynb\nDownload Python source code: using_meshobject_with_field_data.py\nDownload zipped: using_meshobject_with_field_data.zip\nfrom ansys.fluent.core import examples\nimport pyvista as pv\n\nfrom ansys.tools.visualization_interface.backends.pyvista import PyVistaBackend\nfrom ansys.tools.visualization_interface import MeshObjectPlot, Plotter\nmixing_elbow_file_src = examples.download_file(\"mixing_elbow.vtk\", \"result_files/fluent-mixing_elbow_steady-state\")\nclass CustomObject:\n    def __init__(self):\n        self.name = \"CustomObject\"\n        self.mesh = pv.read(mixing_elbow_file_src)\n\n    def get_mesh(self):\n        return self.mesh\n\n    def get_field_array_info(self):\n        return self.mesh.array_names\n\n    def name(self):\n        return self.name\n\n\n# Create a custom object\ncustom_vtk = CustomObject()\nmesh_object = MeshObjectPlot(custom_vtk, custom_vtk.get_mesh())\n\n# Define the camera position\ncpos = (\n    (-0.3331763564757694, 0.08802797061044923, -1.055269197114142),\n    (0.08813476356878325, -0.03975174212669032, -0.012819952697089087),\n    (0.045604530283921085, 0.9935979348314435, 0.10336039239608838),\n)\nfield_data_arrays = custom_vtk.get_field_array_info()\nprint(f\"Field data arrays: {field_data_arrays}\")\nField data arrays: [\"Velocity {'time': 1, 'zone': 87}\", \"Temperature {'time': 1, 'zone': 87}\"]\npv_backend = PyVistaBackend()\npl = Plotter(backend=pv_backend)\npl.plot(\n    mesh_object,\n    scalars=field_data_arrays[0],\n    show_edges=True,\n    show_scalar_bar=True,\n)\npl._backend.pv_interface.scene.camera_position = cpos\npl.show()\npv_backend = PyVistaBackend()\npl = Plotter(backend=pv_backend)\npl.plot(\n    mesh_object,\n    scalars=field_data_arrays[1],\n    show_edges=True,\n    show_scalar_bar=True,\n)\npl._backend.pv_interface.scene.camera_position = cpos\npl.show()"
    },
    {
        "objectID": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data",
        "href": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#necessary-imports",
        "title": "Postprocessing simulation results using the MeshObjectPlot class > Necessary imports",
        "section": "Necessary imports",
        "text": "from ansys.fluent.core import examples\nimport pyvista as pv\n\nfrom ansys.tools.visualization_interface.backends.pyvista import PyVistaBackend\nfrom ansys.tools.visualization_interface import MeshObjectPlot, Plotter"
    },
    {
        "objectID": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data",
        "href": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#download-the-vtk-file",
        "title": "Postprocessing simulation results using the MeshObjectPlot class > Download the VTK file",
        "section": "Download the VTK file",
        "text": "A VTK dataset can be produced utilizing PyDPF\nfor Ansys Flagship products simulations results file format.\nmixing_elbow_file_src = examples.download_file(\"mixing_elbow.vtk\", \"result_files/fluent-mixing_elbow_steady-state\")"
    },
    {
        "objectID": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data",
        "href": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#define-a-custom-object-class",
        "title": "Postprocessing simulation results using the MeshObjectPlot class > Define a custom object class",
        "section": "Define a custom object class",
        "text": "Note that the CustomObject class must have a way to get the mesh\nand a name or ID.\nclass CustomObject:\n    def __init__(self):\n        self.name = \"CustomObject\"\n        self.mesh = pv.read(mixing_elbow_file_src)\n\n    def get_mesh(self):\n        return self.mesh\n\n    def get_field_array_info(self):\n        return self.mesh.array_names\n\n    def name(self):\n        return self.name\n\n\n# Create a custom object\ncustom_vtk = CustomObject()"
    },
    {
        "objectID": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data",
        "href": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#create-a-meshobjectplot-instance",
        "title": "Postprocessing simulation results using the MeshObjectPlot class > Create a MeshObjectPlot instance",
        "section": "Create a MeshObjectPlot instance",
        "text": "mesh_object = MeshObjectPlot(custom_vtk, custom_vtk.get_mesh())\n\n# Define the camera position\ncpos = (\n    (-0.3331763564757694, 0.08802797061044923, -1.055269197114142),\n    (0.08813476356878325, -0.03975174212669032, -0.012819952697089087),\n    (0.045604530283921085, 0.9935979348314435, 0.10336039239608838),\n)"
    },
    {
        "objectID": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data",
        "href": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#get-the-available-field-data-arrays",
        "title": "Postprocessing simulation results using the MeshObjectPlot class > Get the available field data arrays",
        "section": "Get the available field data arrays",
        "text": "field_data_arrays = custom_vtk.get_field_array_info()\nprint(f\"Field data arrays: {field_data_arrays}\")\nField data arrays: [\"Velocity {'time': 1, 'zone': 87}\", \"Temperature {'time': 1, 'zone': 87}\"]"
    },
    {
        "objectID": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data",
        "href": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#plot-the-meshobjectplot-instance-with-mesh-object--field-data-0",
        "title": "Postprocessing simulation results using the MeshObjectPlot class > Plot the MeshObjectPlot instance with mesh object & field data (0)",
        "section": "Plot the MeshObjectPlot instance with mesh object & field data (0)",
        "text": "pv_backend = PyVistaBackend()\npl = Plotter(backend=pv_backend)\npl.plot(\n    mesh_object,\n    scalars=field_data_arrays[0],\n    show_edges=True,\n    show_scalar_bar=True,\n)\npl._backend.pv_interface.scene.camera_position = cpos\npl.show()"
    },
    {
        "objectID": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data",
        "href": "examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.html#plot-the-meshobjectplot-instance-with-mesh-object--other-field-data-1",
        "title": "Postprocessing simulation results using the MeshObjectPlot class > Plot the MeshObjectPlot instance with mesh object & other field data (1)",
        "section": "Plot the MeshObjectPlot instance with mesh object & other field data (1)",
        "text": "Total running time of the script: (0 minutes 6.318 seconds)\nDownload Jupyter notebook: using_meshobject_with_field_data.ipynb\nDownload Python source code: using_meshobject_with_field_data.py\nDownload zipped: using_meshobject_with_field_data.zip\npv_backend = PyVistaBackend()\npl = Plotter(backend=pv_backend)\npl.plot(\n    mesh_object,\n    scalars=field_data_arrays[1],\n    show_edges=True,\n    show_scalar_bar=True,\n)\npl._backend.pv_interface.scene.camera_position = cpos\npl.show()"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/color/index",
        "href": "api/ansys/tools/visualization_interface/utils/color/index.html#the-colorpy-module",
        "title": "The color.py module",
        "section": "The color.py module",
        "text": "Color\nProvides an enum with the color to use for the plotter actors.\nProvides an enum with the color to use for the plotter actors."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/color/index",
        "href": "api/ansys/tools/visualization_interface/utils/color/index.html#summary",
        "title": "The color.py module > Summary",
        "section": "Summary",
        "text": "Color\nProvides an enum with the color to use for the plotter actors."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/color/index",
        "href": "api/ansys/tools/visualization_interface/utils/color/index.html#description",
        "title": "The color.py module > Description",
        "section": "Description",
        "text": "Provides an enum with the color to use for the plotter actors."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/index.html#the-pyvistapy-module",
        "title": "The pyvista.py module",
        "section": "The pyvista.py module",
        "text": "PyVistaBackendInterface\nProvides the interface for the Visualization Interface Tool plotter.\nPyVistaBackend\nProvides the generic plotter implementation for PyAnsys libraries.\nProvides a wrapper to aid in plotting."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/index.html#summary",
        "title": "The pyvista.py module > Summary",
        "section": "Summary",
        "text": "PyVistaBackendInterface\nProvides the interface for the Visualization Interface Tool plotter.\nPyVistaBackend\nProvides the generic plotter implementation for PyAnsys libraries."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/index.html#description",
        "title": "The pyvista.py module > Description",
        "section": "Description",
        "text": "Provides a wrapper to aid in plotting."
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/plain_usage",
        "href": "examples/00-basic-pyvista-examples/plain_usage.html#use-the-plotter",
        "title": "Use the plotter",
        "section": "Use the plotter",
        "text": "This example shows how to add one or more meshes to the plotter.\nThis code shows how to add a single mesh to the plotter.\nNow we will check how to get a screenshot from our plotter.\nThis code shows how to add a list of meshes to the plotter.\nTotal running time of the script: (0 minutes 1.039 seconds)\nDownload Jupyter notebook: plain_usage.ipynb\nDownload Python source code: plain_usage.py\nDownload zipped: plain_usage.zip\nimport pyvista as pv\n\nfrom ansys.tools.visualization_interface import Plotter\n\nmesh = pv.Cube()\n\n# Create a plotter\npl = Plotter()\n\n# Add the mesh to the plotter\npl.plot(mesh)\n\n# Show the plotter\npl.show()\nimport pyvista as pv\n\nfrom ansys.tools.visualization_interface import Plotter\n\nmesh = pv.Cube()\n\n# Create a plotter\npl = Plotter()\n\n# Add the mesh to the plotter\npl.plot(mesh)\n\n# Show the plotter\npl.show(screenshot=\"screenshot.png\")\nimport pyvista as pv\n\nfrom ansys.tools.visualization_interface import Plotter\n\nmesh1 = pv.Cube()\nmesh2 = pv.Sphere(center=(2, 0, 0))\nmesh_list = [mesh1, mesh2]\n# Create a plotter\npl = Plotter()\n\n# Add a list of meshes to the plotter\npl.plot(mesh_list)\n\n# Show the plotter\npl.show()"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/plain_usage",
        "href": "examples/00-basic-pyvista-examples/plain_usage.html#add-a-mesh-to-the-plotter",
        "title": "Use the plotter > Add a mesh to the plotter",
        "section": "Add a mesh to the plotter",
        "text": "This code shows how to add a single mesh to the plotter.\nimport pyvista as pv\n\nfrom ansys.tools.visualization_interface import Plotter\n\nmesh = pv.Cube()\n\n# Create a plotter\npl = Plotter()\n\n# Add the mesh to the plotter\npl.plot(mesh)\n\n# Show the plotter\npl.show()"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/plain_usage",
        "href": "examples/00-basic-pyvista-examples/plain_usage.html#getting-a-screenshot",
        "title": "Use the plotter > Getting a screenshot",
        "section": "Getting a screenshot",
        "text": "Now we will check how to get a screenshot from our plotter.\nimport pyvista as pv\n\nfrom ansys.tools.visualization_interface import Plotter\n\nmesh = pv.Cube()\n\n# Create a plotter\npl = Plotter()\n\n# Add the mesh to the plotter\npl.plot(mesh)\n\n# Show the plotter\npl.show(screenshot=\"screenshot.png\")"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/plain_usage",
        "href": "examples/00-basic-pyvista-examples/plain_usage.html#add-a-list-of-meshes",
        "title": "Use the plotter > Add a list of meshes",
        "section": "Add a list of meshes",
        "text": "This code shows how to add a list of meshes to the plotter.\nTotal running time of the script: (0 minutes 1.039 seconds)\nDownload Jupyter notebook: plain_usage.ipynb\nDownload Python source code: plain_usage.py\nDownload zipped: plain_usage.zip\nimport pyvista as pv\n\nfrom ansys.tools.visualization_interface import Plotter\n\nmesh1 = pv.Cube()\nmesh2 = pv.Sphere(center=(2, 0, 0))\nmesh_list = [mesh1, mesh2]\n# Create a plotter\npl = Plotter()\n\n# Add a list of meshes to the plotter\npl.plot(mesh_list)\n\n# Show the plotter\npl.show()"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/sg_execution_times",
        "href": "examples/00-basic-pyvista-examples/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:03.537 total execution time for 5 files from examples/00-basic-pyvista-examples:\nExample\nTime\nMem (MB)\nsphx_glr_examples_00-basic-pyvista-examples_clipping_plane.py (clipping_plane.py)\n00:01.212\n0.0\nsphx_glr_examples_00-basic-pyvista-examples_plain_usage.py (plain_usage.py)\n00:01.039\n0.0\nsphx_glr_examples_00-basic-pyvista-examples_picker.py (picker.py)\n00:00.842\n0.0\nsphx_glr_examples_00-basic-pyvista-examples_using_meshobject.py (using_meshobject.py)\n00:00.443\n0.0\nsphx_glr_examples_00-basic-pyvista-examples_remote_trame_view.py (remote_trame_view.py)\n00:00.000\n0.0"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget.html#plotterwidget",
        "title": "PlotterWidget",
        "section": "PlotterWidget",
        "text": "Bases: abc.ABC\nProvides an abstract class for plotter widgets.\nPlotter instance to add the widget to.\nThese widgets are intended to be used with PyVista plotter objects.\nMore specifically, the way in which this abstraction has been built\nensures that these widgets can be easily integrated with the Visualization Interface\nTool’s widgets.\ncallback\nGeneral callback function for PlotterWidget objects.\nupdate\nGeneral update function for PlotterWidget objects.\nplotter\nPlotter object that the widget is assigned to.\nPlotter object that the widget is assigned to.\nGeneral callback function for PlotterWidget objects.\nGeneral update function for PlotterWidget objects.\nfrom ansys.tools.visualization_interface.backends.pyvista.widgets.widget import PlotterWidget"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget.html#overview",
        "title": "PlotterWidget > Overview",
        "section": "Overview",
        "text": "callback\nGeneral callback function for PlotterWidget objects.\nupdate\nGeneral update function for PlotterWidget objects.\nplotter\nPlotter object that the widget is assigned to."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget.html#import-detail",
        "title": "PlotterWidget > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.backends.pyvista.widgets.widget import PlotterWidget"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget.html#property-detail",
        "title": "PlotterWidget > Property detail",
        "section": "Property detail",
        "text": "Plotter object that the widget is assigned to."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/PlotterWidget.html#method-detail",
        "title": "PlotterWidget > Method detail",
        "section": "Method detail",
        "text": "General callback function for PlotterWidget objects.\nGeneral update function for PlotterWidget objects."
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/remote_trame_view",
        "href": "examples/00-basic-pyvista-examples/remote_trame_view.html#use-trame-as-a-remote-service",
        "title": "Use trame as a remote service",
        "section": "Use trame as a remote service",
        "text": "This example shows how to launch a trame service and use it as a remote service.\nFirst, we need to launch the trame service. We can do this by running the following code:\nNow, we can send meshes and plotter to the trame service. We can do this by running the following code in a separate terminal:\nTotal running time of the script: (0 minutes 0.000 seconds)\nDownload Jupyter notebook: remote_trame_view.ipynb\nDownload Python source code: remote_trame_view.py\nDownload zipped: remote_trame_view.zip\n# import required libraries\nfrom ansys.tools.visualization_interface.backends.pyvista.trame_service import (\n    TrameService,\n)\n\n# create a trame service, in whatever port is available in your system\nts = TrameService(websocket_port=8765)\n\n# run the service\nts.run()\n# import required libraries\nimport time\n\nimport pyvista as pv\n\nfrom ansys.tools.visualization_interface.backends.pyvista.trame_remote import (\n    send_mesh,\n    send_pl,\n)\n\n# create an example plotter\nplotter = pv.Plotter()\nplotter.add_mesh(pv.Cube())\n\n# send some example meshes\nsend_mesh(pv.Sphere())\nsend_mesh(pv.Sphere(center=(3, 0, 0)))\ntime.sleep(4)\n\n# if we send a plotter, the previous meshes will be deleted.\nsend_pl(plotter)"
    },
    {
        "objectID": "examples/01-advanced-pyansys-examples/sg_execution_times",
        "href": "examples/01-advanced-pyansys-examples/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:06.318 total execution time for 1 file from examples/01-advanced-pyansys-examples:\nExample\nTime\nMem (MB)\nsphx_glr_examples_01-advanced-pyansys-examples_using_meshobject_with_field_data.py (using_meshobject_with_field_data.py)\n00:06.318\n0.0"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#user-guide",
        "title": "User guide",
        "section": "User guide",
        "text": "This section explains key concepts for implementing the Visualization Interface Tool in your workflow.\nYou can use the Visualization Interface Tool in your examples as well as integrate this library into\nyour own code.\nThe Visualization Interface Tool provides a default plotter that can be used out of the box, using the PyVista backend. This default\nplotter provides common functionalities so that you do not need to create a custom plotter.\nYou can use the default plotter to plot simple PyVista meshes. This code shows how to\nuse it to visualize a simple PyVista mesh:\nYou can also use the default plotter to visualize PyAnsys custom objects. The only requirement is that the\ncustom object must have a method that returns a PyVista mesh a method that exposes a name or\nid attribute of your object. To expose a custom object, you use a MeshObjectPlot instance. This class\nrelates PyVista meshes with any object.\nThe following code shows how to use the default plotter to visualize a PyAnsys custom object:\nThe Visualization Interface Tool provides a base class, PlotterInterface, for customizing certain functions\nof the plotter. This class provides a set of methods that can be overridden so that you can adapt the\nplotter to the specific need of your PyAnsys library.\nThe first thing you must do is to create a class that inherits from the PlotterInterface\nclass. After that, see these main use cases for customizing the plotter:\nThe most common use case is to customize the way that the objects you represent are shown in the plotter.\nTo this end, you can override the plot and plot_iter methods. These methods are called every time\na new object is added to the plotter. The default implementation of this method is to add a PyVista mesh\nor a  MeshObjectPlot instance to the plotter. You can override this method to add your own meshes or\nobjects to the plotter in a manner that fits the way that you want to represent the meshes.\nAnother use case is the need to have custom button functionalities for your library. For example, you may\nwant buttons for hiding or showing certain objects. To add custom buttons to the plotter, you use the\nimplementable interface provided by the PlotterWidget class.\nSome practical examples of how to use the PlotterInterface class are included in some PyAnsys libraries,\nsuch as PyAnsys Geometry.\n## Usage example with pyvista meshes ##\n\nimport pyvista as pv\nfrom ansys.tools.visualization_interface import Plotter\n\n# Create a pyvista mesh\nmesh = pv.Cube()\n\n# Create a plotter\npl = Plotter()\n\n# Add the mesh to the plotter\npl.plot(mesh)\n\n# Show the plotter\npl.show()\n## Usage example with PyAnsys custom objects ##\n\nfrom ansys.tools.visualization_interface import Plotter\nfrom ansys.tools.visualization_interface import MeshObjectPlot\n\n\n# Create a custom object for this example\nclass CustomObject:\n    def __init__(self):\n        self.name = \"CustomObject\"\n        self.mesh = pv.Cube()\n\n    def get_mesh(self):\n        return self.mesh\n\n    def name(self):\n        return self.name\n\n\ncustom_object = CustomObject()\n\n# Create a MeshObjectPlot instance\nmesh_object = MeshObjectPlot(custom_object, custom_object.get_mesh())\n\n# Create a plotter\npl = Plotter()\n\n# Add the MeshObjectPlot instance to the plotter\npl.plot(mesh_object)\n\n# Show the plotter\npl.show()"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#default-plotter-usage",
        "title": "User guide > Default plotter usage",
        "section": "Default plotter usage",
        "text": "The Visualization Interface Tool provides a default plotter that can be used out of the box, using the PyVista backend. This default\nplotter provides common functionalities so that you do not need to create a custom plotter.\nYou can use the default plotter to plot simple PyVista meshes. This code shows how to\nuse it to visualize a simple PyVista mesh:\nYou can also use the default plotter to visualize PyAnsys custom objects. The only requirement is that the\ncustom object must have a method that returns a PyVista mesh a method that exposes a name or\nid attribute of your object. To expose a custom object, you use a MeshObjectPlot instance. This class\nrelates PyVista meshes with any object.\nThe following code shows how to use the default plotter to visualize a PyAnsys custom object:\n## Usage example with pyvista meshes ##\n\nimport pyvista as pv\nfrom ansys.tools.visualization_interface import Plotter\n\n# Create a pyvista mesh\nmesh = pv.Cube()\n\n# Create a plotter\npl = Plotter()\n\n# Add the mesh to the plotter\npl.plot(mesh)\n\n# Show the plotter\npl.show()\n## Usage example with PyAnsys custom objects ##\n\nfrom ansys.tools.visualization_interface import Plotter\nfrom ansys.tools.visualization_interface import MeshObjectPlot\n\n\n# Create a custom object for this example\nclass CustomObject:\n    def __init__(self):\n        self.name = \"CustomObject\"\n        self.mesh = pv.Cube()\n\n    def get_mesh(self):\n        return self.mesh\n\n    def name(self):\n        return self.name\n\n\ncustom_object = CustomObject()\n\n# Create a MeshObjectPlot instance\nmesh_object = MeshObjectPlot(custom_object, custom_object.get_mesh())\n\n# Create a plotter\npl = Plotter()\n\n# Add the MeshObjectPlot instance to the plotter\npl.plot(mesh_object)\n\n# Show the plotter\npl.show()"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#use-with-pyvista-meshes",
        "title": "User guide > Use with PyVista meshes",
        "section": "Use with PyVista meshes",
        "text": "You can use the default plotter to plot simple PyVista meshes. This code shows how to\nuse it to visualize a simple PyVista mesh:\n## Usage example with pyvista meshes ##\n\nimport pyvista as pv\nfrom ansys.tools.visualization_interface import Plotter\n\n# Create a pyvista mesh\nmesh = pv.Cube()\n\n# Create a plotter\npl = Plotter()\n\n# Add the mesh to the plotter\npl.plot(mesh)\n\n# Show the plotter\npl.show()"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#use-with-pyansys-custom-objects",
        "title": "User guide > Use with PyAnsys custom objects",
        "section": "Use with PyAnsys custom objects",
        "text": "You can also use the default plotter to visualize PyAnsys custom objects. The only requirement is that the\ncustom object must have a method that returns a PyVista mesh a method that exposes a name or\nid attribute of your object. To expose a custom object, you use a MeshObjectPlot instance. This class\nrelates PyVista meshes with any object.\nThe following code shows how to use the default plotter to visualize a PyAnsys custom object:\n## Usage example with PyAnsys custom objects ##\n\nfrom ansys.tools.visualization_interface import Plotter\nfrom ansys.tools.visualization_interface import MeshObjectPlot\n\n\n# Create a custom object for this example\nclass CustomObject:\n    def __init__(self):\n        self.name = \"CustomObject\"\n        self.mesh = pv.Cube()\n\n    def get_mesh(self):\n        return self.mesh\n\n    def name(self):\n        return self.name\n\n\ncustom_object = CustomObject()\n\n# Create a MeshObjectPlot instance\nmesh_object = MeshObjectPlot(custom_object, custom_object.get_mesh())\n\n# Create a plotter\npl = Plotter()\n\n# Add the MeshObjectPlot instance to the plotter\npl.plot(mesh_object)\n\n# Show the plotter\npl.show()"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#customize-your-own-plotter",
        "title": "User guide > Customize your own plotter",
        "section": "Customize your own plotter",
        "text": "The Visualization Interface Tool provides a base class, PlotterInterface, for customizing certain functions\nof the plotter. This class provides a set of methods that can be overridden so that you can adapt the\nplotter to the specific need of your PyAnsys library.\nThe first thing you must do is to create a class that inherits from the PlotterInterface\nclass. After that, see these main use cases for customizing the plotter:\nThe most common use case is to customize the way that the objects you represent are shown in the plotter.\nTo this end, you can override the plot and plot_iter methods. These methods are called every time\na new object is added to the plotter. The default implementation of this method is to add a PyVista mesh\nor a  MeshObjectPlot instance to the plotter. You can override this method to add your own meshes or\nobjects to the plotter in a manner that fits the way that you want to represent the meshes.\nAnother use case is the need to have custom button functionalities for your library. For example, you may\nwant buttons for hiding or showing certain objects. To add custom buttons to the plotter, you use the\nimplementable interface provided by the PlotterWidget class.\nSome practical examples of how to use the PlotterInterface class are included in some PyAnsys libraries,\nsuch as PyAnsys Geometry."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler.html#ruler",
        "title": "Ruler",
        "section": "Ruler",
        "text": "Bases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\nProvides the ruler widget for the Visualization Interface Tool Plotter class.\nProvides the plotter to add the ruler widget to.\ncallback\nRemove or add the ruler widget actor upon click.\nupdate\nDefine the configuration and representation of the ruler widget button.\nRemove or add the ruler widget actor upon click.\nWhether the state of the button, which is inherited from PyVista, is True.\nThis method provides a callback function for the ruler widet.\nIt is called every time the ruler widget is clicked.\nDefine the configuration and representation of the ruler widget button.\nfrom ansys.tools.visualization_interface.backends.pyvista.widgets.ruler import Ruler"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler.html#overview",
        "title": "Ruler > Overview",
        "section": "Overview",
        "text": "callback\nRemove or add the ruler widget actor upon click.\nupdate\nDefine the configuration and representation of the ruler widget button."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler.html#import-detail",
        "title": "Ruler > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.backends.pyvista.widgets.ruler import Ruler"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/Ruler.html#method-detail",
        "title": "Ruler > Method detail",
        "section": "Method detail",
        "text": "Remove or add the ruler widget actor upon click.\nWhether the state of the button, which is inherited from PyVista, is True.\nThis method provides a callback function for the ruler widet.\nIt is called every time the ruler widget is clicked.\nDefine the configuration and representation of the ruler widget button."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow.html#displacementarrow",
        "title": "DisplacementArrow",
        "section": "DisplacementArrow",
        "text": "Bases: ansys.tools.visualization_interface.backends.pyvista.widgets.button.Button\nDefines the arrow to draw and what it is to do.\nPlotter to draw the buttons on.\nDirection that the camera is to move.\ncallback\nMove the camera in the direction defined by the button.\ndirection\nMove the camera in the direction defined by the button.\nWhether the state of the button, which is inherited from PyVista, is active.\nHowever, this parameter is unused by this callback method.\nfrom ansys.tools.visualization_interface.backends.pyvista.widgets.displace_arrows import DisplacementArrow"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow.html#overview",
        "title": "DisplacementArrow > Overview",
        "section": "Overview",
        "text": "callback\nMove the camera in the direction defined by the button.\ndirection"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow.html#import-detail",
        "title": "DisplacementArrow > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.backends.pyvista.widgets.displace_arrows import DisplacementArrow"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow.html#attribute-detail",
        "title": "DisplacementArrow > Attribute detail",
        "section": "Attribute detail",
        "text": ""
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/DisplacementArrow.html#method-detail",
        "title": "DisplacementArrow > Method detail",
        "section": "Method detail",
        "text": "Move the camera in the direction defined by the button.\nWhether the state of the button, which is inherited from PyVista, is active.\nHowever, this parameter is unused by this callback method."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index.html#the-trame_localpy-module",
        "title": "The trame_local.py module",
        "section": "The trame_local.py module",
        "text": "TrameVisualizer\nDefines the trame layout view.\nCLIENT_TYPE\nProvides trame visualizer interface for visualization."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index.html#summary",
        "title": "The trame_local.py module > Summary",
        "section": "Summary",
        "text": "TrameVisualizer\nDefines the trame layout view.\nCLIENT_TYPE"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index.html#description",
        "title": "The trame_local.py module > Description",
        "section": "Description",
        "text": "Provides trame visualizer interface for visualization."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/index.html#module-detail",
        "title": "The trame_local.py module > Module detail",
        "section": "Module detail",
        "text": ""
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/index.html#the-pyvista_interfacepy-module",
        "title": "The pyvista_interface.py module",
        "section": "The pyvista_interface.py module",
        "text": "PyVistaInterface\nProvides the middle class between PyVista plotting operations and PyAnsys objects.\nProvides plotting for various PyAnsys objects."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/index.html#summary",
        "title": "The pyvista_interface.py module > Summary",
        "section": "Summary",
        "text": "PyVistaInterface\nProvides the middle class between PyVista plotting operations and PyAnsys objects."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/index.html#description",
        "title": "The pyvista_interface.py module > Description",
        "section": "Description",
        "text": "Provides plotting for various PyAnsys objects."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget.html#measurewidget",
        "title": "MeasureWidget",
        "section": "MeasureWidget",
        "text": "Bases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\nProvides the measure widget for the Visualization Interface Tool Plotter class.\nPlotter to add the measure widget to.\ncallback\nRemove or add the measurement widget actor upon click.\nupdate\nDefine the measurement widget button parameters.\nplotter_helper\nRemove or add the measurement widget actor upon click.\nWhether the state of the button, which is inherited from PyVista, is active.\nDefine the measurement widget button parameters.\nfrom ansys.tools.visualization_interface.backends.pyvista.widgets.measure import MeasureWidget"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget.html#overview",
        "title": "MeasureWidget > Overview",
        "section": "Overview",
        "text": "callback\nRemove or add the measurement widget actor upon click.\nupdate\nDefine the measurement widget button parameters.\nplotter_helper"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget.html#import-detail",
        "title": "MeasureWidget > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.backends.pyvista.widgets.measure import MeasureWidget"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget.html#attribute-detail",
        "title": "MeasureWidget > Attribute detail",
        "section": "Attribute detail",
        "text": ""
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/MeasureWidget.html#method-detail",
        "title": "MeasureWidget > Method detail",
        "section": "Method detail",
        "text": "Remove or add the measurement widget actor upon click.\nWhether the state of the button, which is inherited from PyVista, is active.\nDefine the measurement widget button parameters."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget.html#meshsliderwidget",
        "title": "MeshSliderWidget",
        "section": "MeshSliderWidget",
        "text": "Bases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\nProvides the mesh slider widget for the Visualization Interface Tool Plotter class.\nPlotter to add the mesh slider widget to.\ncallback\nRemove or add the mesh slider widget actor upon click.\nupdate\nDefine the mesh slider widget button parameters.\nplotter_helper\nRemove or add the mesh slider widget actor upon click.\nWhether the state of the button, which is inherited from PyVista, is active.\nDefine the mesh slider widget button parameters.\nfrom ansys.tools.visualization_interface.backends.pyvista.widgets.mesh_slider import MeshSliderWidget"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget.html#overview",
        "title": "MeshSliderWidget > Overview",
        "section": "Overview",
        "text": "callback\nRemove or add the mesh slider widget actor upon click.\nupdate\nDefine the mesh slider widget button parameters.\nplotter_helper"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget.html#import-detail",
        "title": "MeshSliderWidget > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.backends.pyvista.widgets.mesh_slider import MeshSliderWidget"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget.html#attribute-detail",
        "title": "MeshSliderWidget > Attribute detail",
        "section": "Attribute detail",
        "text": ""
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/MeshSliderWidget.html#method-detail",
        "title": "MeshSliderWidget > Method detail",
        "section": "Method detail",
        "text": "Remove or add the mesh slider widget actor upon click.\nWhether the state of the button, which is inherited from PyVista, is active.\nDefine the mesh slider widget button parameters."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/index.html#the-trame_servicepy-module",
        "title": "The trame_service.py module",
        "section": "The trame_service.py module",
        "text": "TrameService\nTrame service class.\nTrame service module."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/index.html#summary",
        "title": "The trame_service.py module > Summary",
        "section": "Summary",
        "text": "TrameService\nTrame service class."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/index.html#description",
        "title": "The trame_service.py module > Description",
        "section": "Description",
        "text": "Trame service module."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/index.html#the-rulerpy-module",
        "title": "The ruler.py module",
        "section": "The ruler.py module",
        "text": "Ruler\nProvides the ruler widget for the Visualization Interface Tool Plotter class.\nProvides the ruler widget for the Visualization Interface Tool plotter."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/index.html#summary",
        "title": "The ruler.py module > Summary",
        "section": "Summary",
        "text": "Ruler\nProvides the ruler widget for the Visualization Interface Tool Plotter class."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/ruler/index.html#description",
        "title": "The ruler.py module > Description",
        "section": "Description",
        "text": "Provides the ruler widget for the Visualization Interface Tool plotter."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/index.html#the-view_buttonpy-module",
        "title": "The view_button.py module",
        "section": "The view_button.py module",
        "text": "ViewButton\nProvides for changing the view.\nViewDirection\nProvides an enum with the available views.\nProvides the view button widget for changing the camera view."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/index.html#summary",
        "title": "The view_button.py module > Summary",
        "section": "Summary",
        "text": "ViewButton\nProvides for changing the view.\nViewDirection\nProvides an enum with the available views."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/index.html#description",
        "title": "The view_button.py module > Description",
        "section": "Description",
        "text": "Provides the view button widget for changing the camera view."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/index.html#the-buttonpy-module",
        "title": "The button.py module",
        "section": "The button.py module",
        "text": "Button\nProvides the abstract class for implementing buttons in PyAnsys.\nProvides for implementing buttons in PyAnsys."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/index.html#summary",
        "title": "The button.py module > Summary",
        "section": "Summary",
        "text": "Button\nProvides the abstract class for implementing buttons in PyAnsys."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/index.html#description",
        "title": "The button.py module > Description",
        "section": "Description",
        "text": "Provides for implementing buttons in PyAnsys."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/index.html#the-widgetpy-module",
        "title": "The widget.py module",
        "section": "The widget.py module",
        "text": "PlotterWidget\nProvides an abstract class for plotter widgets.\nProvides the abstract implementation of plotter widgets."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/index.html#summary",
        "title": "The widget.py module > Summary",
        "section": "Summary",
        "text": "PlotterWidget\nProvides an abstract class for plotter widgets."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/widget/index.html#description",
        "title": "The widget.py module > Description",
        "section": "Description",
        "text": "Provides the abstract implementation of plotter widgets."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/index",
        "href": "api/ansys/tools/visualization_interface/index.html#the-ansystoolsvisualization_interface-library",
        "title": "The ansys.tools.visualization_interface library",
        "section": "The ansys.tools.visualization_interface library",
        "text": "backends\nProvides interfaces.\ntypes\nProvides custom types.\nutils\nProvides the Utils package.\nplotter\nModule for the Plotter class.\n__version__\nUSE_TRAME\nDOCUMENTATION_BUILD\nWhether the documentation is being built or not.\nTESTING_MODE\nWhether the library is being built or not, used to avoid showing plots while testing.\nUSE_HTML_BACKEND\nWhether the library is being built or not, used to avoid showing plots while testing.\nVisualization Interface Tool is a Python client library for visualizing the results of Ansys simulations.\nWhether the documentation is being built or not.\nWhether the library is being built or not, used to avoid showing plots while testing.\nWhether the library is being built or not, used to avoid showing plots while testing."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/index",
        "href": "api/ansys/tools/visualization_interface/index.html#summary",
        "title": "The ansys.tools.visualization_interface library > Summary",
        "section": "Summary",
        "text": "backends\nProvides interfaces.\ntypes\nProvides custom types.\nutils\nProvides the Utils package.\nplotter\nModule for the Plotter class.\n__version__\nUSE_TRAME\nDOCUMENTATION_BUILD\nWhether the documentation is being built or not.\nTESTING_MODE\nWhether the library is being built or not, used to avoid showing plots while testing.\nUSE_HTML_BACKEND\nWhether the library is being built or not, used to avoid showing plots while testing."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/index",
        "href": "api/ansys/tools/visualization_interface/index.html#description",
        "title": "The ansys.tools.visualization_interface library > Description",
        "section": "Description",
        "text": "Visualization Interface Tool is a Python client library for visualizing the results of Ansys simulations."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/index",
        "href": "api/ansys/tools/visualization_interface/index.html#module-detail",
        "title": "The ansys.tools.visualization_interface library > Module detail",
        "section": "Module detail",
        "text": "Whether the documentation is being built or not.\nWhether the library is being built or not, used to avoid showing plots while testing.\nWhether the library is being built or not, used to avoid showing plots while testing."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/index.html#the-measurepy-module",
        "title": "The measure.py module",
        "section": "The measure.py module",
        "text": "MeasureWidget\nProvides the measure widget for the Visualization Interface Tool Plotter class.\nProvides the measure widget for the PyAnsys plotter."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/index.html#summary",
        "title": "The measure.py module > Summary",
        "section": "Summary",
        "text": "MeasureWidget\nProvides the measure widget for the Visualization Interface Tool Plotter class."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/measure/index.html#description",
        "title": "The measure.py module > Description",
        "section": "Description",
        "text": "Provides the measure widget for the PyAnsys plotter."
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/using_meshobject",
        "href": "examples/00-basic-pyvista-examples/using_meshobject.html#use-the-meshobjectplot-class",
        "title": "Use the MeshObjectPlot class",
        "section": "Use the MeshObjectPlot class",
        "text": "The Visualization Interface Tool provides the MeshObject helper class to relate a custom object\nwith its mesh. With a custom object, you can take advantage of the full potential of the\nVisualization Interface Tool.\nThis example shows how to use the MeshObjectPlot class to plot your custom objects.\nTotal running time of the script: (0 minutes 0.443 seconds)\nDownload Jupyter notebook: using_meshobject.ipynb\nDownload Python source code: using_meshobject.py\nDownload zipped: using_meshobject.zip\nimport pyvista as pv\n\n# Note that the ``CustomObject`` class must have a way to get the mesh\n# and a name or ID.\n\nclass CustomObject:\n    def __init__(self):\n        self.name = \"CustomObject\"\n        self.mesh = pv.Cube()\n\n    def get_mesh(self):\n        return self.mesh\n\n    def name(self):\n        return self.name\n\n# Create a custom object\ncustom_object = CustomObject()\nfrom ansys.tools.visualization_interface import MeshObjectPlot\n\n# Create an instance\n\nmesh_object = MeshObjectPlot(custom_object, custom_object.get_mesh())\nfrom ansys.tools.visualization_interface import Plotter\n\npl = Plotter()\npl.plot(mesh_object)\npl.show()"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/using_meshobject",
        "href": "examples/00-basic-pyvista-examples/using_meshobject.html#relate-customobject-class-with-a-pyvista-mesh",
        "title": "Use the MeshObjectPlot class > Relate CustomObject class with a PyVista mesh",
        "section": "Relate CustomObject class with a PyVista mesh",
        "text": "import pyvista as pv\n\n# Note that the ``CustomObject`` class must have a way to get the mesh\n# and a name or ID.\n\nclass CustomObject:\n    def __init__(self):\n        self.name = \"CustomObject\"\n        self.mesh = pv.Cube()\n\n    def get_mesh(self):\n        return self.mesh\n\n    def name(self):\n        return self.name\n\n# Create a custom object\ncustom_object = CustomObject()"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/using_meshobject",
        "href": "examples/00-basic-pyvista-examples/using_meshobject.html#create-a-meshobjectplot-instance",
        "title": "Use the MeshObjectPlot class > Create a MeshObjectPlot instance",
        "section": "Create a MeshObjectPlot instance",
        "text": "from ansys.tools.visualization_interface import MeshObjectPlot\n\n# Create an instance\n\nmesh_object = MeshObjectPlot(custom_object, custom_object.get_mesh())"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/using_meshobject",
        "href": "examples/00-basic-pyvista-examples/using_meshobject.html#plot-the-meshobjectplot-instance",
        "title": "Use the MeshObjectPlot class > Plot the MeshObjectPlot instance",
        "section": "Plot the MeshObjectPlot instance",
        "text": "Total running time of the script: (0 minutes 0.443 seconds)\nDownload Jupyter notebook: using_meshobject.ipynb\nDownload Python source code: using_meshobject.py\nDownload zipped: using_meshobject.zip\nfrom ansys.tools.visualization_interface import Plotter\n\npl = Plotter()\npl.plot(mesh_object)\npl.show()"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button.html#button",
        "title": "Button",
        "section": "Button",
        "text": "Bases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\nProvides the abstract class for implementing buttons in PyAnsys.\nPlotter to draw the buttons on.\nTuple containing the position and the path to the icon of the button.\nThis class wraps the PyVista add_checkbox_button_widget() method.\ncallback\nGet the functionality of the button, which is implemented by subclasses.\nupdate\nAssign the image that represents the button.\nbutton_config\nGet the functionality of the button, which is implemented by subclasses.\nWhether the button is active.\nAssign the image that represents the button.\nfrom ansys.tools.visualization_interface.backends.pyvista.widgets.button import Button"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button.html#overview",
        "title": "Button > Overview",
        "section": "Overview",
        "text": "callback\nGet the functionality of the button, which is implemented by subclasses.\nupdate\nAssign the image that represents the button.\nbutton_config"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button.html#import-detail",
        "title": "Button > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.backends.pyvista.widgets.button import Button"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button.html#attribute-detail",
        "title": "Button > Attribute detail",
        "section": "Attribute detail",
        "text": ""
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/button/Button.html#method-detail",
        "title": "Button > Method detail",
        "section": "Method detail",
        "text": "Get the functionality of the button, which is implemented by subclasses.\nWhether the button is active.\nAssign the image that represents the button."
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/index",
        "href": "examples/00-basic-pyvista-examples/index.html#basic-usage-examples",
        "title": "Basic usage examples",
        "section": "Basic usage examples",
        "text": "These examples show how to use the general plotter included in the Visualization Interface Tool.\nsphx_glr_examples_00-basic-pyvista-examples_remote_trame_view.py\nsphx_glr_examples_00-basic-pyvista-examples_clipping_plane.py\nsphx_glr_examples_00-basic-pyvista-examples_using_meshobject.py\nsphx_glr_examples_00-basic-pyvista-examples_plain_usage.py\nsphx_glr_examples_00-basic-pyvista-examples_picker.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#pyvistainterface",
        "title": "PyVistaInterface",
        "section": "PyVistaInterface",
        "text": "Provides the middle class between PyVista plotting operations and PyAnsys objects.\nThe main purpose of this class is to simplify interaction between PyVista and the PyVista backend\nprovided. This class is responsible for creating the PyVista scene and adding\nthe PyAnsys objects to it.\nScene for rendering the objects. If passed, off_screen needs to\nbe set manually beforehand for documentation and testing.\nDictionary containing the background and top colors.\nNumber of points to use to render the shapes.\nWhether to enable widget buttons in the plotter window.\nWidget buttons must be disabled when using\ntrame\nfor visualization.\nWhether to show the XY plane in the plotter window.\nview_xy\nView the scene from the XY plane.\nview_xz\nView the scene from the XZ plane.\nview_yx\nView the scene from the YX plane.\nview_yz\nView the scene from the YZ plane.\nview_zx\nView the scene from the ZX plane.\nview_zy\nView the scene from the ZY plane.\nclip\nClip a given mesh with a plane.\nplot_meshobject\nPlot a generic MeshObjectPlot object to the scene.\nplot_edges\nPlot the outer edges of an object to the plot.\nplot\nPlot any type of object to the scene.\nplot_iter\nPlot elements of an iterable of any type of objects to the scene.\nshow\nShow the rendered scene on the screen.\nset_add_mesh_defaults\nSet the default values for the plotting options.\nscene\nRendered scene object.\nobject_to_actors_map\nMapping between the PyVista actor and the PyAnsys objects.\nRendered scene object.\nRendered scene object.\nMapping between the PyVista actor and the PyAnsys objects.\nView the scene from the XY plane.\nView the scene from the XZ plane.\nView the scene from the YX plane.\nView the scene from the YZ plane.\nView the scene from the ZX plane.\nView the scene from the ZY plane.\nClip a given mesh with a plane.\nMesh.\nPlane to use for clipping. Options are \"x\", \"-x\",\n\"y\", \"-y\", \"z\", and \"-z\".\nOrigin point of the plane.\nClipping plane to cut the mesh with.\nClipped mesh.\nPlot a generic MeshObjectPlot object to the scene.\nObject to add to the scene.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nPlot the outer edges of an object to the plot.\nThis method has the side effect of adding the edges to the MeshObjectPlot\nobject that you pass through the parameters.\nCustom object with the edges to add.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nPlot any type of object to the scene.\nSupported object types are List[pv.PolyData], MeshObjectPlot,\nand pv.MultiBlock.\nObject to plot.\nRegular expression with the desired name or names to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nPlot elements of an iterable of any type of objects to the scene.\nList of objects to plot.\nRegular expression with the desired name or names to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nShow the rendered scene on the screen.\nWhether to show the XY plane.\nPyVista Jupyter backend.\nPlotting keyword arguments. For allowable keyword arguments, see the\nPlotter.show method.\nFor more information on supported Jupyter backends, see\nJupyter Notebook Plotting\nin the PyVista documentation.\nSet the default values for the plotting options.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nfrom ansys.tools.visualization_interface.backends.pyvista.pyvista_interface import PyVistaInterface"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#overview",
        "title": "PyVistaInterface > Overview",
        "section": "Overview",
        "text": "view_xy\nView the scene from the XY plane.\nview_xz\nView the scene from the XZ plane.\nview_yx\nView the scene from the YX plane.\nview_yz\nView the scene from the YZ plane.\nview_zx\nView the scene from the ZX plane.\nview_zy\nView the scene from the ZY plane.\nclip\nClip a given mesh with a plane.\nplot_meshobject\nPlot a generic MeshObjectPlot object to the scene.\nplot_edges\nPlot the outer edges of an object to the plot.\nplot\nPlot any type of object to the scene.\nplot_iter\nPlot elements of an iterable of any type of objects to the scene.\nshow\nShow the rendered scene on the screen.\nset_add_mesh_defaults\nSet the default values for the plotting options.\nscene\nRendered scene object.\nobject_to_actors_map\nMapping between the PyVista actor and the PyAnsys objects."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#import-detail",
        "title": "PyVistaInterface > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.backends.pyvista.pyvista_interface import PyVistaInterface"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#property-detail",
        "title": "PyVistaInterface > Property detail",
        "section": "Property detail",
        "text": "Rendered scene object.\nRendered scene object.\nMapping between the PyVista actor and the PyAnsys objects."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista_interface/PyVistaInterface.html#method-detail",
        "title": "PyVistaInterface > Method detail",
        "section": "Method detail",
        "text": "View the scene from the XY plane.\nView the scene from the XZ plane.\nView the scene from the YX plane.\nView the scene from the YZ plane.\nView the scene from the ZX plane.\nView the scene from the ZY plane.\nClip a given mesh with a plane.\nMesh.\nPlane to use for clipping. Options are \"x\", \"-x\",\n\"y\", \"-y\", \"z\", and \"-z\".\nOrigin point of the plane.\nClipping plane to cut the mesh with.\nClipped mesh.\nPlot a generic MeshObjectPlot object to the scene.\nObject to add to the scene.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nPlot the outer edges of an object to the plot.\nThis method has the side effect of adding the edges to the MeshObjectPlot\nobject that you pass through the parameters.\nCustom object with the edges to add.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nPlot any type of object to the scene.\nSupported object types are List[pv.PolyData], MeshObjectPlot,\nand pv.MultiBlock.\nObject to plot.\nRegular expression with the desired name or names to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nPlot elements of an iterable of any type of objects to the scene.\nList of objects to plot.\nRegular expression with the desired name or names to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nShow the rendered scene on the screen.\nWhether to show the XY plane.\nPyVista Jupyter backend.\nPlotting keyword arguments. For allowable keyword arguments, see the\nPlotter.show method.\nFor more information on supported Jupyter backends, see\nJupyter Notebook Plotting\nin the PyVista documentation.\nSet the default values for the plotting options.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method."
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "This section show how to use the Visualization Interface Tool to perform many different\ntypes of operations."
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#basic-usage-examples",
        "title": "Examples > Basic usage examples",
        "section": "Basic usage examples",
        "text": "These examples show how to use the general plotter included in the Visualization Interface Tool.\nsphx_glr_examples_00-basic-pyvista-examples_remote_trame_view.py\nsphx_glr_examples_00-basic-pyvista-examples_clipping_plane.py\nsphx_glr_examples_00-basic-pyvista-examples_using_meshobject.py\nsphx_glr_examples_00-basic-pyvista-examples_plain_usage.py\nsphx_glr_examples_00-basic-pyvista-examples_picker.py"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#advanced-usage-examples",
        "title": "Examples > Advanced usage examples",
        "section": "Advanced usage examples",
        "text": "These examples show how to use the Visualization Interface Tool to postprocess simulation data.\nsphx_glr_examples_01-advanced-pyansys-examples_using_meshobject_with_field_data.py"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/clip_plane/index",
        "href": "api/ansys/tools/visualization_interface/utils/clip_plane/index.html#the-clip_planepy-module",
        "title": "The clip_plane.py module",
        "section": "The clip_plane.py module",
        "text": "ClipPlane\nProvides the clipping plane for clipping meshes in the plotter.\nProvides the ClipPlane class."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/clip_plane/index",
        "href": "api/ansys/tools/visualization_interface/utils/clip_plane/index.html#summary",
        "title": "The clip_plane.py module > Summary",
        "section": "Summary",
        "text": "ClipPlane\nProvides the clipping plane for clipping meshes in the plotter."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/clip_plane/index",
        "href": "api/ansys/tools/visualization_interface/utils/clip_plane/index.html#description",
        "title": "The clip_plane.py module > Description",
        "section": "Description",
        "text": "Provides the ClipPlane class."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/plotter/index",
        "href": "api/ansys/tools/visualization_interface/plotter/index.html#the-plotterpy-module",
        "title": "The plotter.py module",
        "section": "The plotter.py module",
        "text": "Plotter\nBase plotting class containing common methods and attributes.\nModule for the Plotter class."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/plotter/index",
        "href": "api/ansys/tools/visualization_interface/plotter/index.html#summary",
        "title": "The plotter.py module > Summary",
        "section": "Summary",
        "text": "Plotter\nBase plotting class containing common methods and attributes."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/plotter/index",
        "href": "api/ansys/tools/visualization_interface/plotter/index.html#description",
        "title": "The plotter.py module > Description",
        "section": "Description",
        "text": "Module for the Plotter class."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot",
        "href": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot.html#meshobjectplot",
        "title": "MeshObjectPlot",
        "section": "MeshObjectPlot",
        "text": "Relates a custom object with a mesh, provided by the consumer library.\nmesh\nMesh of the object in PyVista format.\ncustom_object\nCustom object.\nactor\nPyVista actor of the object in the plotter.\nedges\nEdges of the object.\nname\nName of the object.\nMesh of the object in PyVista format.\nMesh of the object.\nCustom object.\nCustom object.\nPyVista actor of the object in the plotter.\nPyVista actor of the object.\nEdges of the object.\nEdges of the object.\nName of the object.\nName of the object.\nfrom ansys.tools.visualization_interface.types.mesh_object_plot import MeshObjectPlot"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot",
        "href": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot.html#overview",
        "title": "MeshObjectPlot > Overview",
        "section": "Overview",
        "text": "mesh\nMesh of the object in PyVista format.\ncustom_object\nCustom object.\nactor\nPyVista actor of the object in the plotter.\nedges\nEdges of the object.\nname\nName of the object."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot",
        "href": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot.html#import-detail",
        "title": "MeshObjectPlot > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.types.mesh_object_plot import MeshObjectPlot"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot",
        "href": "api/ansys/tools/visualization_interface/types/mesh_object_plot/MeshObjectPlot.html#property-detail",
        "title": "MeshObjectPlot > Property detail",
        "section": "Property detail",
        "text": "Mesh of the object in PyVista format.\nMesh of the object.\nCustom object.\nCustom object.\nPyVista actor of the object in the plotter.\nPyVista actor of the object.\nEdges of the object.\nEdges of the object.\nName of the object.\nName of the object."
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/picker",
        "href": "examples/00-basic-pyvista-examples/picker.html#activate-the-picker",
        "title": "Activate the picker",
        "section": "Activate the picker",
        "text": "This example shows how to activate the picker, which is the tool that you\nuse to select an object in the plotter and get its name.\nTotal running time of the script: (0 minutes 0.842 seconds)\nDownload Jupyter notebook: picker.ipynb\nDownload Python source code: picker.py\nDownload zipped: picker.zip\nimport pyvista as pv\n\n# Note that the ``CustomObject`` class must have a way to get the mesh\n# and a name or ID.\n\nclass CustomObject:\n    def __init__(self):\n        self.name = \"CustomObject\"\n        self.mesh = pv.Cube(center=(1, 1, 0))\n\n    def get_mesh(self):\n        return self.mesh\n\n    def name(self):\n        return self.name\n\n\n\n# Create a custom object\ncustom_cube = CustomObject()\ncustom_cube.name = \"CustomCube\"\ncustom_sphere = CustomObject()\ncustom_sphere.mesh = pv.Sphere(center=(0, 0, 5))\ncustom_sphere.name = \"CustomSphere\"\nfrom ansys.tools.visualization_interface import MeshObjectPlot\n\n# Create an instance\nmesh_object_cube = MeshObjectPlot(custom_cube, custom_cube.get_mesh())\nmesh_object_sphere = MeshObjectPlot(custom_sphere, custom_sphere.get_mesh())\nfrom ansys.tools.visualization_interface import Plotter\nfrom ansys.tools.visualization_interface.backends.pyvista import PyVistaBackend\n\npv_backend = PyVistaBackend(allow_picking=True, plot_picked_names=True)\npl = Plotter(backend=pv_backend)\npl.plot(mesh_object_cube)\npl.plot(mesh_object_sphere)\npl.show()\nfrom ansys.tools.visualization_interface import Plotter\nfrom ansys.tools.visualization_interface.backends.pyvista import PyVistaBackend\n\npv_backend = PyVistaBackend(allow_hovering=True)\npl = Plotter(backend=pv_backend)\npl.plot(mesh_object_cube)\npl.plot(mesh_object_sphere)\npl.show()\nimport numpy as np\n\n\nclass CustomStructuredObject:\n    def __init__(self):\n        self.name = \"CustomObject\"\n        xrng = np.arange(-10, 10, 2, dtype=np.float32)\n        yrng = np.arange(-10, 10, 5, dtype=np.float32)\n        zrng = np.arange(-10, 10, 1, dtype=np.float32)\n        x, y, z = np.meshgrid(xrng, yrng, zrng, indexing='ij')\n        grid = pv.StructuredGrid(x, y, z)\n        self.mesh = grid\n\n    def get_mesh(self):\n        return self.mesh\n\n    def name(self):\n        return self.name\n\n\npv_backend = PyVistaBackend()\npl = Plotter(backend=pv_backend)\n\nstructured_object = CustomStructuredObject()\nmo_plot = MeshObjectPlot(structured_object, structured_object.get_mesh())\npl.plot(mo_plot)\npl.show()"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/picker",
        "href": "examples/00-basic-pyvista-examples/picker.html#relate-customobject-class-with-a-pyvista-mesh",
        "title": "Activate the picker > Relate CustomObject class with a PyVista mesh",
        "section": "Relate CustomObject class with a PyVista mesh",
        "text": "import pyvista as pv\n\n# Note that the ``CustomObject`` class must have a way to get the mesh\n# and a name or ID.\n\nclass CustomObject:\n    def __init__(self):\n        self.name = \"CustomObject\"\n        self.mesh = pv.Cube(center=(1, 1, 0))\n\n    def get_mesh(self):\n        return self.mesh\n\n    def name(self):\n        return self.name\n\n\n\n# Create a custom object\ncustom_cube = CustomObject()\ncustom_cube.name = \"CustomCube\"\ncustom_sphere = CustomObject()\ncustom_sphere.mesh = pv.Sphere(center=(0, 0, 5))\ncustom_sphere.name = \"CustomSphere\""
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/picker",
        "href": "examples/00-basic-pyvista-examples/picker.html#create-two-meshobjectplot-instances",
        "title": "Activate the picker > Create two MeshObjectPlot instances",
        "section": "Create two MeshObjectPlot instances",
        "text": "from ansys.tools.visualization_interface import MeshObjectPlot\n\n# Create an instance\nmesh_object_cube = MeshObjectPlot(custom_cube, custom_cube.get_mesh())\nmesh_object_sphere = MeshObjectPlot(custom_sphere, custom_sphere.get_mesh())"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/picker",
        "href": "examples/00-basic-pyvista-examples/picker.html#activate-the-picking-capabilities",
        "title": "Activate the picker > Activate the picking capabilities",
        "section": "Activate the picking capabilities",
        "text": "from ansys.tools.visualization_interface import Plotter\nfrom ansys.tools.visualization_interface.backends.pyvista import PyVistaBackend\n\npv_backend = PyVistaBackend(allow_picking=True, plot_picked_names=True)\npl = Plotter(backend=pv_backend)\npl.plot(mesh_object_cube)\npl.plot(mesh_object_sphere)\npl.show()"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/picker",
        "href": "examples/00-basic-pyvista-examples/picker.html#activate-the-hover-capabilities",
        "title": "Activate the picker > Activate the hover capabilities",
        "section": "Activate the hover capabilities",
        "text": "from ansys.tools.visualization_interface import Plotter\nfrom ansys.tools.visualization_interface.backends.pyvista import PyVistaBackend\n\npv_backend = PyVistaBackend(allow_hovering=True)\npl = Plotter(backend=pv_backend)\npl.plot(mesh_object_cube)\npl.plot(mesh_object_sphere)\npl.show()"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/picker",
        "href": "examples/00-basic-pyvista-examples/picker.html#using-structuredgrid-mesh",
        "title": "Activate the picker > Using StructuredGrid mesh",
        "section": "Using StructuredGrid mesh",
        "text": "Total running time of the script: (0 minutes 0.842 seconds)\nDownload Jupyter notebook: picker.ipynb\nDownload Python source code: picker.py\nDownload zipped: picker.zip\nimport numpy as np\n\n\nclass CustomStructuredObject:\n    def __init__(self):\n        self.name = \"CustomObject\"\n        xrng = np.arange(-10, 10, 2, dtype=np.float32)\n        yrng = np.arange(-10, 10, 5, dtype=np.float32)\n        zrng = np.arange(-10, 10, 1, dtype=np.float32)\n        x, y, z = np.meshgrid(xrng, yrng, zrng, indexing='ij')\n        grid = pv.StructuredGrid(x, y, z)\n        self.mesh = grid\n\n    def get_mesh(self):\n        return self.mesh\n\n    def name(self):\n        return self.name\n\n\npv_backend = PyVistaBackend()\npl = Plotter(backend=pv_backend)\n\nstructured_object = CustomStructuredObject()\nmo_plot = MeshObjectPlot(structured_object, structured_object.get_mesh())\npl.plot(mo_plot)\npl.show()"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#pyvistabackendinterface",
        "title": "PyVistaBackendInterface",
        "section": "PyVistaBackendInterface",
        "text": "Bases: ansys.tools.visualization_interface.backends._base.BaseBackend\nProvides the interface for the Visualization Interface Tool plotter.\nThis class is intended to be used as a base class for the custom plotters\nin the different PyAnsys libraries. It provides the basic plotter functionalities,\nsuch as adding objects and enabling widgets and picking capabilities. It also\nprovides the ability to show the plotter using the trame\nservice.\nYou can override the plot_iter(), plot(), and picked_operation() methods.\nThe plot_iter() method is intended to plot a list of objects to the plotter, while the\nplot() method is intended to plot a single object to the plotter. The show() method is\nintended to show the plotter. The picked_operation() method is\nintended to perform an operation on the picked objects.\nWhether to activate the usage of the trame UI instead of the Python window.\nWhether to allow picking capabilities in the window. Incompatible with hovering.\nPicking will take precedence over hovering.\nWhether to allow hovering capabilities in the window. Incompatible with picking.\nPicking will take precedence over hovering.\nplot_iter\nPlot one or more compatible objects to the plotter.\nplot\nPlot a single object to the plotter.\nenable_widgets\nEnable the widgets for the plotter.\nadd_widget\nAdd one or more custom widgets to the plotter.\nselect_object\nSelect a custom object in the plotter.\nunselect_object\nUnselect a custom object in the plotter.\npicker_callback\nDefine the callback for the element picker.\nhover_callback\nDefine the callback for the element hover.\ncompute_edge_object_map\nCompute the mapping between plotter actors and EdgePlot objects.\nenable_picking\nEnable picking capabilities in the plotter.\nenable_hover\nEnable hover capabilities in the plotter.\ndisable_picking\nDisable picking capabilities in the plotter.\ndisable_hover\nDisable hover capabilities in the plotter.\nshow\nPlot and show any PyAnsys object.\nshow_plotter\nShow the plotter or start the trame service.\npicked_operation\nPerform an operation on the picked objects.\npv_interface\nPyVista interface.\nPyVista interface.\nEnable the widgets for the plotter.\nAdd one or more custom widgets to the plotter.\nOne or more custom widgets.\nSelect a custom object in the plotter.\nThis method highlights the edges of a body and adds a label. It also adds\nthe object to the _picked_dict and the actor to the _picker_added_actors_map.\nCustom object to select.\nSet of points to determine the label position.\nUnselect a custom object in the plotter.\nThis method removes edge highlighting and the label from a plotter actor and removes\nthe object from the Visualization Interface Tool object selection.\nCustom object to unselect.\nDefine the callback for the element picker.\nActor to select for the picker.\nDefine the callback for the element hover.\nActor to hover for the picker.\nCompute the mapping between plotter actors and EdgePlot objects.\nDictionary defining the mapping between plotter actors and EdgePlot objects.\nEnable picking capabilities in the plotter.\nEnable hover capabilities in the plotter.\nDisable picking capabilities in the plotter.\nDisable hover capabilities in the plotter.\nPlot and show any PyAnsys object.\nThe types of objects supported are MeshObjectPlot,\npv.MultiBlock, and pv.PolyData.\nObject or list of objects to plot.\nPath for saving a screenshot of the image that is being represented.\nDictionary with the plane and the viewup vectors of the 2D plane.\nRegular expression with the desired name or names to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nList with the picked bodies in the picked order.\nShow the plotter or start the trame service.\nVisualization Interface Tool plotter with the meshes added.\nPath for saving a screenshot of the image that is being represented.\nPlot one or more compatible objects to the plotter.\nOne or more objects to add.\nRegular expression with the desired name or names  to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nPlot a single object to the plotter.\nObject to add.\nRegular expression with the desired name or names to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nPerform an operation on the picked objects.\nfrom ansys.tools.visualization_interface.backends.pyvista.pyvista import PyVistaBackendInterface"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#overview",
        "title": "PyVistaBackendInterface > Overview",
        "section": "Overview",
        "text": "plot_iter\nPlot one or more compatible objects to the plotter.\nplot\nPlot a single object to the plotter.\nenable_widgets\nEnable the widgets for the plotter.\nadd_widget\nAdd one or more custom widgets to the plotter.\nselect_object\nSelect a custom object in the plotter.\nunselect_object\nUnselect a custom object in the plotter.\npicker_callback\nDefine the callback for the element picker.\nhover_callback\nDefine the callback for the element hover.\ncompute_edge_object_map\nCompute the mapping between plotter actors and EdgePlot objects.\nenable_picking\nEnable picking capabilities in the plotter.\nenable_hover\nEnable hover capabilities in the plotter.\ndisable_picking\nDisable picking capabilities in the plotter.\ndisable_hover\nDisable hover capabilities in the plotter.\nshow\nPlot and show any PyAnsys object.\nshow_plotter\nShow the plotter or start the trame service.\npicked_operation\nPerform an operation on the picked objects.\npv_interface\nPyVista interface."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#import-detail",
        "title": "PyVistaBackendInterface > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.backends.pyvista.pyvista import PyVistaBackendInterface"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#property-detail",
        "title": "PyVistaBackendInterface > Property detail",
        "section": "Property detail",
        "text": "PyVista interface."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackendInterface.html#method-detail",
        "title": "PyVistaBackendInterface > Method detail",
        "section": "Method detail",
        "text": "Enable the widgets for the plotter.\nAdd one or more custom widgets to the plotter.\nOne or more custom widgets.\nSelect a custom object in the plotter.\nThis method highlights the edges of a body and adds a label. It also adds\nthe object to the _picked_dict and the actor to the _picker_added_actors_map.\nCustom object to select.\nSet of points to determine the label position.\nUnselect a custom object in the plotter.\nThis method removes edge highlighting and the label from a plotter actor and removes\nthe object from the Visualization Interface Tool object selection.\nCustom object to unselect.\nDefine the callback for the element picker.\nActor to select for the picker.\nDefine the callback for the element hover.\nActor to hover for the picker.\nCompute the mapping between plotter actors and EdgePlot objects.\nDictionary defining the mapping between plotter actors and EdgePlot objects.\nEnable picking capabilities in the plotter.\nEnable hover capabilities in the plotter.\nDisable picking capabilities in the plotter.\nDisable hover capabilities in the plotter.\nPlot and show any PyAnsys object.\nThe types of objects supported are MeshObjectPlot,\npv.MultiBlock, and pv.PolyData.\nObject or list of objects to plot.\nPath for saving a screenshot of the image that is being represented.\nDictionary with the plane and the viewup vectors of the 2D plane.\nRegular expression with the desired name or names to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nList with the picked bodies in the picked order.\nShow the plotter or start the trame service.\nVisualization Interface Tool plotter with the meshes added.\nPath for saving a screenshot of the image that is being represented.\nPlot one or more compatible objects to the plotter.\nOne or more objects to add.\nRegular expression with the desired name or names  to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nPlot a single object to the plotter.\nObject to add.\nRegular expression with the desired name or names to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nPerform an operation on the picked objects."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/index.html#the-mesh_sliderpy-module",
        "title": "The mesh_slider.py module",
        "section": "The mesh_slider.py module",
        "text": "MeshSliderWidget\nProvides the mesh slider widget for the Visualization Interface Tool Plotter class.\nProvides the measure widget for the PyAnsys plotter."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/index.html#summary",
        "title": "The mesh_slider.py module > Summary",
        "section": "Summary",
        "text": "MeshSliderWidget\nProvides the mesh slider widget for the Visualization Interface Tool Plotter class."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/mesh_slider/index.html#description",
        "title": "The mesh_slider.py module > Description",
        "section": "Description",
        "text": "Provides the measure widget for the PyAnsys plotter."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot",
        "href": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot.html#edgeplot",
        "title": "EdgePlot",
        "section": "EdgePlot",
        "text": "Provides the mapper class for relating PyAnsys object edges with its PyVista actor.\nPyVista actor that represents the edge.\nPyAnsys object edge that is represented by the PyVista actor.\nParent PyAnsys object of the edge.\nactor\nPyVista actor of the object.\nedge_object\nPyAnsys edge.\nparent\nParent PyAnsys object of the edge.\nname\nName of the edge.\nPyVista actor of the object.\nPyVista actor.\nPyAnsys edge.\nPyAnsys edge.\nParent PyAnsys object of the edge.\nParent PyAnsys object.\nName of the edge.\nName of the edge.\nfrom ansys.tools.visualization_interface.types.edge_plot import EdgePlot"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot",
        "href": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot.html#overview",
        "title": "EdgePlot > Overview",
        "section": "Overview",
        "text": "actor\nPyVista actor of the object.\nedge_object\nPyAnsys edge.\nparent\nParent PyAnsys object of the edge.\nname\nName of the edge."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot",
        "href": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot.html#import-detail",
        "title": "EdgePlot > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.types.edge_plot import EdgePlot"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot",
        "href": "api/ansys/tools/visualization_interface/types/edge_plot/EdgePlot.html#property-detail",
        "title": "EdgePlot > Property detail",
        "section": "Property detail",
        "text": "PyVista actor of the object.\nPyVista actor.\nPyAnsys edge.\nPyAnsys edge.\nParent PyAnsys object of the edge.\nParent PyAnsys object.\nName of the edge.\nName of the edge."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton.html#viewbutton",
        "title": "ViewButton",
        "section": "ViewButton",
        "text": "Bases: ansys.tools.visualization_interface.backends.pyvista.widgets.button.Button\nProvides for changing the view.\nPlotter to draw the buttons on.\nDirection of the view.\ncallback\nChange the view depending on button interaction.\ndirection\nChange the view depending on button interaction.\nWhether the state of the button, which is inherited from PyVista, is True.\nRaised if the specified direction is not implemented.\nfrom ansys.tools.visualization_interface.backends.pyvista.widgets.view_button import ViewButton"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton.html#overview",
        "title": "ViewButton > Overview",
        "section": "Overview",
        "text": "callback\nChange the view depending on button interaction.\ndirection"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton.html#import-detail",
        "title": "ViewButton > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.backends.pyvista.widgets.view_button import ViewButton"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton.html#attribute-detail",
        "title": "ViewButton > Attribute detail",
        "section": "Attribute detail",
        "text": ""
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/view_button/ViewButton.html#method-detail",
        "title": "ViewButton > Method detail",
        "section": "Method detail",
        "text": "Change the view depending on button interaction.\nWhether the state of the button, which is inherited from PyVista, is True.\nRaised if the specified direction is not implemented."
    },
    {
        "objectID": "examples/01-advanced-pyansys-examples/index",
        "href": "examples/01-advanced-pyansys-examples/index.html#advanced-usage-examples",
        "title": "Advanced usage examples",
        "section": "Advanced usage examples",
        "text": "These examples show how to use the Visualization Interface Tool to postprocess simulation data.\nsphx_glr_examples_01-advanced-pyansys-examples_using_meshobject_with_field_data.py"
    },
    {
        "objectID": "examples/sg_execution_times",
        "href": "examples/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 0 files from examples:\nExample\nTime\nMem (MB)\nN/A\nN/A\nN/A"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/color/Color",
        "href": "api/ansys/tools/visualization_interface/utils/color/Color.html#color",
        "title": "Color",
        "section": "Color",
        "text": "Bases: enum.Enum\nProvides an enum with the color to use for the plotter actors.\nDEFAULT\nDefault color for the plotter actors.\nPICKED\nColor for the actors that are currently picked.\nEDGE\nDefault color for the edges.\nPICKED_EDGE\nColor for the edges that are currently picked.\nDefault color for the plotter actors.\nColor for the actors that are currently picked.\nDefault color for the edges.\nColor for the edges that are currently picked.\nfrom ansys.tools.visualization_interface.utils.color import Color"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/color/Color",
        "href": "api/ansys/tools/visualization_interface/utils/color/Color.html#overview",
        "title": "Color > Overview",
        "section": "Overview",
        "text": "DEFAULT\nDefault color for the plotter actors.\nPICKED\nColor for the actors that are currently picked.\nEDGE\nDefault color for the edges.\nPICKED_EDGE\nColor for the edges that are currently picked."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/color/Color",
        "href": "api/ansys/tools/visualization_interface/utils/color/Color.html#import-detail",
        "title": "Color > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.utils.color import Color"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/color/Color",
        "href": "api/ansys/tools/visualization_interface/utils/color/Color.html#attribute-detail",
        "title": "Color > Attribute detail",
        "section": "Attribute detail",
        "text": "Default color for the plotter actors.\nColor for the actors that are currently picked.\nDefault color for the edges.\nColor for the edges that are currently picked."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer.html#tramevisualizer",
        "title": "TrameVisualizer",
        "section": "TrameVisualizer",
        "text": "Defines the trame layout view.\nset_scene\nSet the trame layout view and the mesh to show through the PyVista plotter.\nshow\nStart the trame server and show the mesh.\nserver\nSet the trame layout view and the mesh to show through the PyVista plotter.\nPyVista plotter with the rendered mesh.\nStart the trame server and show the mesh.\nfrom ansys.tools.visualization_interface.backends.pyvista.trame_local import TrameVisualizer"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer.html#overview",
        "title": "TrameVisualizer > Overview",
        "section": "Overview",
        "text": "set_scene\nSet the trame layout view and the mesh to show through the PyVista plotter.\nshow\nStart the trame server and show the mesh.\nserver"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer.html#import-detail",
        "title": "TrameVisualizer > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.backends.pyvista.trame_local import TrameVisualizer"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer.html#attribute-detail",
        "title": "TrameVisualizer > Attribute detail",
        "section": "Attribute detail",
        "text": ""
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_local/TrameVisualizer.html#method-detail",
        "title": "TrameVisualizer > Method detail",
        "section": "Method detail",
        "text": "Set the trame layout view and the mesh to show through the PyVista plotter.\nPyVista plotter with the rendered mesh.\nStart the trame server and show the mesh."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/index.html#the-displace_arrowspy-module",
        "title": "The displace_arrows.py module",
        "section": "The displace_arrows.py module",
        "text": "DisplacementArrow\nDefines the arrow to draw and what it is to do.\nCameraPanDirection\nProvides an enum with the available movement directions of the camera.\nProvides the displacement arrows widget for the PyVista plotter."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/index.html#summary",
        "title": "The displace_arrows.py module > Summary",
        "section": "Summary",
        "text": "DisplacementArrow\nDefines the arrow to draw and what it is to do.\nCameraPanDirection\nProvides an enum with the available movement directions of the camera."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/index.html#description",
        "title": "The displace_arrows.py module > Description",
        "section": "Description",
        "text": "Provides the displacement arrows widget for the PyVista plotter."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/index.html#the-hide_buttonspy-module",
        "title": "The hide_buttons.py module",
        "section": "The hide_buttons.py module",
        "text": "HideButton\nProvides the hide widget for the Visualization Interface Tool Plotter class.\nProvides the hide buttons widget for the PyAnsys plotter."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/index.html#summary",
        "title": "The hide_buttons.py module > Summary",
        "section": "Summary",
        "text": "HideButton\nProvides the hide widget for the Visualization Interface Tool Plotter class."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/index.html#description",
        "title": "The hide_buttons.py module > Description",
        "section": "Description",
        "text": "Provides the hide buttons widget for the PyAnsys plotter."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/mesh_object_plot/index",
        "href": "api/ansys/tools/visualization_interface/types/mesh_object_plot/index.html#the-mesh_object_plotpy-module",
        "title": "The mesh_object_plot.py module",
        "section": "The mesh_object_plot.py module",
        "text": "MeshObjectPlot\nRelates a custom object with a mesh, provided by the consumer library.\nProvides the MeshObjectPlot class."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/mesh_object_plot/index",
        "href": "api/ansys/tools/visualization_interface/types/mesh_object_plot/index.html#summary",
        "title": "The mesh_object_plot.py module > Summary",
        "section": "Summary",
        "text": "MeshObjectPlot\nRelates a custom object with a mesh, provided by the consumer library."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/types/mesh_object_plot/index",
        "href": "api/ansys/tools/visualization_interface/types/mesh_object_plot/index.html#description",
        "title": "The mesh_object_plot.py module > Description",
        "section": "Description",
        "text": "Provides the MeshObjectPlot class."
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#contribute",
        "title": "Contribute",
        "section": "Contribute",
        "text": "Overall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys developer’s guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to the Visualization Interface Tool.\nThe following contribution information is specific to the Visualization Interface Tool.\nInstalling the Visualization Interface Tool in developer mode allows you to modify and enhance\nthe source.\nTo clone and install the latest Visualization Interface Tool release in development mode, run\nthese commands:\nThe Visualization Interface Tool uses pytest for testing.\nPrior to running tests, you must run this command to install\ntest dependencies:\nTo then run the tests, navigate to the root directory of the repository and run this\ncommand:\nThe Visualization Interface Tool follows the PEP8 standard as outlined in\nPEP 8 in\nthe PyAnsys developer’s guide and implements style checking using\npre-commit.\nTo ensure your code meets minimum code styling standards, run these commands:\nYou can also install this as a pre-commit hook by running this command:\nThis way, it’s not possible for you to push code that fails the style checks:\nYou can build the Visualization Interface Tool documentation locally.\nPrior to building the documentation, you must run this command to install\ndocumentation dependencies:\nTo then build the documentation, navigate to the docs directory and run\nthis command:\nThe documentation is built in the docs/_build/html directory.\nYou can clean the documentation build by running this command:\nUse the Visualization Interface Tool Issues\npage to report bugs and request new features. When possible, use the issue templates provided.\nIf your issue does not fit into one of these templates, click the link for opening a blank issue.\nIf you have general questions about the PyAnsys ecosystem, email\npyansys.core@ansys.com. If your\nquestion is specific to the Visualization Interface Tool, ask your\nquestion in an issue as described in the previous paragraph.\ngit clone https://github.com/ansys/ansys-tools-visualization-interface\ncd ansys-tools-visualization-interface\npython -m pip install --upgrade pip\npip install -e .\npip install -e .[tests]\npytest\npip install pre-commit\npre-commit run --all-files\npre-commit install\n$ pre-commit install\n$ git commit -am \"added my cool feature\"\nblack....................................................................Passed\nblacken-docs.............................................................Passed\nisort....................................................................Passed\nflake8...................................................................Passed\ndocformatter.............................................................Passed\ncodespell................................................................Passed\npydocstyle...............................................................Passed\ncheck for merge conflicts................................................Passed\ndebug statements (python)................................................Passed\ncheck yaml...............................................................Passed\ntrim trailing whitespace.................................................Passed\nAdd License Headers......................................................Passed\nValidate GitHub Workflows................................................Passed\npip install -e .[doc]\n# On Linux or macOS\nmake html\n\n# On Windows\n./make.bat html\n# On Linux or macOS\nmake clean\n\n# On Windows\n./make.bat clean"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#install-in-developer-mode",
        "title": "Contribute > Install in developer mode",
        "section": "Install in developer mode",
        "text": "Installing the Visualization Interface Tool in developer mode allows you to modify and enhance\nthe source.\nTo clone and install the latest Visualization Interface Tool release in development mode, run\nthese commands:\ngit clone https://github.com/ansys/ansys-tools-visualization-interface\ncd ansys-tools-visualization-interface\npython -m pip install --upgrade pip\npip install -e ."
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#run-tests",
        "title": "Contribute > Run tests",
        "section": "Run tests",
        "text": "The Visualization Interface Tool uses pytest for testing.\nPrior to running tests, you must run this command to install\ntest dependencies:\nTo then run the tests, navigate to the root directory of the repository and run this\ncommand:\npip install -e .[tests]\npytest"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#adhere-to-code-style",
        "title": "Contribute > Adhere to code style",
        "section": "Adhere to code style",
        "text": "The Visualization Interface Tool follows the PEP8 standard as outlined in\nPEP 8 in\nthe PyAnsys developer’s guide and implements style checking using\npre-commit.\nTo ensure your code meets minimum code styling standards, run these commands:\nYou can also install this as a pre-commit hook by running this command:\nThis way, it’s not possible for you to push code that fails the style checks:\npip install pre-commit\npre-commit run --all-files\npre-commit install\n$ pre-commit install\n$ git commit -am \"added my cool feature\"\nblack....................................................................Passed\nblacken-docs.............................................................Passed\nisort....................................................................Passed\nflake8...................................................................Passed\ndocformatter.............................................................Passed\ncodespell................................................................Passed\npydocstyle...............................................................Passed\ncheck for merge conflicts................................................Passed\ndebug statements (python)................................................Passed\ncheck yaml...............................................................Passed\ntrim trailing whitespace.................................................Passed\nAdd License Headers......................................................Passed\nValidate GitHub Workflows................................................Passed"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#build-the-documentation",
        "title": "Contribute > Build the documentation",
        "section": "Build the documentation",
        "text": "You can build the Visualization Interface Tool documentation locally.\nPrior to building the documentation, you must run this command to install\ndocumentation dependencies:\nTo then build the documentation, navigate to the docs directory and run\nthis command:\nThe documentation is built in the docs/_build/html directory.\nYou can clean the documentation build by running this command:\npip install -e .[doc]\n# On Linux or macOS\nmake html\n\n# On Windows\n./make.bat html\n# On Linux or macOS\nmake clean\n\n# On Windows\n./make.bat clean"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#post-issues",
        "title": "Contribute > Post issues",
        "section": "Post issues",
        "text": "Use the Visualization Interface Tool Issues\npage to report bugs and request new features. When possible, use the issue templates provided.\nIf your issue does not fit into one of these templates, click the link for opening a blank issue.\nIf you have general questions about the PyAnsys ecosystem, email\npyansys.core@ansys.com. If your\nquestion is specific to the Visualization Interface Tool, ask your\nquestion in an issue as described in the previous paragraph."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton.html#screenshotbutton",
        "title": "ScreenshotButton",
        "section": "ScreenshotButton",
        "text": "Bases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\nProvides the screenshot widget for the Visualization Interface Tool Plotter class.\nProvides the plotter to add the screenshot widget to.\ncallback\nRemove or add the screenshot widget actor upon click.\nupdate\nDefine the configuration and representation of the screenshot widget button.\nRemove or add the screenshot widget actor upon click.\nWhether the state of the button, which is inherited from PyVista, is True.\nThis method provides a callback function for the screenshot widget.\nIt is called every time the screenshot widget is clicked.\nDefine the configuration and representation of the screenshot widget button.\nfrom ansys.tools.visualization_interface.backends.pyvista.widgets.screenshot import ScreenshotButton"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton.html#overview",
        "title": "ScreenshotButton > Overview",
        "section": "Overview",
        "text": "callback\nRemove or add the screenshot widget actor upon click.\nupdate\nDefine the configuration and representation of the screenshot widget button."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton.html#import-detail",
        "title": "ScreenshotButton > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.backends.pyvista.widgets.screenshot import ScreenshotButton"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/ScreenshotButton.html#method-detail",
        "title": "ScreenshotButton > Method detail",
        "section": "Method detail",
        "text": "Remove or add the screenshot widget actor upon click.\nWhether the state of the button, which is inherited from PyVista, is True.\nThis method provides a callback function for the screenshot widget.\nIt is called every time the screenshot widget is clicked.\nDefine the configuration and representation of the screenshot widget button."
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/clipping_plane",
        "href": "examples/00-basic-pyvista-examples/clipping_plane.html#use-a-clipping-plane",
        "title": "Use a clipping plane",
        "section": "Use a clipping plane",
        "text": "This example shows how to use a clipping plane in the Visualization Interface Tool to cut a mesh.\nTotal running time of the script: (0 minutes 1.212 seconds)\nDownload Jupyter notebook: clipping_plane.ipynb\nDownload Python source code: clipping_plane.py\nDownload zipped: clipping_plane.zip\nimport pyvista as pv\n\nfrom ansys.tools.visualization_interface import ClipPlane, Plotter\n\nmesh = pv.Cylinder()\npl = Plotter()\n\n# Create a clipping plane\nclipping_plane = ClipPlane(normal=(1, 0, 0), origin=(0, 0, 0))\n\n# Add the mesh to the plotter with the clipping plane\npl.plot(mesh, clipping_plane=clipping_plane)\npl.show()"
    },
    {
        "objectID": "examples/00-basic-pyvista-examples/clipping_plane",
        "href": "examples/00-basic-pyvista-examples/clipping_plane.html#create-a-plotter-and-clip-the-mesh",
        "title": "Use a clipping plane > Create a plotter and clip the mesh",
        "section": "Create a plotter and clip the mesh",
        "text": "Total running time of the script: (0 minutes 1.212 seconds)\nDownload Jupyter notebook: clipping_plane.ipynb\nDownload Python source code: clipping_plane.py\nDownload zipped: clipping_plane.zip\npl = Plotter()\n\n# Create a clipping plane\nclipping_plane = ClipPlane(normal=(1, 0, 0), origin=(0, 0, 0))\n\n# Add the mesh to the plotter with the clipping plane\npl.plot(mesh, clipping_plane=clipping_plane)\npl.show()"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index.html#the-trame_remotepy-module",
        "title": "The trame_remote.py module",
        "section": "The trame_remote.py module",
        "text": "send_pl\nSend the plotter meshes to a remote trame service.\nsend_mesh\nSend a mesh to a remote trame service.\nModule for trame websocket client functions.\nSend the plotter meshes to a remote trame service.\nSince plotter can’t be pickled, we send the meshes list instead.\nPlotter to send.\nWebsocket host to connect to, by default “localhost”.\nWebsocket port to connect to, by default 8765.\nSend a mesh to a remote trame service.\nMesh to send.\nWebsocket host to connect to, by default “localhost”.\nWebsocket port to connect to, by default 8765."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index.html#summary",
        "title": "The trame_remote.py module > Summary",
        "section": "Summary",
        "text": "send_pl\nSend the plotter meshes to a remote trame service.\nsend_mesh\nSend a mesh to a remote trame service."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index.html#description",
        "title": "The trame_remote.py module > Description",
        "section": "Description",
        "text": "Module for trame websocket client functions."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_remote/index.html#module-detail",
        "title": "The trame_remote.py module > Module detail",
        "section": "Module detail",
        "text": "Send the plotter meshes to a remote trame service.\nSince plotter can’t be pickled, we send the meshes list instead.\nPlotter to send.\nWebsocket host to connect to, by default “localhost”.\nWebsocket port to connect to, by default 8765.\nSend a mesh to a remote trame service.\nMesh to send.\nWebsocket host to connect to, by default “localhost”.\nWebsocket port to connect to, by default 8765."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend.html#pyvistabackend",
        "title": "PyVistaBackend",
        "section": "PyVistaBackend",
        "text": "Bases: PyVistaBackendInterface\nProvides the generic plotter implementation for PyAnsys libraries.\nThis class accepts MeshObjectPlot, pv.MultiBlock and pv.PolyData objects.\nWhether to enable the use of trame.\nThe default is None, in which case the USE_TRAME global setting\nis used.\nWhether to allow picking capabilities in the window. Incompatible with hovering.\nPicking will take precedence over hovering.\nWhether to allow hovering capabilities in the window. Incompatible with picking.\nPicking will take precedence over hovering.\nWhether to plot the names of the picked objects.\nplot_iter\nPlot the elements of an iterable of any type of object to the scene.\nplot\nPlot a pyansys or PyVista object to the plotter.\nPlot the elements of an iterable of any type of object to the scene.\nThe types of objects supported are Body, Component, List[pv.PolyData],\npv.MultiBlock, and Sketch.\nList of objects to plot.\nRegular expression with the desired name or names to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nPlot a pyansys or PyVista object to the plotter.\nObject to add.\nRegular expression with the desired name or names to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nfrom ansys.tools.visualization_interface.backends.pyvista.pyvista import PyVistaBackend"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend.html#overview",
        "title": "PyVistaBackend > Overview",
        "section": "Overview",
        "text": "plot_iter\nPlot the elements of an iterable of any type of object to the scene.\nplot\nPlot a pyansys or PyVista object to the plotter."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend.html#import-detail",
        "title": "PyVistaBackend > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.backends.pyvista.pyvista import PyVistaBackend"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/pyvista/PyVistaBackend.html#method-detail",
        "title": "PyVistaBackend > Method detail",
        "section": "Method detail",
        "text": "Plot the elements of an iterable of any type of object to the scene.\nThe types of objects supported are Body, Component, List[pv.PolyData],\npv.MultiBlock, and Sketch.\nList of objects to plot.\nRegular expression with the desired name or names to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nPlot a pyansys or PyVista object to the plotter.\nObject to add.\nRegular expression with the desired name or names to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/VizLogger",
        "href": "api/ansys/tools/visualization_interface/utils/logger/VizLogger.html#vizlogger",
        "title": "VizLogger",
        "section": "VizLogger",
        "text": "Bases: object\nProvides the singleton logger for the visualizer.\nWhether to include the logs in a file.\nget_logger\nGet the logger.\nset_level\nSet the logger output level.\nenable_output\nEnable logger output to a given stream.\nadd_file_handler\nSave logs to a file in addition to printing them to the standard output.\nGet the logger.\nLogger.\nSet the logger output level.\nOutput Level of the logger.\nEnable logger output to a given stream.\nIf a stream is not specified, sys.stderr is used.\nStream to output the log output to.\nSave logs to a file in addition to printing them to the standard output.\nDirectory of the logs.\nfrom ansys.tools.visualization_interface.utils.logger import VizLogger"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/VizLogger",
        "href": "api/ansys/tools/visualization_interface/utils/logger/VizLogger.html#overview",
        "title": "VizLogger > Overview",
        "section": "Overview",
        "text": "get_logger\nGet the logger.\nset_level\nSet the logger output level.\nenable_output\nEnable logger output to a given stream.\nadd_file_handler\nSave logs to a file in addition to printing them to the standard output."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/VizLogger",
        "href": "api/ansys/tools/visualization_interface/utils/logger/VizLogger.html#import-detail",
        "title": "VizLogger > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.utils.logger import VizLogger"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/logger/VizLogger",
        "href": "api/ansys/tools/visualization_interface/utils/logger/VizLogger.html#method-detail",
        "title": "VizLogger > Method detail",
        "section": "Method detail",
        "text": "Get the logger.\nLogger.\nSet the logger output level.\nOutput Level of the logger.\nEnable logger output to a given stream.\nIf a stream is not specified, sys.stderr is used.\nStream to output the log output to.\nSave logs to a file in addition to printing them to the standard output.\nDirectory of the logs."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/index",
        "href": "api/ansys/tools/visualization_interface/backends/index.html#the-backends-package",
        "title": "The backends package",
        "section": "The backends package",
        "text": "pyvista\nProvides interfaces.\nProvides interfaces."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/index",
        "href": "api/ansys/tools/visualization_interface/backends/index.html#summary",
        "title": "The backends package > Summary",
        "section": "Summary",
        "text": "pyvista\nProvides interfaces."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/index",
        "href": "api/ansys/tools/visualization_interface/backends/index.html#description",
        "title": "The backends package > Description",
        "section": "Description",
        "text": "Provides interfaces."
    },
    {
        "objectID": "index",
        "href": "index.html#visualization-interface-tool-documentation-050",
        "title": "Visualization Interface Tool documentation 0.5.0",
        "section": "Visualization Interface Tool documentation 0.5.0",
        "text": "The Visualization Interface Tool is a Python API that provides an interface between PyAnsys libraries and\ndifferent plotting backends.\nThe Visualization Interface Tool offers these main features:\nServes as an interface between PyAnsys and other plotting libraries (although only\nPyVista is supported currently).\nProvides out-of-the box picking, viewing, and measuring functionalities.\nSupplies an extensible class for adding custom functionalities.\nLearn how to install the Visualization Interface Tool in user mode and quickly\nbegin using it.\nUnderstand key concepts for implementing the Visualization Interface Tool in\nyour workflow.\nUnderstand how to use Python to interact programmatically with\nthe Visualization Interface Tool.\nExplore examples that show how to use the Visualization Interface Tool to\nperform many different types of operations.\nLearn how to contribute to the Visualization Interface Tool codebase or documentation."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection.html#camerapandirection",
        "title": "CameraPanDirection",
        "section": "CameraPanDirection",
        "text": "Bases: enum.Enum\nProvides an enum with the available movement directions of the camera.\nXUP\nXDOWN\nYUP\nYDOWN\nZUP\nZDOWN\nfrom ansys.tools.visualization_interface.backends.pyvista.widgets.displace_arrows import CameraPanDirection"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection.html#overview",
        "title": "CameraPanDirection > Overview",
        "section": "Overview",
        "text": "XUP\nXDOWN\nYUP\nYDOWN\nZUP\nZDOWN"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection.html#import-detail",
        "title": "CameraPanDirection > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.backends.pyvista.widgets.displace_arrows import CameraPanDirection"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/displace_arrows/CameraPanDirection.html#attribute-detail",
        "title": "CameraPanDirection > Attribute detail",
        "section": "Attribute detail",
        "text": ""
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "This section describes how to install the Visualization Interface Tool in user mode and\nquickly begin using it. If you are interested in contributing to the Visualization Interface Tool,\nsee contribute for information on installing in developer mode.\nTo use pip to install the Visualization Interface Tool,\nrun this command:\nAlternatively, to install the latest version from this library’s\nGitHub repository,\nrun these commands:\nThe following examples show how to use the Visualization Interface Tool to visualize a mesh file.\nThis code uses only a PyVista mesh:\nThis code uses objects from a PyAnsys library:\npip install ansys-tools-visualization-interface\ngit clone https://github.com/ansys/ansys-tools-visualization-interface\ncd ansys-tools-visualization-interface\npip install .\nfrom ansys.tools.visualization_interface import Plotter\n\nmy_mesh = my_custom_object.get_mesh()\n\n# Create a Visualization Interface Tool object\npl = Plotter()\npl.plot(my_mesh)\n\n# Plot the result\npl.show()\nfrom ansys.tools.visualization_interface import Plotter, MeshObjectPlot\n\nmy_custom_object = MyObject()\nmy_mesh = my_custom_object.get_mesh()\n\nmesh_object = MeshObjectPlot(my_custom_object, my_mesh)\n\n# Create a Visualization Interface Tool object\npl = Plotter()\npl.plot(mesh_object)\n\n# Plot the result\npl.show()"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#installation",
        "title": "Getting started > Installation",
        "section": "Installation",
        "text": "To use pip to install the Visualization Interface Tool,\nrun this command:\nAlternatively, to install the latest version from this library’s\nGitHub repository,\nrun these commands:\nThe following examples show how to use the Visualization Interface Tool to visualize a mesh file.\nThis code uses only a PyVista mesh:\nThis code uses objects from a PyAnsys library:\npip install ansys-tools-visualization-interface\ngit clone https://github.com/ansys/ansys-tools-visualization-interface\ncd ansys-tools-visualization-interface\npip install .\nfrom ansys.tools.visualization_interface import Plotter\n\nmy_mesh = my_custom_object.get_mesh()\n\n# Create a Visualization Interface Tool object\npl = Plotter()\npl.plot(my_mesh)\n\n# Plot the result\npl.show()\nfrom ansys.tools.visualization_interface import Plotter, MeshObjectPlot\n\nmy_custom_object = MyObject()\nmy_mesh = my_custom_object.get_mesh()\n\nmesh_object = MeshObjectPlot(my_custom_object, my_mesh)\n\n# Create a Visualization Interface Tool object\npl = Plotter()\npl.plot(mesh_object)\n\n# Plot the result\npl.show()"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#quick-start",
        "title": "Getting started > Quick start",
        "section": "Quick start",
        "text": "The following examples show how to use the Visualization Interface Tool to visualize a mesh file.\nThis code uses only a PyVista mesh:\nThis code uses objects from a PyAnsys library:\nfrom ansys.tools.visualization_interface import Plotter\n\nmy_mesh = my_custom_object.get_mesh()\n\n# Create a Visualization Interface Tool object\npl = Plotter()\npl.plot(my_mesh)\n\n# Plot the result\npl.show()\nfrom ansys.tools.visualization_interface import Plotter, MeshObjectPlot\n\nmy_custom_object = MyObject()\nmy_mesh = my_custom_object.get_mesh()\n\nmesh_object = MeshObjectPlot(my_custom_object, my_mesh)\n\n# Create a Visualization Interface Tool object\npl = Plotter()\npl.plot(mesh_object)\n\n# Plot the result\npl.show()"
    },
    {
        "objectID": "api/index",
        "href": "api/index.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "This section describes ansys-tools-visualization-interface endpoints, their capabilities, and how\nto interact with them programmatically."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/index.html#the-screenshotpy-module",
        "title": "The screenshot.py module",
        "section": "The screenshot.py module",
        "text": "ScreenshotButton\nProvides the screenshot widget for the Visualization Interface Tool Plotter class.\nProvides the screenshot widget for the Visualization Interface Tool plotter."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/index.html#summary",
        "title": "The screenshot.py module > Summary",
        "section": "Summary",
        "text": "ScreenshotButton\nProvides the screenshot widget for the Visualization Interface Tool Plotter class."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/index",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/screenshot/index.html#description",
        "title": "The screenshot.py module > Description",
        "section": "Description",
        "text": "Provides the screenshot widget for the Visualization Interface Tool plotter."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane",
        "href": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane.html#clipplane",
        "title": "ClipPlane",
        "section": "ClipPlane",
        "text": "Provides the clipping plane for clipping meshes in the plotter.\nThe clipping plane is defined by both normal and origin vectors.\nNormal of the plane.\nOrigin point of the plane.\nnormal\nNormal of the plane.\norigin\nOrigin of the plane.\nNormal of the plane.\nNormal of the plane.\nOrigin of the plane.\nOrigin of the plane.\nfrom ansys.tools.visualization_interface.utils.clip_plane import ClipPlane"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane",
        "href": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane.html#overview",
        "title": "ClipPlane > Overview",
        "section": "Overview",
        "text": "normal\nNormal of the plane.\norigin\nOrigin of the plane."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane",
        "href": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane.html#import-detail",
        "title": "ClipPlane > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.utils.clip_plane import ClipPlane"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane",
        "href": "api/ansys/tools/visualization_interface/utils/clip_plane/ClipPlane.html#property-detail",
        "title": "ClipPlane > Property detail",
        "section": "Property detail",
        "text": "Normal of the plane.\nNormal of the plane.\nOrigin of the plane.\nOrigin of the plane."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/plotter/Plotter",
        "href": "api/ansys/tools/visualization_interface/plotter/Plotter.html#plotter",
        "title": "Plotter",
        "section": "Plotter",
        "text": "Base plotting class containing common methods and attributes.\nThis class is responsible for plotting objects using the specified backend.\nPlotting backend to use, by default PyVistaBackend.\nplot\nPlots an object using the specified backend.\nshow\nShow the plotted objects.\nPlots an object using the specified backend.\nObject to plot.\nAdditional plotting options.\nShow the plotted objects.\nObject to show, by default None.\nPath to save a screenshot, by default None.\nFlag to filter the object, by default None.\nAdditional plotting options the selected backend accepts.\nfrom ansys.tools.visualization_interface.plotter import Plotter"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/plotter/Plotter",
        "href": "api/ansys/tools/visualization_interface/plotter/Plotter.html#overview",
        "title": "Plotter > Overview",
        "section": "Overview",
        "text": "plot\nPlots an object using the specified backend.\nshow\nShow the plotted objects."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/plotter/Plotter",
        "href": "api/ansys/tools/visualization_interface/plotter/Plotter.html#import-detail",
        "title": "Plotter > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.plotter import Plotter"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/plotter/Plotter",
        "href": "api/ansys/tools/visualization_interface/plotter/Plotter.html#method-detail",
        "title": "Plotter > Method detail",
        "section": "Method detail",
        "text": "Plots an object using the specified backend.\nObject to plot.\nAdditional plotting options.\nShow the plotted objects.\nObject to show, by default None.\nPath to save a screenshot, by default None.\nFlag to filter the object, by default None.\nAdditional plotting options the selected backend accepts."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService.html#trameservice",
        "title": "TrameService",
        "section": "TrameService",
        "text": "Trame service class.\nInitializes a trame service where you can send meshes to plot in a trame webview plotter.\nHost where the webserver will listen for new plotters and meshes, by default “localhost”.\nPort where the webserver will listen for new plotters and meshes, by default 8765.\nclear_plotter\nClears the web view in the service.\nset_scene\nSets the web view scene for the trame service.\nrun\nStart the trame web view and the websocket services.\nClears the web view in the service.\nSets the web view scene for the trame service.\nStart the trame web view and the websocket services.\nfrom ansys.tools.visualization_interface.backends.pyvista.trame_service import TrameService"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService.html#overview",
        "title": "TrameService > Overview",
        "section": "Overview",
        "text": "clear_plotter\nClears the web view in the service.\nset_scene\nSets the web view scene for the trame service.\nrun\nStart the trame web view and the websocket services."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService.html#import-detail",
        "title": "TrameService > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.backends.pyvista.trame_service import TrameService"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/trame_service/TrameService.html#method-detail",
        "title": "TrameService > Method detail",
        "section": "Method detail",
        "text": "Clears the web view in the service.\nSets the web view scene for the trame service.\nStart the trame web view and the websocket services."
    },
    {
        "objectID": "sg_execution_times",
        "href": "sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:09.854 total execution time for 6 files from all galleries:\nExample\nTime\nMem (MB)\nsphx_glr_examples_01-advanced-pyansys-examples_using_meshobject_with_field_data.py (../../examples/01-advanced-pyansys-examples/using_meshobject_with_field_data.py)\n00:06.318\n0.0\nsphx_glr_examples_00-basic-pyvista-examples_clipping_plane.py (../../examples/00-basic-pyvista-examples/clipping_plane.py)\n00:01.212\n0.0\nsphx_glr_examples_00-basic-pyvista-examples_plain_usage.py (../../examples/00-basic-pyvista-examples/plain_usage.py)\n00:01.039\n0.0\nsphx_glr_examples_00-basic-pyvista-examples_picker.py (../../examples/00-basic-pyvista-examples/picker.py)\n00:00.842\n0.0\nsphx_glr_examples_00-basic-pyvista-examples_using_meshobject.py (../../examples/00-basic-pyvista-examples/using_meshobject.py)\n00:00.443\n0.0\nsphx_glr_examples_00-basic-pyvista-examples_remote_trame_view.py (../../examples/00-basic-pyvista-examples/remote_trame_view.py)\n00:00.000\n0.0"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton.html#hidebutton",
        "title": "HideButton",
        "section": "HideButton",
        "text": "Bases: ansys.tools.visualization_interface.backends.pyvista.widgets.widget.PlotterWidget\nProvides the hide widget for the Visualization Interface Tool Plotter class.\nPlotter to add the hide widget to.\ncallback\nRemove or add the hide widget actor upon click.\nupdate\nDefine the hide widget button parameters.\nRemove or add the hide widget actor upon click.\nWhether the state of the button, which is inherited from PyVista, is active.\nDefine the hide widget button parameters.\nfrom ansys.tools.visualization_interface.backends.pyvista.widgets.hide_buttons import HideButton"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton.html#overview",
        "title": "HideButton > Overview",
        "section": "Overview",
        "text": "callback\nRemove or add the hide widget actor upon click.\nupdate\nDefine the hide widget button parameters."
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton.html#import-detail",
        "title": "HideButton > Import detail",
        "section": "Import detail",
        "text": "from ansys.tools.visualization_interface.backends.pyvista.widgets.hide_buttons import HideButton"
    },
    {
        "objectID": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton",
        "href": "api/ansys/tools/visualization_interface/backends/pyvista/widgets/hide_buttons/HideButton.html#method-detail",
        "title": "HideButton > Method detail",
        "section": "Method detail",
        "text": "Remove or add the hide widget actor upon click.\nWhether the state of the button, which is inherited from PyVista, is active.\nDefine the hide widget button parameters."
    }
]